// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#nullable disable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis.CSharp.Symbols;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.PooledObjects;
using Microsoft.CodeAnalysis.Text;
using Roslyn.Utilities;

namespace Microsoft.CodeAnalysis.CSharp
{
    internal abstract class CSharpSemanticModel : SemanticModel
    {
        public new abstract CSharpCompilation Compilation { get; }

        internal new abstract CSharpSyntaxNode Root { get; }


        // Is this node one that could be successfully interrogated by GetSymbolInfo/GetTypeInfo/GetMemberGroup/GetConstantValue?
        // WARN: If isSpeculative is true, then don't look at .Parent - there might not be one.
        internal static bool CanGetSemanticInfo(CSharpSyntaxNode node, bool allowNamedArgumentName = false, bool isSpeculative = false)
        {
            Debug.Assert(node != null);

            if (!isSpeculative && IsInStructuredTriviaOtherThanCrefOrNameAttribute(node))
            {
                return false;
            }

            switch (node.Kind())
            {
                case SyntaxKind.CollectionInitializerExpression:
                case SyntaxKind.ObjectInitializerExpression:
                    //  new CollectionClass() { 1, 2, 3 }
                    //                        ~~~~~~~~~~~
                    //  OR
                    //
                    //  new ObjectClass() { field = 1, prop = 2 }
                    //                    ~~~~~~~~~~~~~~~~~~~~~~~
                    // CollectionInitializerExpression and ObjectInitializerExpression are not really expressions in the language sense.
                    // We do not allow getting the semantic info for these syntax nodes. However, we do allow getting semantic info
                    // for each of the individual initializer elements or member assignments.
                    return false;

                case SyntaxKind.ComplexElementInitializerExpression:
                    //  new Collection { 1, {2, 3} }
                    //                      ~~~~~~
                    // ComplexElementInitializerExpression are also not true expressions in the language sense, so we disallow getting the
                    // semantic info for it. However, we may be interested in getting the semantic info for the compiler generated Add
                    // method invoked with initializer expressions as arguments. Roslyn bug 11987 tracks this work item.
                    return false;

                case SyntaxKind.IdentifierName:
                    // The alias of a using directive is a declaration, so there is no semantic info - use GetDeclaredSymbol instead.
                    if (!isSpeculative && node.Parent != null && node.Parent.Kind() == SyntaxKind.NameEquals && node.Parent.Parent.Kind() == SyntaxKind.UsingDirective)
                    {
                        return false;
                    }

                    goto default;

                case SyntaxKind.OmittedTypeArgument:
                case SyntaxKind.RefExpression:
                case SyntaxKind.RefType:
                    // These are just placeholders and are not separately meaningful.
                    return false;

                default:
                    // If we are being asked for binding info on a "missing" syntax node
                    // then there's no point in doing any work at all. For example, the user might
                    // have something like "class C { [] void M() {} }". The caller might obtain 
                    // the attribute declaration syntax and then attempt to ask for type information
                    // about the contents of the attribute. But the parser has recovered from the 
                    // missing attribute type and filled in a "missing" node in its place. There's
                    // nothing we can do with that, so let's not allow it.
                    if (node.IsMissing)
                    {
                        return false;
                    }

                    return
                        (node is ExpressionSyntax && (isSpeculative || allowNamedArgumentName || !SyntaxFacts.IsNamedArgumentName(node))) ||
                        (node is ConstructorInitializerSyntax) ||
                        (node is PrimaryConstructorBaseTypeSyntax) ||
                        (node is AttributeSyntax) ||
                        (node is CrefSyntax);
            }
        }

        internal abstract SymbolInfo GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract SymbolInfo GetCollectionInitializerSymbolInfoWorker(InitializerExpressionSyntax collectionInitializer, ExpressionSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract CSharpTypeInfo GetTypeInfoWorker(CSharpSyntaxNode node, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract BoundExpression GetSpeculativelyBoundExpression(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption, out Binder binder, out ImmutableArray<Symbol> crefSymbols);

        internal abstract ImmutableArray<Symbol> GetMemberGroupWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract ImmutableArray<IPropertySymbol> GetIndexerGroupWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract Optional<object> GetConstantValueWorker(CSharpSyntaxNode node, CancellationToken cancellationToken = default(CancellationToken));

        internal Binder GetSpeculativeBinder(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 12201, 13793);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12345, 12378);

                f_10919_12345_12377(expression != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12394, 12438);

                position = f_10919_12405_12437(this, position);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12454, 12674) || true) && (bindingOption == SpeculativeBindingOption.BindAsTypeOrNamespace)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 12454, 12674);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12555, 12659) || true) && (!(expression is TypeSyntax))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 12555, 12659);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12628, 12640);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 12555, 12659);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 12454, 12674);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12690, 12740);

                Binder
                binder = f_10919_12706_12739(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12754, 12833) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 12754, 12833);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12806, 12818);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 12754, 12833);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 12849, 13574) || true) && (bindingOption == SpeculativeBindingOption.BindAsTypeOrNamespace && (DynAbs.Tracing.TraceSender.Expression_True(10919, 12853, 12950) && f_10919_12920_12950(this, position)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 12849, 13574);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 13513, 13559);

                    binder = f_10919_13522_13558(expression, binder);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 12849, 13574);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 13590, 13659);

                binder = f_10919_13599_13658(f_10919_13629_13639(), position, binder);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 13675, 13782);

                return f_10919_13682_13781(f_10919_13682_13759(expression, f_10919_13719_13750(binder), binder), expression);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 12201, 13793);

                int
                f_10919_12345_12377(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 12345, 12377);
                    return 0;
                }


                int
                f_10919_12405_12437(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 12405, 12437);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_12706_12739(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 12706, 12739);
                    return return_v;
                }


                bool
                f_10919_12920_12950(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.IsInTypeofExpression(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 12920, 12950);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.TypeofBinder
                f_10919_13522_13558(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                typeExpression, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.TypeofBinder(typeExpression, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 13522, 13558);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_13629_13639()
                {
                    var return_v = SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 13629, 13639);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.WithNullableContextBinder
                f_10919_13599_13658(Microsoft.CodeAnalysis.SyntaxTree
                syntaxTree, int
                position, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.WithNullableContextBinder(syntaxTree, position, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 13599, 13658);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_13719_13750(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 13719, 13750);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                f_10919_13682_13759(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                root, Microsoft.CodeAnalysis.CSharp.Symbol?
                memberSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder((Microsoft.CodeAnalysis.SyntaxNode)root, memberSymbol, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 13682, 13759);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_13682_13781(Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 13682, 13781);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 12201, 13793);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 12201, 13793);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private Binder GetSpeculativeBinderForAttribute(int position, AttributeSyntax attribute)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 13805, 14273);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 13918, 13985);

                position = f_10919_13929_13984(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14001, 14048);

                var
                binder = f_10919_14014_14047(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14062, 14141) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 14062, 14141);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14114, 14126);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 14062, 14141);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14157, 14262);

                return f_10919_14164_14261(f_10919_14164_14240(attribute, f_10919_14200_14231(binder), binder), attribute);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 13805, 14273);

                int
                f_10919_13929_13984(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPositionForSpeculativeAttribute(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 13929, 13984);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_14014_14047(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14014, 14047);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_14200_14231(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 14200, 14231);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                f_10919_14164_14240(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                root, Microsoft.CodeAnalysis.CSharp.Symbol?
                memberSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder((Microsoft.CodeAnalysis.SyntaxNode)root, memberSymbol, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14164, 14240);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_14164_14261(Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14164, 14261);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 13805, 14273);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 13805, 14273);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static BoundExpression GetSpeculativelyBoundExpressionHelper(Binder binder, ExpressionSyntax expression, SpeculativeBindingOption bindingOption, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 14285, 15302);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14489, 14518);

                f_10919_14489_14517(binder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14532, 14575);

                f_10919_14532_14574(f_10919_14545_14573(binder));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14589, 14622);

                f_10919_14589_14621(expression != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14636, 14742);

                f_10919_14636_14741(bindingOption != SpeculativeBindingOption.BindAsTypeOrNamespace || (DynAbs.Tracing.TraceSender.Expression_False(10919, 14649, 14740) || expression is TypeSyntax));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14758, 14784);

                BoundExpression
                boundNode
                = default(BoundExpression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14798, 15258) || true) && (bindingOption == SpeculativeBindingOption.BindAsTypeOrNamespace || (DynAbs.Tracing.TraceSender.Expression_False(10919, 14802, 14929) || f_10919_14869_14929(binder.Flags, BinderFlags.CrefParameterOrReturnType)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 14798, 15258);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 14963, 15027);

                    boundNode = f_10919_14975_15026(binder, expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 14798, 15258);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 14798, 15258);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 15093, 15166);

                    f_10919_15093_15165(bindingOption == SpeculativeBindingOption.BindAsExpression);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 15184, 15243);

                    boundNode = f_10919_15196_15242(binder, expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 14798, 15258);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 15274, 15291);

                return boundNode;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 14285, 15302);

                int
                f_10919_14489_14517(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14489, 14517);
                    return 0;
                }


                bool
                f_10919_14545_14573(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsSemanticModelBinder;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 14545, 14573);
                    return return_v;
                }


                int
                f_10919_14532_14574(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14532, 14574);
                    return 0;
                }


                int
                f_10919_14589_14621(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14589, 14621);
                    return 0;
                }


                int
                f_10919_14636_14741(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14636, 14741);
                    return 0;
                }


                bool
                f_10919_14869_14929(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14869, 14929);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_14975_15026(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindNamespaceOrType(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 14975, 15026);
                    return return_v;
                }


                int
                f_10919_15093_15165(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 15093, 15165);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_15196_15242(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 15196, 15242);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 14285, 15302);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 14285, 15302);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected BoundExpression GetSpeculativelyBoundExpressionWithoutNullability(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption, out Binder binder, out ImmutableArray<Symbol> crefSymbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 15645, 17808);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 15887, 16010) || true) && (expression == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 15887, 16010);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 15943, 15995);

                    throw f_10919_15949_15994(nameof(expression));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 15887, 16010);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16026, 16072);

                crefSymbols = default(ImmutableArray<Symbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16088, 16151);

                expression = f_10919_16101_16150(expression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16167, 16239);

                binder = f_10919_16176_16238(this, position, expression, bindingOption);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16253, 16332) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16253, 16332);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16305, 16317);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16253, 16332);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16348, 17555) || true) && (f_10919_16352_16412(binder.Flags, BinderFlags.CrefParameterOrReturnType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16348, 17555);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16446, 16498);

                    var
                    unusedDiagnostics = f_10919_16470_16497()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16516, 16613);

                    crefSymbols = f_10919_16530_16612(f_10919_16560_16606(binder, expression, unusedDiagnostics).Type);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16631, 16656);

                    f_10919_16631_16655(unusedDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16674, 16686);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16348, 17555);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16348, 17555);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16720, 17555) || true) && (f_10919_16724_16737(binder))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16720, 17555);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16771, 17508) || true) && (f_10919_16775_16818(expression, SyntaxKind.QualifiedName))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16771, 17508);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16860, 16908);

                            var
                            qualified = (QualifiedNameSyntax)expression
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 16930, 17039);

                            var
                            crefWrapper = f_10919_16948_17038(f_10919_16976_16990(qualified), f_10919_16992_17037(f_10919_17021_17036(qualified)))
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17061, 17105);

                            crefSymbols = f_10919_17075_17104(crefWrapper, binder);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16771, 17508);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 16771, 17508);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17147, 17508) || true) && (expression is TypeSyntax typeSyntax)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 17147, 17508);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17228, 17423);

                                var
                                crefWrapper = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 17246, 17280) || ((typeSyntax is PredefinedTypeSyntax && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 17308, 17354)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 17382, 17422))) ? (CrefSyntax)f_10919_17320_17354(typeSyntax) : f_10919_17382_17422(typeSyntax)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17445, 17489);

                                crefSymbols = f_10919_17459_17488(crefWrapper, binder);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 17147, 17508);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16771, 17508);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17528, 17540);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16720, 17555);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 16348, 17555);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17571, 17617);

                var
                diagnostics = f_10919_17589_17616()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17631, 17733);

                var
                boundNode = f_10919_17647_17732(binder, expression, bindingOption, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17747, 17766);

                f_10919_17747_17765(diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17780, 17797);

                return boundNode;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 15645, 17808);

                System.ArgumentNullException
                f_10919_15949_15994(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 15949, 15994);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10919_16101_16150(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression)
                {
                    var return_v = SyntaxFactory.GetStandaloneExpression(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16101, 16150);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_16176_16238(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeBinder(position, expression, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16176, 16238);
                    return return_v;
                }


                bool
                f_10919_16352_16412(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16352, 16412);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_16470_16497()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16470, 16497);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10919_16560_16606(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindType(syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16560, 16606);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_16530_16612(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16530, 16612);
                    return return_v;
                }


                int
                f_10919_16631_16655(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16631, 16655);
                    return 0;
                }


                bool
                f_10919_16724_16737(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.InCref;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 16724, 16737);
                    return return_v;
                }


                bool
                f_10919_16775_16818(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16775, 16818);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                f_10919_16976_16990(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 16976, 16990);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                f_10919_17021_17036(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 17021, 17036);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax
                f_10919_16992_17037(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                name)
                {
                    var return_v = SyntaxFactory.NameMemberCref((Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16992, 17037);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax
                f_10919_16948_17038(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                container, Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax
                member)
                {
                    var return_v = SyntaxFactory.QualifiedCref((Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)container, (Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)member);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 16948, 17038);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_17075_17104(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax
                crefSyntax, Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = BindCref((Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)crefSyntax, binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17075, 17104);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax
                f_10919_17320_17354(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                type)
                {
                    var return_v = SyntaxFactory.TypeCref(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17320, 17354);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax
                f_10919_17382_17422(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                name)
                {
                    var return_v = SyntaxFactory.NameMemberCref(name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17382, 17422);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_17459_17488(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax, Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = BindCref(crefSyntax, binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17459, 17488);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_17589_17616()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17589, 17616);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_17647_17732(Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = GetSpeculativelyBoundExpressionHelper(binder, expression, bindingOption, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17647, 17732);
                    return return_v;
                }


                int
                f_10919_17747_17765(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17747, 17765);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 15645, 17808);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 15645, 17808);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static ImmutableArray<Symbol> BindCref(CrefSyntax crefSyntax, Binder binder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 17820, 18206);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17930, 17982);

                var
                unusedDiagnostics = f_10919_17954_17981()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 17996, 18025);

                Symbol
                unusedAmbiguityWinner
                = default(Symbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18039, 18127);

                var
                symbols = f_10919_18053_18126(binder, crefSyntax, out unusedAmbiguityWinner, unusedDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18141, 18166);

                f_10919_18141_18165(unusedDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18180, 18195);

                return symbols;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 17820, 18206);

                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_17954_17981()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 17954, 17981);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_18053_18126(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                syntax, out Microsoft.CodeAnalysis.CSharp.Symbol
                ambiguityWinner, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindCref(syntax, out ambiguityWinner, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18053, 18126);
                    return return_v;
                }


                int
                f_10919_18141_18165(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18141, 18165);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 17820, 18206);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 17820, 18206);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal SymbolInfo GetCrefSymbolInfo(int position, CrefSyntax crefSyntax, SymbolInfoOptions options, bool hasParameterList)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 18218, 18694);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18367, 18414);

                var
                binder = f_10919_18380_18413(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18428, 18644) || true) && (f_10919_18432_18446_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(binder, 10919, 18432, 18446)?.InCref) == true)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18428, 18644);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18488, 18550);

                    ImmutableArray<Symbol>
                    symbols = f_10919_18521_18549(crefSyntax, binder)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18568, 18629);

                    return f_10919_18575_18628(symbols, options, hasParameterList);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18428, 18644);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18660, 18683);

                return SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 18218, 18694);

                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_18380_18413(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18380, 18413);
                    return return_v;
                }


                bool?
                f_10919_18432_18446_M(bool?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 18432, 18446);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_18521_18549(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax, Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = BindCref(crefSyntax, binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18521, 18549);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_18575_18628(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, bool
                hasParameterList)
                {
                    var return_v = GetCrefSymbolInfo(symbols, options, hasParameterList);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18575, 18628);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 18218, 18694);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 18218, 18694);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static bool HasParameterList(CrefSyntax crefSyntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 18706, 19628);
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18791, 18946) || true) && (f_10919_18798_18815(crefSyntax) == SyntaxKind.QualifiedCref)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18791, 18946);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18877, 18931);

                        crefSyntax = f_10919_18890_18930(((QualifiedCrefSyntax)crefSyntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18791, 18946);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 18791, 18946);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 18791, 18946);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 18962, 19588);

                switch (f_10919_18970_18987(crefSyntax))
                {

                    case SyntaxKind.NameMemberCref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18962, 19588);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19074, 19135);

                        return f_10919_19081_19126(((NameMemberCrefSyntax)crefSyntax)) != null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18962, 19588);

                    case SyntaxKind.IndexerMemberCref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18962, 19588);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19209, 19273);

                        return f_10919_19216_19264(((IndexerMemberCrefSyntax)crefSyntax)) != null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18962, 19588);

                    case SyntaxKind.OperatorMemberCref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18962, 19588);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19348, 19413);

                        return f_10919_19355_19404(((OperatorMemberCrefSyntax)crefSyntax)) != null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18962, 19588);

                    case SyntaxKind.ConversionOperatorMemberCref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 18962, 19588);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19498, 19573);

                        return f_10919_19505_19564(((ConversionOperatorMemberCrefSyntax)crefSyntax)) != null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 18962, 19588);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19604, 19617);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 18706, 19628);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_18798_18815(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18798, 18815);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax
                f_10919_18890_18930(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax
                this_param)
                {
                    var return_v = this_param.Member;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 18890, 18930);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_18970_18987(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 18970, 18987);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax?
                f_10919_19081_19126(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax
                this_param)
                {
                    var return_v = this_param.Parameters;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 19081, 19126);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax?
                f_10919_19216_19264(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax
                this_param)
                {
                    var return_v = this_param.Parameters;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 19216, 19264);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax?
                f_10919_19355_19404(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax
                this_param)
                {
                    var return_v = this_param.Parameters;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 19355, 19404);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax?
                f_10919_19505_19564(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax
                this_param)
                {
                    var return_v = this_param.Parameters;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 19505, 19564);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 18706, 19628);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 18706, 19628);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static SymbolInfo GetCrefSymbolInfo(ImmutableArray<Symbol> symbols, SymbolInfoOptions options, bool hasParameterList)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 19640, 21114);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19790, 21103);

                switch (symbols.Length)
                {

                    case 0:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 19790, 21103);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 19875, 19898);

                        return SymbolInfo.None;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 19790, 21103);

                    case 1:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 19790, 21103);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20043, 20094);

                        return f_10919_20050_20093(symbols[0], options);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 19790, 21103);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 19790, 21103);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20142, 20332) || true) && ((options & SymbolInfoOptions.ResolveAliases) == SymbolInfoOptions.ResolveAliases)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 20142, 20332);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20276, 20309);

                            symbols = f_10919_20286_20308(symbols);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 20142, 20332);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20356, 20413);

                        LookupResultKind
                        resultKind = LookupResultKind.Ambiguous
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20724, 20772);

                        SymbolKind
                        firstCandidateKind = f_10919_20756_20771(symbols[0])
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20794, 20993) || true) && (hasParameterList && (DynAbs.Tracing.TraceSender.Expression_True(10919, 20798, 20864) && symbols.All(s => s.Kind == firstCandidateKind)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 20794, 20993);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 20914, 20970);

                            resultKind = LookupResultKind.OverloadResolutionFailure;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 20794, 20993);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21017, 21088);

                        return f_10919_21024_21087(symbols, resultKind, isDynamic: false);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 19790, 21103);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 19640, 21114);

                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_20050_20093(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options)
                {
                    var return_v = GetSymbolInfoForSymbol(symbol, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 20050, 20093);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_20286_20308(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols)
                {
                    var return_v = UnwrapAliases(symbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 20286, 20308);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_20756_20771(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 20756, 20771);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_21024_21087(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, bool
                isDynamic)
                {
                    var return_v = SymbolInfoFactory.Create(symbols, resultKind, isDynamic: isDynamic);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 21024, 21087);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 19640, 21114);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 19640, 21114);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundAttribute GetSpeculativelyBoundAttribute(int position, AttributeSyntax attribute, out Binder binder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 21340, 22252);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21478, 21599) || true) && (attribute == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 21478, 21599);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21533, 21584);

                    throw f_10919_21539_21583(nameof(attribute));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 21478, 21599);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21615, 21683);

                binder = f_10919_21624_21682(this, position, attribute);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21697, 21776) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 21697, 21776);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21749, 21761);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 21697, 21776);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21792, 21838);

                var
                diagnostics = f_10919_21810_21837()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21852, 21873);

                AliasSymbol
                aliasOpt
                = default(AliasSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 21902, 22015);

                NamedTypeSymbol
                attributeType = (NamedTypeSymbol)f_10919_21951_22009(binder, f_10919_21967_21981(attribute), diagnostics, out aliasOpt).Type
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 22029, 22175);

                var
                boundNode = f_10919_22045_22174(f_10919_22045_22121(attribute, f_10919_22081_22112(binder), binder), attribute, attributeType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 22189, 22208);

                f_10919_22189_22207(diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 22224, 22241);

                return boundNode;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 21340, 22252);

                System.ArgumentNullException
                f_10919_21539_21583(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 21539, 21583);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_21624_21682(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute)
                {
                    var return_v = this_param.GetSpeculativeBinderForAttribute(position, attribute);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 21624, 21682);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_21810_21837()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 21810, 21837);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                f_10919_21967_21981(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 21967, 21981);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10919_21951_22009(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                alias)
                {
                    var return_v = this_param.BindType((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)syntax, diagnostics, out alias);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 21951, 22009);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_22081_22112(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 22081, 22112);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                f_10919_22045_22121(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                root, Microsoft.CodeAnalysis.CSharp.Symbol?
                memberSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder((Microsoft.CodeAnalysis.SyntaxNode)root, memberSymbol, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 22045, 22121);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAttribute
                f_10919_22045_22174(Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                attributeType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindAttribute(node, attributeType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 22045, 22174);
                    return return_v;
                }


                int
                f_10919_22189_22207(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 22189, 22207);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 21340, 22252);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 21340, 22252);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private int CheckAndAdjustPositionForSpeculativeAttribute(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 23064, 24915);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23160, 23204);

                position = f_10919_23171_23203(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23220, 23265);

                SyntaxToken
                token = f_10919_23240_23264(f_10919_23240_23244(), position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23279, 23362) || true) && (position == 0 && (DynAbs.Tracing.TraceSender.Expression_True(10919, 23283, 23327) && position != token.SpanStart))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 23279, 23362);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23346, 23362);

                    return position;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 23279, 23362);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23378, 23433);

                CSharpSyntaxNode
                node = (CSharpSyntaxNode)token.Parent
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 23447, 24872) || true) && (position == f_10919_23463_23477(node))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 23447, 24872);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24163, 24489) || true) && (node is BaseTypeDeclarationSyntax typeDecl)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 24163, 24489);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24425, 24470);

                        position = typeDecl.OpenBraceToken.SpanStart;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 24163, 24489);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24509, 24578);

                    var
                    methodDecl = f_10919_24526_24577(node)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24596, 24857) || true) && (f_10919_24600_24621_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(methodDecl, 10919, 24600, 24621)?.SpanStart) == position)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 24596, 24857);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24795, 24838);

                        position = methodDecl.Identifier.SpanStart;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 24596, 24857);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 23447, 24872);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 24888, 24904);

                return position;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 23064, 24915);

                int
                f_10919_23171_23203(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 23171, 23203);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_23240_23244()
                {
                    var return_v = Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 23240, 23244);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_23240_23264(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param, int
                position)
                {
                    var return_v = this_param.FindToken(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 23240, 23264);
                    return return_v;
                }


                int
                f_10919_23463_23477(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.SpanStart;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 23463, 23477);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax?
                f_10919_24526_24577(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.FirstAncestorOrSelf<Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 24526, 24577);
                    return return_v;
                }


                int?
                f_10919_24600_24621_M(int?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 24600, 24621);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 23064, 24915);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 23064, 24915);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected override IOperation GetOperationCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 24981, 25265);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 25106, 25142);

                var
                csnode = (CSharpSyntaxNode)node
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 25156, 25180);

                f_10919_25156_25179(this, csnode);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 25196, 25254);

                return f_10919_25203_25253(this, csnode, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 24981, 25265);

                int
                f_10919_25156_25179(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    this_param.CheckSyntaxNode(syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 25156, 25179);
                    return 0;
                }


                Microsoft.CodeAnalysis.IOperation
                f_10919_25203_25253(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetOperationWorker(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 25203, 25253);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 24981, 25265);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 24981, 25265);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual IOperation GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 25277, 25431);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 25408, 25420);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 25277, 25431);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 25277, 25431);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 25277, 25431);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract SymbolInfo GetSymbolInfo(OrderingSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        public abstract SymbolInfo GetSymbolInfo(SelectOrGroupClauseSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        public SymbolInfo GetSymbolInfo(PositionalPatternClauseSyntax node, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 26197, 26493);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 26355, 26377);

                f_10919_26355_26376(this, node);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 26391, 26482);

                return f_10919_26398_26481(this, node, SymbolInfoOptions.DefaultOptions, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 26197, 26493);

                int
                f_10919_26355_26376(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 26355, 26376);
                    return 0;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_26398_26481(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 26398, 26481);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 26197, 26493);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 26197, 26493);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 27258, 29489);
                Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax? parent = default(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax?);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27409, 27437);

                f_10919_27409_27436(this, expression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27453, 29365) || true) && (!f_10919_27458_27518(expression, allowNamedArgumentName: true))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27453, 29365);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27552, 27575);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27453, 29365);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27453, 29365);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27609, 29365) || true) && (f_10919_27613_27656(expression))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27609, 29365);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27750, 27842);

                        return f_10919_27757_27841(this, expression, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27609, 29365);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27609, 29365);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 27876, 29365) || true) && (f_10919_27880_27971(expression, out parent))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27876, 29365);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28005, 28763);

                            switch (f_10919_28013_28038(f_10919_28013_28031(parent)))
                            {

                                case SyntaxKind.SingleVariableDesignation:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28005, 28763);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28148, 28280);

                                    return f_10919_28155_28279(f_10919_28185_28273(this, f_10919_28235_28253(parent), cancellationToken).Type);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28005, 28763);

                                case SyntaxKind.DiscardDesignation:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28005, 28763);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28365, 28471);

                                    return f_10919_28372_28470(f_10919_28402_28469(f_10919_28402_28446(this, parent, cancellationToken).Type));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28005, 28763);

                                case SyntaxKind.ParenthesizedVariableDesignation:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28005, 28763);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28570, 28712) || true) && (f_10919_28574_28604(((TypeSyntax)expression)))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28570, 28712);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28662, 28685);

                                        return SymbolInfo.None;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28570, 28712);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 28738, 28744);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28005, 28763);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27876, 29365);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 27876, 29365);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28797, 29365) || true) && (expression is DeclarationExpressionSyntax declaration)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28797, 29365);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 28888, 29046) || true) && (f_10919_28892_28922(f_10919_28892_28915(declaration)) != SyntaxKind.SingleVariableDesignation)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 28888, 29046);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29004, 29027);

                                    return SymbolInfo.None;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28888, 29046);
                                }
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29066, 29174);

                                var
                                symbol = f_10919_29079_29173(this, f_10919_29130_29153(declaration), cancellationToken)
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29192, 29302) || true) && ((object)symbol == null)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 29192, 29302);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29260, 29283);

                                    return SymbolInfo.None;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 29192, 29302);
                                }
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29320, 29350);

                                return f_10919_29327_29349(symbol);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 28797, 29365);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27876, 29365);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27609, 29365);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 27453, 29365);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29381, 29478);

                return f_10919_29388_29477(this, expression, SymbolInfoOptions.DefaultOptions, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 27258, 29489);

                int
                f_10919_27409_27436(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 27409, 27436);
                    return 0;
                }


                bool
                f_10919_27458_27518(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, bool
                allowNamedArgumentName)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, allowNamedArgumentName: allowNamedArgumentName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 27458, 27518);
                    return return_v;
                }


                bool
                f_10919_27613_27656(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = SyntaxFacts.IsNamedArgumentName((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 27613, 27656);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_27757_27841(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                identifierNameSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetNamedArgumentSymbolInfo((Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)identifierNameSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 27757, 27841);
                    return return_v;
                }


                bool
                f_10919_27880_27971(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, out Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                parent)
                {
                    var return_v = SyntaxFacts.IsDeclarationExpressionType((Microsoft.CodeAnalysis.SyntaxNode)node, out parent);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 27880, 27971);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_28013_28031(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 28013, 28031);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_28013_28038(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28013, 28038);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_28235_28253(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 28235, 28253);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.ITypeSymbol Type, Microsoft.CodeAnalysis.NullableAnnotation Annotation)
                f_10919_28185_28273(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                variableDesignation, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.TypeFromVariable((Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)variableDesignation, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28185, 28273);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_28155_28279(Microsoft.CodeAnalysis.ITypeSymbol
                type)
                {
                    var return_v = GetSymbolInfoFromSymbolOrNone(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28155, 28279);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_28402_28446(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28402, 28446);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ITypeSymbol?
                f_10919_28402_28469(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28402, 28469);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_28372_28470(Microsoft.CodeAnalysis.ITypeSymbol
                type)
                {
                    var return_v = GetSymbolInfoFromSymbolOrNone(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28372, 28470);
                    return return_v;
                }


                bool
                f_10919_28574_28604(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                this_param)
                {
                    var return_v = this_param.IsVar;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 28574, 28604);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_28892_28915(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 28892, 28915);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_28892_28922(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 28892, 28922);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_29130_29153(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 29130, 29153);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_29079_29173(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 29079, 29173);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_29327_29349(Microsoft.CodeAnalysis.ISymbol
                symbol)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 29327, 29349);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_29388_29477(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 29388, 29477);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 27258, 29489);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 27258, 29489);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static SymbolInfo GetSymbolInfoFromSymbolOrNone(ITypeSymbol type)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 29501, 29764);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29599, 29714) || true) && (f_10919_29603_29613_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(type, 10919, 29603, 29613)?.Kind) != SymbolKind.ErrorType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 29599, 29714);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29671, 29699);

                    return f_10919_29678_29698(type);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 29599, 29714);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 29730, 29753);

                return SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 29501, 29764);

                Microsoft.CodeAnalysis.SymbolKind?
                f_10919_29603_29613_M(Microsoft.CodeAnalysis.SymbolKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 29603, 29613);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_29678_29698(Microsoft.CodeAnalysis.ITypeSymbol?
                symbol)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo((Microsoft.CodeAnalysis.ISymbol?)symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 29678, 29698);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 29501, 29764);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 29501, 29764);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private (ITypeSymbol Type, CodeAnalysis.NullableAnnotation Annotation) TypeFromVariable(SingleVariableDesignationSyntax variableDesignation, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 30040, 30640);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 30242, 30315);

                var
                variable = f_10919_30257_30314(this, variableDesignation, cancellationToken)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 30331, 30598);

                switch (variable)
                {

                    case ILocalSymbol local:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 30331, 30598);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 30427, 30473);

                        return (f_10919_30435_30445(local), f_10919_30447_30471(local));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 30331, 30598);

                    case IFieldSymbol field:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 30331, 30598);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 30537, 30583);

                        return (f_10919_30545_30555(field), f_10919_30557_30581(field));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 30331, 30598);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 30614, 30629);

                return default;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 30040, 30640);

                Microsoft.CodeAnalysis.ISymbol
                f_10919_30257_30314(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 30257, 30314);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ITypeSymbol
                f_10919_30435_30445(Microsoft.CodeAnalysis.ILocalSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 30435, 30445);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullableAnnotation
                f_10919_30447_30471(Microsoft.CodeAnalysis.ILocalSymbol
                this_param)
                {
                    var return_v = this_param.NullableAnnotation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 30447, 30471);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ITypeSymbol
                f_10919_30545_30555(Microsoft.CodeAnalysis.IFieldSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 30545, 30555);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullableAnnotation
                f_10919_30557_30581(Microsoft.CodeAnalysis.IFieldSymbol
                this_param)
                {
                    var return_v = this_param.NullableAnnotation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 30557, 30581);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 30040, 30640);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 30040, 30640);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetCollectionInitializerSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 30883, 32489);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 31055, 31083);

                f_10919_31055_31082(this, expression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 31099, 32439) || true) && (f_10919_31103_31120(expression) != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 31103, 31202) && f_10919_31132_31156(f_10919_31132_31149(expression)) == SyntaxKind.CollectionInitializerExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 31099, 32439);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 31301, 31390);

                    InitializerExpressionSyntax
                    initializer = (InitializerExpressionSyntax)f_10919_31372_31389(expression)
                    ;
                    try
                    {
                        while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 31466, 31983) || true) && (f_10919_31473_31491(initializer) != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 31473, 31593) && f_10919_31527_31552(f_10919_31527_31545(initializer)) == SyntaxKind.SimpleAssignmentExpression) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 31473, 31690) && f_10919_31621_31675(((AssignmentExpressionSyntax)f_10919_31650_31668(initializer))) == initializer) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 31473, 31751) && f_10919_31718_31743(f_10919_31718_31736(initializer)) != null) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 31473, 31853) && f_10919_31779_31811(f_10919_31779_31804(f_10919_31779_31797(initializer))) == SyntaxKind.ObjectInitializerExpression))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 31466, 31983);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 31895, 31964);

                            initializer = (InitializerExpressionSyntax)f_10919_31938_31963(f_10919_31938_31956(initializer));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 31466, 31983);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 31466, 31983);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 31466, 31983);
                    }
                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 32005, 32424) || true) && (f_10919_32009_32027(initializer) is BaseObjectCreationExpressionSyntax objectCreation && (DynAbs.Tracing.TraceSender.Expression_True(10919, 32009, 32146) && f_10919_32105_32131(objectCreation) == initializer) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 32009, 32236) && f_10919_32171_32236(objectCreation, allowNamedArgumentName: false)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 32005, 32424);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 32278, 32405);

                        return f_10919_32285_32404(this, f_10919_32355_32372(expression), expression, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 32005, 32424);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 31099, 32439);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 32455, 32478);

                return SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 30883, 32489);

                int
                f_10919_31055_31082(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 31055, 31082);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_31103_31120(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31103, 31120);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31132_31149(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31132, 31149);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_31132_31156(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 31132, 31156);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31372_31389(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31372, 31389);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_31473_31491(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31473, 31491);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31527_31545(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31527, 31545);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_31527_31552(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 31527, 31552);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31650_31668(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31650, 31668);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10919_31621_31675(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31621, 31675);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31718_31736(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31718, 31736);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_31718_31743(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31718, 31743);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31779_31797(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31779, 31797);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31779_31804(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31779, 31804);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_31779_31811(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 31779, 31811);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31938_31956(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31938, 31956);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_31938_31963(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 31938, 31963);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_32009_32027(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 32009, 32027);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax?
                f_10919_32105_32131(Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 32105, 32131);
                    return return_v;
                }


                bool
                f_10919_32171_32236(Microsoft.CodeAnalysis.CSharp.Syntax.BaseObjectCreationExpressionSyntax
                node, bool
                allowNamedArgumentName)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, allowNamedArgumentName: allowNamedArgumentName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 32171, 32236);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_32355_32372(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 32355, 32372);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_32285_32404(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                collectionInitializer, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetCollectionInitializerSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)collectionInitializer, node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 32285, 32404);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 30883, 32489);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 30883, 32489);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSymbolInfo(ConstructorInitializerSyntax constructorInitializer, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 32843, 33286);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 33018, 33058);

                f_10919_33018_33057(this, constructorInitializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 33074, 33275);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 33081, 33123) || ((f_10919_33081_33123(constructorInitializer) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 33143, 33239)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 33259, 33274))) ? f_10919_33143_33239(this, constructorInitializer, SymbolInfoOptions.DefaultOptions, cancellationToken) : SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 32843, 33286);

                int
                f_10919_33018_33057(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33018, 33057);
                    return 0;
                }


                bool
                f_10919_33081_33123(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33081, 33123);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_33143_33239(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33143, 33239);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 32843, 33286);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 32843, 33286);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSymbolInfo(PrimaryConstructorBaseTypeSyntax constructorInitializer, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 33640, 34087);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 33819, 33859);

                f_10919_33819_33858(this, constructorInitializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 33875, 34076);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 33882, 33924) || ((f_10919_33882_33924(constructorInitializer) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 33944, 34040)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 34060, 34075))) ? f_10919_33944_34040(this, constructorInitializer, SymbolInfoOptions.DefaultOptions, cancellationToken) : SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 33640, 34087);

                int
                f_10919_33819_33858(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33819, 33858);
                    return 0;
                }


                bool
                f_10919_33882_33924(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33882, 33924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_33944_34040(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 33944, 34040);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 33640, 34087);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 33640, 34087);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSymbolInfo(AttributeSyntax attributeSyntax, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 34420, 34822);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 34575, 34608);

                f_10919_34575_34607(this, attributeSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 34624, 34811);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 34631, 34666) || ((f_10919_34631_34666(attributeSyntax) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 34686, 34775)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 34795, 34810))) ? f_10919_34686_34775(this, attributeSyntax, SymbolInfoOptions.DefaultOptions, cancellationToken) : SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 34420, 34822);

                int
                f_10919_34575_34607(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 34575, 34607);
                    return 0;
                }


                bool
                f_10919_34631_34666(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 34631, 34666);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_34686_34775(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 34686, 34775);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 34420, 34822);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 34420, 34822);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSymbolInfo(CrefSyntax crefSyntax, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 34970, 35347);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 35115, 35143);

                f_10919_35115_35142(this, crefSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 35159, 35336);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 35166, 35196) || ((f_10919_35166_35196(crefSyntax) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 35216, 35300)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 35320, 35335))) ? f_10919_35216_35300(this, crefSyntax, SymbolInfoOptions.DefaultOptions, cancellationToken) : SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 34970, 35347);

                int
                f_10919_35115_35142(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 35115, 35142);
                    return 0;
                }


                bool
                f_10919_35166_35196(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 35166, 35196);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_35216_35300(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 35216, 35300);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 34970, 35347);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 34970, 35347);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSpeculativeSymbolInfo(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 36920, 37903);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37070, 37151) || true) && (!f_10919_37075_37126(expression, isSpeculative: true))
                )
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 37070, 37151);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37128, 37151);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 37070, 37151);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37167, 37181);

                Binder
                binder
                = default(Binder);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37195, 37230);

                ImmutableArray<Symbol>
                crefSymbols
                = default(ImmutableArray<Symbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37244, 37364);

                BoundNode
                boundNode = f_10919_37266_37363(this, position, expression, bindingOption, out binder, out crefSymbols)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37409, 37466);

                f_10919_37409_37465(boundNode == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 37422, 37464) || crefSymbols.IsDefault));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37480, 37689) || true) && (boundNode == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 37480, 37689);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37535, 37674);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 37542, 37563) || ((crefSymbols.IsDefault && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 37566, 37581)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 37584, 37673))) ? SymbolInfo.None : f_10919_37584_37673(crefSymbols, SymbolInfoOptions.DefaultOptions, hasParameterList: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 37480, 37689);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37705, 37858);

                var
                symbolInfo = f_10919_37722_37857(this, SymbolInfoOptions.DefaultOptions, boundNode, boundNode, boundNodeForSyntacticParent: null, binderOpt: binder)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 37874, 37892);

                return symbolInfo;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 36920, 37903);

                bool
                f_10919_37075_37126(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 37075, 37126);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_37266_37363(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption, out Microsoft.CodeAnalysis.CSharp.Binder
                binder, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                crefSymbols)
                {
                    var return_v = this_param.GetSpeculativelyBoundExpression(position, expression, bindingOption, out binder, out crefSymbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 37266, 37363);
                    return return_v;
                }


                int
                f_10919_37409_37465(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 37409, 37465);
                    return 0;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_37584_37673(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, bool
                hasParameterList)
                {
                    var return_v = GetCrefSymbolInfo(symbols, options, hasParameterList: hasParameterList);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 37584, 37673);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_37722_37857(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, Microsoft.CodeAnalysis.CSharp.BoundNode
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                highestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt)
                {
                    var return_v = this_param.GetSymbolInfoForNode(options, lowestBoundNode, highestBoundNode, boundNodeForSyntacticParent: boundNodeForSyntacticParent, binderOpt: binderOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 37722, 37857);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 36920, 37903);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 36920, 37903);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSpeculativeSymbolInfo(int position, AttributeSyntax attribute)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 39001, 39626);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39109, 39174);

                f_10919_39109_39173(f_10919_39122_39172(attribute, isSpeculative: true));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39190, 39204);

                Binder
                binder
                = default(Binder);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39218, 39304);

                BoundNode
                boundNode = f_10919_39240_39303(this, position, attribute, out binder)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39349, 39412) || true) && (boundNode == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 39349, 39412);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39389, 39412);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 39349, 39412);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39428, 39581);

                var
                symbolInfo = f_10919_39445_39580(this, SymbolInfoOptions.DefaultOptions, boundNode, boundNode, boundNodeForSyntacticParent: null, binderOpt: binder)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 39597, 39615);

                return symbolInfo;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 39001, 39626);

                bool
                f_10919_39122_39172(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 39122, 39172);
                    return return_v;
                }


                int
                f_10919_39109_39173(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 39109, 39173);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAttribute
                f_10919_39240_39303(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute, out Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = this_param.GetSpeculativelyBoundAttribute(position, attribute, out binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 39240, 39303);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_39445_39580(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, Microsoft.CodeAnalysis.CSharp.BoundNode
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                highestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt)
                {
                    var return_v = this_param.GetSymbolInfoForNode(options, lowestBoundNode, highestBoundNode, boundNodeForSyntacticParent: boundNodeForSyntacticParent, binderOpt: binderOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 39445, 39580);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 39001, 39626);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 39001, 39626);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSpeculativeSymbolInfo(int position, ConstructorInitializerSyntax constructorInitializer)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 40807, 43048);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 40941, 41019);

                f_10919_40941_41018(f_10919_40954_41017(constructorInitializer, isSpeculative: true));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 41035, 41079);

                position = f_10919_41046_41078(this, position);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 41095, 41242) || true) && (constructorInitializer == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 41095, 41242);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 41163, 41227);

                    throw f_10919_41169_41226(nameof(constructorInitializer));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 41095, 41242);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 41852, 42001);

                var
                existingConstructorInitializer = f_10919_41889_42000(f_10919_41889_41983(f_10919_41889_41944(f_10919_41889_41918(f_10919_41889_41898(this), position).Parent)))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42017, 42131) || true) && (existingConstructorInitializer == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 42017, 42131);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42093, 42116);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 42017, 42131);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42147, 42228);

                MemberSemanticModel
                memberModel = f_10919_42181_42227(this, existingConstructorInitializer)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42244, 42339) || true) && (memberModel == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 42244, 42339);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42301, 42324);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 42244, 42339);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42355, 42409);

                var
                binder = f_10919_42368_42408(memberModel, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42423, 43037) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 42423, 43037);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42475, 42521);

                    var
                    diagnostics = f_10919_42493_42520()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42539, 42638);

                    binder = f_10919_42548_42637(constructorInitializer, f_10919_42597_42628(binder), binder);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42658, 42762);

                    BoundExpressionStatement
                    bnode = f_10919_42691_42761(binder, constructorInitializer, diagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42780, 42865);

                    var
                    binfo = f_10919_42792_42864(memberModel, binder, bnode)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42883, 42902);

                    f_10919_42883_42901(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42920, 42933);

                    return binfo;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 42423, 43037);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 42423, 43037);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 42999, 43022);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 42423, 43037);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 40807, 43048);

                bool
                f_10919_40954_41017(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 40954, 41017);
                    return return_v;
                }


                int
                f_10919_40941_41018(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 40941, 41018);
                    return 0;
                }


                int
                f_10919_41046_41078(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41046, 41078);
                    return return_v;
                }


                System.ArgumentNullException
                f_10919_41169_41226(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41169, 41226);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_41889_41898(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 41889, 41898);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_41889_41918(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param, int
                position)
                {
                    var return_v = this_param.FindToken(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41889, 41918);
                    return return_v;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                f_10919_41889_41944(Microsoft.CodeAnalysis.SyntaxNode?
                this_param)
                {
                    var return_v = this_param.AncestorsAndSelf();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41889, 41944);
                    return return_v;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax>
                f_10919_41889_41983(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                source)
                {
                    var return_v = source.OfType<Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41889, 41983);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                f_10919_41889_42000(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax>
                source)
                {
                    var return_v = source.FirstOrDefault<Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 41889, 42000);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                f_10919_42181_42227(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node)
                {
                    var return_v = this_param.GetMemberModel((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42181, 42227);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_42368_42408(Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42368, 42408);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_42493_42520()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42493, 42520);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_42597_42628(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 42597, 42628);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                f_10919_42548_42637(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                root, Microsoft.CodeAnalysis.CSharp.Symbol?
                memberSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder((Microsoft.CodeAnalysis.SyntaxNode)root, memberSymbol, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42548, 42637);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10919_42691_42761(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                initializer, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializer, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42691, 42761);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_42792_42864(Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                memberModel, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                bnode)
                {
                    var return_v = GetSymbolInfoFromBoundConstructorInitializer(memberModel, binder, bnode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42792, 42864);
                    return return_v;
                }


                int
                f_10919_42883_42901(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 42883, 42901);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 40807, 43048);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 40807, 43048);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static SymbolInfo GetSymbolInfoFromBoundConstructorInitializer(MemberSemanticModel memberModel, Binder binder, BoundExpressionStatement bnode)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 43060, 43596);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 43235, 43281);

                BoundExpression
                expression = f_10919_43264_43280(bnode)
                ;
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 43297, 43417) || true) && (expression is BoundSequence sequence)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 43297, 43417);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 43374, 43402);

                        expression = f_10919_43387_43401(sequence);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 43297, 43417);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 43297, 43417);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 43297, 43417);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 43433, 43585);

                return f_10919_43440_43584(memberModel, SymbolInfoOptions.DefaultOptions, expression, expression, boundNodeForSyntacticParent: null, binderOpt: binder);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 43060, 43596);

                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_43264_43280(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 43264, 43280);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_43387_43401(Microsoft.CodeAnalysis.CSharp.BoundSequence
                this_param)
                {
                    var return_v = this_param.Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 43387, 43401);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_43440_43584(Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, Microsoft.CodeAnalysis.CSharp.BoundExpression
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundExpression
                highestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt)
                {
                    var return_v = this_param.GetSymbolInfoForNode(options, (Microsoft.CodeAnalysis.CSharp.BoundNode)lowestBoundNode, (Microsoft.CodeAnalysis.CSharp.BoundNode)highestBoundNode, boundNodeForSyntacticParent: boundNodeForSyntacticParent, binderOpt: binderOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 43440, 43584);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 43060, 43596);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 43060, 43596);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSpeculativeSymbolInfo(int position, PrimaryConstructorBaseTypeSyntax constructorInitializer)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 44649, 47124);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 44787, 44865);

                f_10919_44787_44864(f_10919_44800_44863(constructorInitializer, isSpeculative: true));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 44881, 44925);

                position = f_10919_44892_44924(this, position);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 44941, 45088) || true) && (constructorInitializer == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 44941, 45088);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 45009, 45073);

                    throw f_10919_45015_45072(nameof(constructorInitializer));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 44941, 45088);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 45698, 45851);

                var
                existingConstructorInitializer = f_10919_45735_45850(f_10919_45735_45833(f_10919_45735_45790(f_10919_45735_45764(f_10919_45735_45744(this), position).Parent)))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 45867, 45981) || true) && (existingConstructorInitializer == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 45867, 45981);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 45943, 45966);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 45867, 45981);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 45997, 46078);

                MemberSemanticModel
                memberModel = f_10919_46031_46077(this, existingConstructorInitializer)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46094, 46189) || true) && (memberModel == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 46094, 46189);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46151, 46174);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 46094, 46189);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46205, 46268);

                var
                argumentList = f_10919_46224_46267(existingConstructorInitializer)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46282, 46478);

                var
                binder = f_10919_46295_46477(memberModel, (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 46326, 46425) || ((f_10919_46326_46425(position, f_10919_46367_46394(argumentList), f_10919_46396_46424(argumentList)) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 46428, 46436)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 46439, 46476))) ? position : argumentList.OpenParenToken.SpanStart)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46492, 47113) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 46492, 47113);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46544, 46590);

                    var
                    diagnostics = f_10919_46562_46589()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46608, 46707);

                    binder = f_10919_46617_46706(constructorInitializer, f_10919_46666_46697(binder), binder);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46727, 46831);

                    BoundExpressionStatement
                    bnode = f_10919_46760_46830(binder, constructorInitializer, diagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46849, 46941);

                    SymbolInfo
                    binfo = f_10919_46868_46940(memberModel, binder, bnode)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46959, 46978);

                    f_10919_46959_46977(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 46996, 47009);

                    return binfo;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 46492, 47113);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 46492, 47113);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 47075, 47098);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 46492, 47113);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 44649, 47124);

                bool
                f_10919_44800_44863(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 44800, 44863);
                    return return_v;
                }


                int
                f_10919_44787_44864(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 44787, 44864);
                    return 0;
                }


                int
                f_10919_44892_44924(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 44892, 44924);
                    return return_v;
                }


                System.ArgumentNullException
                f_10919_45015_45072(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 45015, 45072);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_45735_45744(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 45735, 45744);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_45735_45764(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param, int
                position)
                {
                    var return_v = this_param.FindToken(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 45735, 45764);
                    return return_v;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                f_10919_45735_45790(Microsoft.CodeAnalysis.SyntaxNode?
                this_param)
                {
                    var return_v = this_param.AncestorsAndSelf();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 45735, 45790);
                    return return_v;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax>
                f_10919_45735_45833(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                source)
                {
                    var return_v = source.OfType<Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 45735, 45833);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                f_10919_45735_45850(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax>
                source)
                {
                    var return_v = source.FirstOrDefault<Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 45735, 45850);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                f_10919_46031_46077(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                node)
                {
                    var return_v = this_param.GetMemberModel((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46031, 46077);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                f_10919_46224_46267(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 46224, 46267);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_46367_46394(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                this_param)
                {
                    var return_v = this_param.OpenParenToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 46367, 46394);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_46396_46424(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                this_param)
                {
                    var return_v = this_param.CloseParenToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 46396, 46424);
                    return return_v;
                }


                bool
                f_10919_46326_46425(int
                position, Microsoft.CodeAnalysis.SyntaxToken
                firstIncluded, Microsoft.CodeAnalysis.SyntaxToken
                firstExcluded)
                {
                    var return_v = LookupPosition.IsBetweenTokens(position, firstIncluded, firstExcluded);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46326, 46425);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_46295_46477(Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46295, 46477);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_46562_46589()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46562, 46589);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_46666_46697(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 46666, 46697);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder
                f_10919_46617_46706(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                root, Microsoft.CodeAnalysis.CSharp.Symbol?
                memberSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                next)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExecutableCodeBinder((Microsoft.CodeAnalysis.SyntaxNode)root, memberSymbol, next);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46617, 46706);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10919_46760_46830(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                initializer, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializer, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46760, 46830);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_46868_46940(Microsoft.CodeAnalysis.CSharp.MemberSemanticModel
                memberModel, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                bnode)
                {
                    var return_v = GetSymbolInfoFromBoundConstructorInitializer(memberModel, binder, bnode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46868, 46940);
                    return return_v;
                }


                int
                f_10919_46959_46977(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 46959, 46977);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 44649, 47124);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 44649, 47124);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public SymbolInfo GetSpeculativeSymbolInfo(int position, CrefSyntax cref, SymbolInfoOptions options = SymbolInfoOptions.DefaultOptions)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 48209, 48593);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 48369, 48429);

                f_10919_48369_48428(f_10919_48382_48427(cref, isSpeculative: true));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 48445, 48489);

                position = f_10919_48456_48488(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 48503, 48582);

                return f_10919_48510_48581(this, position, cref, options, f_10919_48558_48580(cref));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 48209, 48593);

                bool
                f_10919_48382_48427(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 48382, 48427);
                    return return_v;
                }


                int
                f_10919_48369_48428(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 48369, 48428);
                    return 0;
                }


                int
                f_10919_48456_48488(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 48456, 48488);
                    return return_v;
                }


                bool
                f_10919_48558_48580(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax)
                {
                    var return_v = HasParameterList(crefSyntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 48558, 48580);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_48510_48581(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, bool
                hasParameterList)
                {
                    var return_v = this_param.GetCrefSymbolInfo(position, crefSyntax, options, hasParameterList);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 48510, 48581);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 48209, 48593);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 48209, 48593);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public TypeInfo GetTypeInfo(ConstructorInitializerSyntax constructorInitializer, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 48971, 49378);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49142, 49182);

                f_10919_49142_49181(this, constructorInitializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49198, 49367);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 49205, 49247) || ((f_10919_49205_49247(constructorInitializer) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 49267, 49327)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 49347, 49366))) ? f_10919_49267_49327(this, constructorInitializer, cancellationToken) : CSharpTypeInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 48971, 49378);

                int
                f_10919_49142_49181(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 49142, 49181);
                    return 0;
                }


                bool
                f_10919_49205_49247(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 49205, 49247);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_49267_49327(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 49267, 49327);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 48971, 49378);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 48971, 49378);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract TypeInfo GetTypeInfo(SelectOrGroupClauseSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        public TypeInfo GetTypeInfo(PatternSyntax pattern, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 49537, 49884);
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49678, 49765) || true) && (pattern is ParenthesizedPatternSyntax pp)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 49678, 49765);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49744, 49765);

                        pattern = f_10919_49754_49764(pp);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 49678, 49765);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 49678, 49765);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 49678, 49765);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49781, 49806);

                f_10919_49781_49805(this, pattern);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 49820, 49873);

                return f_10919_49827_49872(this, pattern, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 49537, 49884);

                Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax
                f_10919_49754_49764(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedPatternSyntax
                this_param)
                {
                    var return_v = this_param.Pattern;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 49754, 49764);
                    return return_v;
                }


                int
                f_10919_49781_49805(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 49781, 49805);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_49827_49872(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 49827, 49872);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 49537, 49884);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 49537, 49884);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public TypeInfo GetTypeInfo(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 50171, 51993);
                Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax? parent = default(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax?);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50318, 50346);

                f_10919_50318_50345(this, expression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50362, 51910) || true) && (!f_10919_50367_50397(expression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50362, 51910);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50431, 50458);

                    return CSharpTypeInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50362, 51910);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50362, 51910);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50492, 51910) || true) && (f_10919_50496_50587(expression, out parent))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50492, 51910);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50621, 51895);

                        switch (f_10919_50629_50654(f_10919_50629_50647(parent)))
                        {

                            case SyntaxKind.SingleVariableDesignation:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50621, 51895);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50764, 50937);

                                var (declarationType, annotation) = ((ITypeSymbol, CodeAnalysis.NullableAnnotation))f_10919_50848_50936(this, f_10919_50898_50916(parent), cancellationToken);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 50963, 51019);

                                var
                                declarationTypeSymbol = f_10919_50991_51018(declarationType)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51045, 51119);

                                var
                                nullabilityInfo = f_10919_51067_51118(annotation, declarationTypeSymbol)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51145, 51272);

                                return f_10919_51152_51271(declarationTypeSymbol, declarationTypeSymbol, nullabilityInfo, nullabilityInfo, Conversion.Identity);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50621, 51895);

                            case SyntaxKind.DiscardDesignation:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50621, 51895);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51357, 51424);

                                var
                                declarationInfo = f_10919_51379_51423(this, parent, cancellationToken)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51450, 51599);

                                return f_10919_51457_51598(declarationInfo.Type, declarationInfo.Type, declarationInfo.Nullability, declarationInfo.Nullability, Conversion.Identity);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50621, 51895);

                            case SyntaxKind.ParenthesizedVariableDesignation:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 50621, 51895);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51698, 51844) || true) && (f_10919_51702_51732(((TypeSyntax)expression)))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 51698, 51844);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51790, 51817);

                                    return CSharpTypeInfo.None;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 51698, 51844);
                                }
                                DynAbs.Tracing.TraceSender.TraceBreak(10919, 51870, 51876);

                                break;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50621, 51895);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50492, 51910);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 50362, 51910);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 51926, 51982);

                return f_10919_51933_51981(this, expression, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 50171, 51993);

                int
                f_10919_50318_50345(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50318, 50345);
                    return 0;
                }


                bool
                f_10919_50367_50397(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50367, 50397);
                    return return_v;
                }


                bool
                f_10919_50496_50587(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, out Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                parent)
                {
                    var return_v = SyntaxFacts.IsDeclarationExpressionType((Microsoft.CodeAnalysis.SyntaxNode)node, out parent);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50496, 50587);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_50629_50647(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 50629, 50647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_50629_50654(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50629, 50654);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                f_10919_50898_50916(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Designation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 50898, 50916);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.ITypeSymbol Type, Microsoft.CodeAnalysis.NullableAnnotation Annotation)
                f_10919_50848_50936(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax
                variableDesignation, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.TypeFromVariable((Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)variableDesignation, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50848, 50936);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_50991_51018(Microsoft.CodeAnalysis.ITypeSymbol
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 50991, 51018);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_51067_51118(Microsoft.CodeAnalysis.NullableAnnotation
                annotation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = annotation.ToNullabilityInfo(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 51067, 51118);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_51152_51271(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                convertedType, Microsoft.CodeAnalysis.NullabilityInfo
                nullability, Microsoft.CodeAnalysis.NullabilityInfo
                convertedNullability, Microsoft.CodeAnalysis.CSharp.Conversion
                implicitConversion)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo(type, convertedType, nullability, convertedNullability, implicitConversion);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 51152, 51271);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_51379_51423(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 51379, 51423);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_51457_51598(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                convertedType, Microsoft.CodeAnalysis.NullabilityInfo
                nullability, Microsoft.CodeAnalysis.NullabilityInfo
                convertedNullability, Microsoft.CodeAnalysis.CSharp.Conversion
                implicitConversion)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo(type, convertedType, nullability, convertedNullability, implicitConversion);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 51457, 51598);
                    return return_v;
                }


                bool
                f_10919_51702_51732(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                this_param)
                {
                    var return_v = this_param.IsVar;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 51702, 51732);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_51933_51981(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 51933, 51981);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 50171, 51993);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 50171, 51993);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public TypeInfo GetTypeInfo(AttributeSyntax attributeSyntax, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 52284, 52650);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 52435, 52468);

                f_10919_52435_52467(this, attributeSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 52484, 52639);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 52491, 52526) || ((f_10919_52491_52526(attributeSyntax) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 52546, 52599)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 52619, 52638))) ? f_10919_52546_52599(this, attributeSyntax, cancellationToken) : CSharpTypeInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 52284, 52650);

                int
                f_10919_52435_52467(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 52435, 52467);
                    return 0;
                }


                bool
                f_10919_52491_52526(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 52491, 52526);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_52546_52599(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 52546, 52599);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 52284, 52650);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 52284, 52650);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public Conversion GetConversion(SyntaxNode expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 52832, 53274);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 52977, 53019);

                var
                csnode = (CSharpSyntaxNode)expression
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 53035, 53059);

                f_10919_53035_53058(this, csnode);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 53075, 53216);

                var
                info = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 53086, 53112) || ((f_10919_53086_53112(csnode) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 53132, 53176)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 53196, 53215))) ? f_10919_53132_53176(this, csnode, cancellationToken) : CSharpTypeInfo.None
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 53232, 53263);

                return info.ImplicitConversion;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 52832, 53274);

                int
                f_10919_53035_53058(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    this_param.CheckSyntaxNode(syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 53035, 53058);
                    return 0;
                }


                bool
                f_10919_53086_53112(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = CanGetSemanticInfo(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 53086, 53112);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_53132_53176(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoWorker(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 53132, 53176);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 52832, 53274);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 52832, 53274);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public TypeInfo GetSpeculativeTypeInfo(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 54642, 54872);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 54788, 54861);

                return f_10919_54795_54860(this, position, expression, bindingOption);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 54642, 54872);

                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_54795_54860(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeTypeInfoWorker(position, expression, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 54795, 54860);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 54642, 54872);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 54642, 54872);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal CSharpTypeInfo GetSpeculativeTypeInfoWorker(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 54884, 55852);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55044, 55176) || true) && (!f_10919_55049_55100(expression, isSpeculative: true))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 55044, 55176);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55134, 55161);

                    return CSharpTypeInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 55044, 55176);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55192, 55227);

                ImmutableArray<Symbol>
                crefSymbols
                = default(ImmutableArray<Symbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55241, 55356);

                BoundNode
                boundNode = f_10919_55263_55355(this, position, expression, bindingOption, out _, out crefSymbols)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55401, 55458);

                f_10919_55401_55457(boundNode == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 55414, 55456) || crefSymbols.IsDefault));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55472, 55702) || true) && (boundNode == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 55472, 55702);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55527, 55687);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 55534, 55583) || ((f_10919_55534_55556_M(!crefSymbols.IsDefault) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 55534, 55583) && crefSymbols.Length == 1
                    ) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 55607, 55643)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 55667, 55686))) ? f_10919_55607_55643(crefSymbols[0]) : CSharpTypeInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 55472, 55702);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55718, 55809);

                var
                typeInfo = f_10919_55733_55808(this, boundNode, boundNode, boundNodeForSyntacticParent: null)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 55825, 55841);

                return typeInfo;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 54884, 55852);

                bool
                f_10919_55049_55100(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, bool
                isSpeculative)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, isSpeculative: isSpeculative);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 55049, 55100);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_55263_55355(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption, out Microsoft.CodeAnalysis.CSharp.Binder
                binder, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                crefSymbols)
                {
                    var return_v = this_param.GetSpeculativelyBoundExpression(position, expression, bindingOption, out binder, out crefSymbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 55263, 55355);
                    return return_v;
                }


                int
                f_10919_55401_55457(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 55401, 55457);
                    return 0;
                }


                bool
                f_10919_55534_55556_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 55534, 55556);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_55607_55643(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = GetTypeInfoForSymbol(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 55607, 55643);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_55733_55808(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundNode
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                highestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent)
                {
                    var return_v = this_param.GetTypeInfoForNode(lowestBoundNode, highestBoundNode, boundNodeForSyntacticParent: boundNodeForSyntacticParent);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 55733, 55808);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 54884, 55852);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 54884, 55852);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public Conversion GetSpeculativeConversion(int position, ExpressionSyntax expression, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 56034, 56322);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 56184, 56266);

                var
                info = f_10919_56195_56265(this, position, expression, bindingOption)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 56280, 56311);

                return info.ImplicitConversion;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 56034, 56322);

                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_56195_56265(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeTypeInfoWorker(position, expression, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 56195, 56265);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 56034, 56322);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 56034, 56322);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<ISymbol> GetMemberGroup(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 56703, 57139);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 56868, 56896);

                f_10919_56868_56895(this, expression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 56912, 57128);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 56919, 56949) || ((f_10919_56919_56949(expression) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 56969, 57078)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 57098, 57127))) ? f_10919_56969_57059(this, expression, SymbolInfoOptions.DefaultOptions, cancellationToken).GetPublicSymbols() : ImmutableArray<ISymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 56703, 57139);

                int
                f_10919_56868_56895(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 56868, 56895);
                    return 0;
                }


                bool
                f_10919_56919_56949(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 56919, 56949);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_56969_57059(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroupWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 56969, 57059);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 56703, 57139);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 56703, 57139);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<ISymbol> GetMemberGroup(AttributeSyntax attribute, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 57451, 57882);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 57614, 57641);

                f_10919_57614_57640(this, attribute);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 57657, 57871);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 57664, 57693) || ((f_10919_57664_57693(attribute) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 57713, 57821)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 57841, 57870))) ? f_10919_57713_57802(this, attribute, SymbolInfoOptions.DefaultOptions, cancellationToken).GetPublicSymbols() : ImmutableArray<ISymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 57451, 57882);

                int
                f_10919_57614_57640(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 57614, 57640);
                    return 0;
                }


                bool
                f_10919_57664_57693(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 57664, 57693);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_57713_57802(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroupWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 57713, 57802);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 57451, 57882);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 57451, 57882);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<ISymbol> GetMemberGroup(ConstructorInitializerSyntax initializer, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 58176, 58628);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 58354, 58383);

                f_10919_58354_58382(this, initializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 58399, 58617);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 58406, 58437) || ((f_10919_58406_58437(initializer) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 58457, 58567)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 58587, 58616))) ? f_10919_58457_58548(this, initializer, SymbolInfoOptions.DefaultOptions, cancellationToken).GetPublicSymbols() : ImmutableArray<ISymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 58176, 58628);

                int
                f_10919_58354_58382(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 58354, 58382);
                    return 0;
                }


                bool
                f_10919_58406_58437(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 58406, 58437);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_58457_58548(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroupWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 58457, 58548);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 58176, 58628);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 58176, 58628);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<IPropertySymbol> GetIndexerGroup(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 59410, 59845);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 59584, 59612);

                f_10919_59584_59611(this, expression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 59628, 59834);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 59635, 59665) || ((f_10919_59635_59665(expression) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 59685, 59776)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 59796, 59833))) ? f_10919_59685_59776(this, expression, SymbolInfoOptions.DefaultOptions, cancellationToken) : ImmutableArray<IPropertySymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 59410, 59845);

                int
                f_10919_59584_59611(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 59584, 59611);
                    return 0;
                }


                bool
                f_10919_59635_59665(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 59635, 59665);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IPropertySymbol>
                f_10919_59685_59776(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetIndexerGroupWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 59685, 59776);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 59410, 59845);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 59410, 59845);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public Optional<object> GetConstantValue(ExpressionSyntax expression, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 59931, 60307);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 60091, 60119);

                f_10919_60091_60118(this, expression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 60135, 60296);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 60142, 60172) || ((f_10919_60142_60172(expression) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 60192, 60250)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 60270, 60295))) ? f_10919_60192_60250(this, expression, cancellationToken) : default(Optional<object>);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 59931, 60307);

                int
                f_10919_60091_60118(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 60091, 60118);
                    return 0;
                }


                bool
                f_10919_60142_60172(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 60142, 60172);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Optional<object>
                f_10919_60192_60250(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetConstantValueWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 60192, 60250);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 59931, 60307);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 59931, 60307);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract QueryClauseInfo GetQueryClauseInfo(QueryClauseSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        public IAliasSymbol GetAliasInfo(IdentifierNameSyntax nameSyntax, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 60832, 61323);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 60988, 61016);

                f_10919_60988_61015(this, nameSyntax);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 61032, 61098) || true) && (!f_10919_61037_61067(nameSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 61032, 61098);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 61086, 61098);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 61032, 61098);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 61114, 61263);

                SymbolInfo
                info = f_10919_61132_61262(this, nameSyntax, SymbolInfoOptions.PreferTypeToConstructors | SymbolInfoOptions.PreserveAliases, cancellationToken)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 61277, 61312);

                return info.Symbol as IAliasSymbol;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 60832, 61323);

                int
                f_10919_60988_61015(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 60988, 61015);
                    return 0;
                }


                bool
                f_10919_61037_61067(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                node)
                {
                    var return_v = CanGetSemanticInfo((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 61037, 61067);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_61132_61262(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 61132, 61262);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 60832, 61323);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 60832, 61323);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public IAliasSymbol GetSpeculativeAliasInfo(int position, IdentifierNameSyntax nameSyntax, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 62529, 63525);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 62684, 62698);

                Binder
                binder
                = default(Binder);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 62712, 62747);

                ImmutableArray<Symbol>
                crefSymbols
                = default(ImmutableArray<Symbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 62761, 62881);

                BoundNode
                boundNode = f_10919_62783_62880(this, position, nameSyntax, bindingOption, out binder, out crefSymbols)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 62926, 62983);

                f_10919_62926_62982(boundNode == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 62939, 62981) || crefSymbols.IsDefault));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 62997, 63225) || true) && (boundNode == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 62997, 63225);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63052, 63210);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 63059, 63108) || ((f_10919_63059_63081_M(!crefSymbols.IsDefault) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 63059, 63108) && crefSymbols.Length == 1
                    ) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 63132, 63181)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 63205, 63209))) ? f_10919_63132_63181((crefSymbols[0] as AliasSymbol)) : null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 62997, 63225);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63241, 63457);

                var
                symbolInfo = f_10919_63258_63456(this, SymbolInfoOptions.PreferTypeToConstructors | SymbolInfoOptions.PreserveAliases, boundNode, boundNode, boundNodeForSyntacticParent: null, binderOpt: binder)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63473, 63514);

                return symbolInfo.Symbol as IAliasSymbol;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 62529, 63525);

                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_62783_62880(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption, out Microsoft.CodeAnalysis.CSharp.Binder
                binder, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                crefSymbols)
                {
                    var return_v = this_param.GetSpeculativelyBoundExpression(position, (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)expression, bindingOption, out binder, out crefSymbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 62783, 62880);
                    return return_v;
                }


                int
                f_10919_62926_62982(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 62926, 62982);
                    return 0;
                }


                bool
                f_10919_63059_63081_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 63059, 63081);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IAliasSymbol?
                f_10919_63132_63181(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 63132, 63181);
                    return (IAliasSymbol?)return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_63258_63456(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, Microsoft.CodeAnalysis.CSharp.BoundNode
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                highestBoundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt)
                {
                    var return_v = this_param.GetSymbolInfoForNode(options, lowestBoundNode, highestBoundNode, boundNodeForSyntacticParent: boundNodeForSyntacticParent, binderOpt: binderOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 63258, 63456);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 62529, 63525);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 62529, 63525);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal Binder GetEnclosingBinder(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 63641, 63881);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63714, 63767);

                Binder
                result = f_10919_63730_63766(this, position)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63781, 63842);

                f_10919_63781_63841(result == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 63794, 63840) || f_10919_63812_63840(result)));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 63856, 63870);

                return result;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 63641, 63881);

                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_63730_63766(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinderInternal(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 63730, 63766);
                    return return_v;
                }


                bool
                f_10919_63812_63840(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsSemanticModelBinder;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 63812, 63840);
                    return return_v;
                }


                int
                f_10919_63781_63841(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 63781, 63841);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 63641, 63881);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 63641, 63881);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract Binder GetEnclosingBinderInternal(int position);

        internal abstract MemberSemanticModel GetMemberModel(SyntaxNode node);

        internal bool IsInTree(SyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 64166, 64283);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64230, 64272);

                return f_10919_64237_64252(node) == f_10919_64256_64271(this);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 64166, 64283);

                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_64237_64252(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 64237, 64252);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_64256_64271(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 64256, 64271);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 64166, 64283);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 64166, 64283);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsInStructuredTriviaOtherThanCrefOrNameAttribute(CSharpSyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 64295, 64931);
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64411, 64893) || true) && (node != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 64411, 64893);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64464, 64878) || true) && (f_10919_64468_64479(node) == SyntaxKind.XmlCrefAttribute || (DynAbs.Tracing.TraceSender.Expression_False(10919, 64468, 64556) || f_10919_64514_64525(node) == SyntaxKind.XmlNameAttribute))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 64464, 64878);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64598, 64611);

                            return false;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 64464, 64878);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 64464, 64878);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64653, 64878) || true) && (f_10919_64657_64680(node))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 64653, 64878);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64722, 64734);

                                return true;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 64653, 64878);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 64653, 64878);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64816, 64859);

                                node = f_10919_64823_64858(node);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 64653, 64878);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 64464, 64878);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 64411, 64893);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 64411, 64893);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 64411, 64893);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 64907, 64920);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 64295, 64931);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_64468_64479(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 64468, 64479);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_64514_64525(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 64514, 64525);
                    return return_v;
                }


                bool
                f_10919_64657_64680(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.IsStructuredTrivia;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 64657, 64680);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_64823_64858(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.ParentOrStructuredTriviaParent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 64823, 64858);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 64295, 64931);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 64295, 64931);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected int CheckAndAdjustPosition(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 65513, 65684);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65588, 65607);

                SyntaxToken
                unused
                = default(SyntaxToken);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65621, 65673);

                return f_10919_65628_65672(this, position, out unused);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 65513, 65684);

                int
                f_10919_65628_65672(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, out Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position, out token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 65628, 65672);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 65513, 65684);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 65513, 65684);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected int CheckAndAdjustPosition(int position, out SyntaxToken token)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 65696, 67482);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65794, 65829);

                int
                fullStart = f_10919_65810_65828(f_10919_65810_65819(this))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65843, 65880);

                int
                fullEnd = f_10919_65857_65866(this).FullSpan.End
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65894, 65981);

                bool
                atEOF = position == fullEnd && (DynAbs.Tracing.TraceSender.Expression_True(10919, 65907, 65980) && position == f_10919_65942_65967(f_10919_65942_65957(this)).FullSpan.End)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 65997, 67299) || true) && ((fullStart <= position && (DynAbs.Tracing.TraceSender.Expression_True(10919, 66002, 66045) && position < fullEnd)) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 66001, 66055) || atEOF))
                ) // allow for EOF

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 65997, 67299);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 66106, 66225);

                    token = f_10919_66114_66224(((DynAbs.Tracing.TraceSender.Conditional_F1(10919, 66115, 66120) || ((atEOF && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 66123, 66166)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 66169, 66173))) ? (CSharpSyntaxNode)f_10919_66141_66166(f_10919_66141_66156(this)) : f_10919_66169_66173()), position);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 66245, 66500) || true) && (position < token.SpanStart)
                    ) // NB: Span, not FullSpan

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 66245, 66500);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 66448, 66481);

                        token = token.GetPreviousToken();
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 66245, 66500);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 66956, 67000);

                    return f_10919_66963_66999(token.SpanStart, fullStart);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 65997, 67299);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 65997, 67299);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67034, 67299) || true) && (fullStart == fullEnd && (DynAbs.Tracing.TraceSender.Expression_True(10919, 67038, 67081) && position == fullEnd))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 67034, 67299);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67220, 67249);

                        token = default(SyntaxToken);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67267, 67284);

                        return fullStart;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 67034, 67299);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 65997, 67299);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67315, 67471);

                throw f_10919_67321_67470(nameof(position), position, f_10919_67398_67469(f_10919_67412_67453(), f_10919_67455_67468(f_10919_67455_67459())));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 65696, 67482);

                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_65810_65819(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 65810, 65819);
                    return return_v;
                }


                int
                f_10919_65810_65828(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Position;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 65810, 65828);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_65857_65866(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 65857, 65866);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_65942_65957(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 65942, 65957);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxNode
                f_10919_65942_65967(Microsoft.CodeAnalysis.SyntaxTree
                this_param)
                {
                    var return_v = this_param.GetRoot();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 65942, 65967);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_66141_66156(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 66141, 66156);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxNode
                f_10919_66141_66166(Microsoft.CodeAnalysis.SyntaxTree
                this_param)
                {
                    var return_v = this_param.GetRoot();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 66141, 66166);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_66169_66173()
                {
                    var return_v = Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 66169, 66173);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_66114_66224(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param, int
                position)
                {
                    var return_v = this_param.FindTokenIncludingCrefAndNameAttributes(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 66114, 66224);
                    return return_v;
                }


                int
                f_10919_66963_66999(int
                val1, int
                val2)
                {
                    var return_v = Math.Max(val1, val2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 66963, 66999);
                    return return_v;
                }


                string
                f_10919_67412_67453()
                {
                    var return_v = CSharpResources.PositionIsNotWithinSyntax;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67412, 67453);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_67455_67459()
                {
                    var return_v = Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67455, 67459);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Text.TextSpan
                f_10919_67455_67468(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.FullSpan;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67455, 67468);
                    return return_v;
                }


                string
                f_10919_67398_67469(string
                format, Microsoft.CodeAnalysis.Text.TextSpan
                arg0)
                {
                    var return_v = string.Format(format, (object)arg0);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 67398, 67469);
                    return return_v;
                }


                System.ArgumentOutOfRangeException
                f_10919_67321_67470(string
                paramName, int
                actualValue, string
                message)
                {
                    var return_v = new System.ArgumentOutOfRangeException(paramName, (object)actualValue, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 67321, 67470);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 65696, 67482);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 65696, 67482);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected int GetAdjustedNodePosition(SyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 67718, 69379);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67797, 67826);

                f_10919_67797_67825(f_10919_67810_67824(this, node));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67842, 67876);

                var
                fullSpan = f_10919_67857_67875(f_10919_67857_67866(this))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 67890, 67920);

                var
                position = f_10919_67905_67919(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68035, 68104);

                SyntaxToken
                firstToken = f_10919_68060_68103(node, includeZeroWidth: false)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68118, 68377) || true) && (firstToken.Node is object)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68118, 68377);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68181, 68223);

                    int
                    betterPosition = firstToken.SpanStart
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68241, 68362) || true) && (betterPosition < node.Span.End)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68241, 68362);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68317, 68343);

                        position = betterPosition;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68241, 68362);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68118, 68377);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68393, 69368) || true) && (fullSpan.IsEmpty)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68393, 69368);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68447, 68488);

                    f_10919_68447_68487(position == fullSpan.Start);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68691, 68707);

                    return position;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68393, 69368);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68393, 69368);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68741, 69368) || true) && (position == fullSpan.End)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68741, 69368);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68803, 68833);

                        f_10919_68803_68832(f_10919_68816_68826(node) == 0);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 68981, 69025);

                        return f_10919_68988_69024(this, position - 1);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68741, 69368);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 68741, 69368);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69059, 69368) || true) && (f_10919_69063_69077(node) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 69063, 69095) || f_10919_69081_69095(node)) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 69063, 69114) || f_10919_69099_69109(node) == 0) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 69063, 69149) || f_10919_69118_69149(node)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 69059, 69368);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69183, 69223);

                            return f_10919_69190_69222(this, position);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 69059, 69368);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 69059, 69368);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69337, 69353);

                            return position;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 69059, 69368);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68741, 69368);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 68393, 69368);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 67718, 69379);

                bool
                f_10919_67810_67824(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.IsInTree(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 67810, 67824);
                    return return_v;
                }


                int
                f_10919_67797_67825(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 67797, 67825);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_67857_67866(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67857, 67866);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Text.TextSpan
                f_10919_67857_67875(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.FullSpan;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67857, 67875);
                    return return_v;
                }


                int
                f_10919_67905_67919(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.SpanStart;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 67905, 67919);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_68060_68103(Microsoft.CodeAnalysis.SyntaxNode
                this_param, bool
                includeZeroWidth)
                {
                    var return_v = this_param.GetFirstToken(includeZeroWidth: includeZeroWidth);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 68060, 68103);
                    return return_v;
                }


                int
                f_10919_68447_68487(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 68447, 68487);
                    return 0;
                }


                int
                f_10919_68816_68826(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Width;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 68816, 68826);
                    return return_v;
                }


                int
                f_10919_68803_68832(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 68803, 68832);
                    return 0;
                }


                int
                f_10919_68988_69024(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 68988, 69024);
                    return return_v;
                }


                bool
                f_10919_69063_69077(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.IsMissing;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 69063, 69077);
                    return return_v;
                }


                bool
                f_10919_69081_69095(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.HasErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 69081, 69095);
                    return return_v;
                }


                int
                f_10919_69099_69109(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Width;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 69099, 69109);
                    return return_v;
                }


                bool
                f_10919_69118_69149(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.IsPartOfStructuredTrivia();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69118, 69149);
                    return return_v;
                }


                int
                f_10919_69190_69222(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69190, 69222);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 67718, 69379);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 67718, 69379);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        [Conditional("DEBUG")]
        protected void AssertPositionAdjusted(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 69391, 69599);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69499, 69588);

                f_10919_69499_69587(position == f_10919_69524_69556(this, position), "Expected adjusted position");
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 69391, 69599);

                int
                f_10919_69524_69556(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69524, 69556);
                    return return_v;
                }


                int
                f_10919_69499_69587(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69499, 69587);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 69391, 69599);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 69391, 69599);
            }
        }

        protected void CheckSyntaxNode(CSharpSyntaxNode syntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 69611, 69974);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69691, 69806) || true) && (syntax == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 69691, 69806);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69743, 69791);

                    throw f_10919_69749_69790(nameof(syntax));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 69691, 69806);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69822, 69963) || true) && (!f_10919_69827_69843(this, syntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 69822, 69963);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 69877, 69948);

                    throw f_10919_69883_69947(f_10919_69905_69946());
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 69822, 69963);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 69611, 69974);

                System.ArgumentNullException
                f_10919_69749_69790(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69749, 69790);
                    return return_v;
                }


                bool
                f_10919_69827_69843(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.IsInTree((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69827, 69843);
                    return return_v;
                }


                string
                f_10919_69905_69946()
                {
                    var return_v = CSharpResources.SyntaxNodeIsNotWithinSynt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 69905, 69946);
                    return return_v;
                }


                System.ArgumentException
                f_10919_69883_69947(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 69883, 69947);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 69611, 69974);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 69611, 69974);
            }
        }

        private void CheckModelAndSyntaxNodeToSpeculate(CSharpSyntaxNode syntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 70132, 70768);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70229, 70344) || true) && (syntax == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 70229, 70344);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70281, 70329);

                    throw f_10919_70287_70328(nameof(syntax));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 70229, 70344);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70360, 70536) || true) && (f_10919_70364_70395(this))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 70360, 70536);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70429, 70521);

                    throw f_10919_70435_70520(f_10919_70465_70519());
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 70360, 70536);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70552, 70757) || true) && (f_10919_70556_70610(f_10919_70556_70572(this), f_10919_70592_70609(syntax)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 70552, 70757);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 70644, 70742);

                    throw f_10919_70650_70741(f_10919_70672_70740());
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 70552, 70757);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 70132, 70768);

                System.ArgumentNullException
                f_10919_70287_70328(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 70287, 70328);
                    return return_v;
                }


                bool
                f_10919_70364_70395(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.IsSpeculativeSemanticModel;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 70364, 70395);
                    return return_v;
                }


                string
                f_10919_70465_70519()
                {
                    var return_v = CSharpResources.ChainingSpeculativeModelIsNotSupported;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 70465, 70519);
                    return return_v;
                }


                System.InvalidOperationException
                f_10919_70435_70520(string
                message)
                {
                    var return_v = new System.InvalidOperationException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 70435, 70520);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_70556_70572(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 70556, 70572);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_70592_70609(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 70592, 70609);
                    return return_v;
                }


                bool
                f_10919_70556_70610(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param, Microsoft.CodeAnalysis.SyntaxTree
                syntaxTree)
                {
                    var return_v = this_param.ContainsSyntaxTree(syntaxTree);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 70556, 70610);
                    return return_v;
                }


                string
                f_10919_70672_70740()
                {
                    var return_v = CSharpResources.SpeculatedSyntaxNodeCannotBelongToCurrentCompilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 70672, 70740);
                    return return_v;
                }


                System.ArgumentException
                f_10919_70650_70741(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 70650, 70741);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 70132, 70768);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 70132, 70768);
            }
        }

        public ImmutableArray<ISymbol> LookupSymbols(
                    int position,
                    NamespaceOrTypeSymbol container = null,
                    string name = null,
                    bool includeReducedExtensionMethods = false)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 72263, 72741);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 72504, 72613);

                var
                options = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 72518, 72548) || ((includeReducedExtensionMethods && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 72551, 72588)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 72591, 72612))) ? LookupOptions.IncludeExtensionMethods : LookupOptions.Default
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 72627, 72730);

                return f_10919_72634_72729(this, position, container, name, options, useBaseReferenceAccessibility: false);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 72263, 72741);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_72634_72729(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                container, string?
                name, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                useBaseReferenceAccessibility)
                {
                    var return_v = this_param.LookupSymbolsInternal(position, container, name, options, useBaseReferenceAccessibility: useBaseReferenceAccessibility);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 72634, 72729);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 72263, 72741);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 72263, 72741);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public new ImmutableArray<ISymbol> LookupBaseMembers(
                    int position,
                    string name = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 74504, 74790);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 74642, 74779);

                return f_10919_74649_74778(this, position, container: null, name: name, options: LookupOptions.Default, useBaseReferenceAccessibility: true);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 74504, 74790);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_74649_74778(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, string?
                name, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                useBaseReferenceAccessibility)
                {
                    var return_v = this_param.LookupSymbolsInternal(position, container: container, name: name, options: options, useBaseReferenceAccessibility: useBaseReferenceAccessibility);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 74649, 74778);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 74504, 74790);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 74504, 74790);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<ISymbol> LookupStaticMembers(
                    int position,
                    NamespaceOrTypeSymbol container = null,
                    string name = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 76062, 76389);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 76251, 76378);

                return f_10919_76258_76377(this, position, container, name, LookupOptions.MustNotBeInstance, useBaseReferenceAccessibility: false);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 76062, 76389);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_76258_76377(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                container, string?
                name, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                useBaseReferenceAccessibility)
                {
                    var return_v = this_param.LookupSymbolsInternal(position, container, name, options, useBaseReferenceAccessibility: useBaseReferenceAccessibility);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 76258, 76377);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 76062, 76389);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 76062, 76389);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ImmutableArray<ISymbol> LookupNamespacesAndTypes(
                    int position,
                    NamespaceOrTypeSymbol container = null,
                    string name = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 77660, 77996);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 77854, 77985);

                return f_10919_77861_77984(this, position, container, name, LookupOptions.NamespacesOrTypesOnly, useBaseReferenceAccessibility: false);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 77660, 77996);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_77861_77984(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                container, string?
                name, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                useBaseReferenceAccessibility)
                {
                    var return_v = this_param.LookupSymbolsInternal(position, container, name, options, useBaseReferenceAccessibility: useBaseReferenceAccessibility);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 77861, 77984);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 77660, 77996);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 77660, 77996);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public new ImmutableArray<ISymbol> LookupLabels(
                    int position,
                    string name = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 78984, 79269);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 79117, 79258);

                return f_10919_79124_79257(this, position, container: null, name: name, options: LookupOptions.LabelsOnly, useBaseReferenceAccessibility: false);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 78984, 79269);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_79124_79257(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, string?
                name, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                useBaseReferenceAccessibility)
                {
                    var return_v = this_param.LookupSymbolsInternal(position, container: container, name: name, options: options, useBaseReferenceAccessibility: useBaseReferenceAccessibility);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 79124, 79257);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 78984, 79269);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 78984, 79269);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ImmutableArray<ISymbol> LookupSymbolsInternal(
                    int position,
                    NamespaceOrTypeSymbol container,
                    string name,
                    LookupOptions options,
                    bool useBaseReferenceAccessibility)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 80744, 86141);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81007, 81134);

                f_10919_81007_81133((options & LookupOptions.UseBaseReferenceAccessibility) == 0, "Use the useBaseReferenceAccessibility parameter.");

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81148, 81285) || true) && (useBaseReferenceAccessibility)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 81148, 81285);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81215, 81270);

                    options |= LookupOptions.UseBaseReferenceAccessibility;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 81148, 81285);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81299, 81346);

                f_10919_81299_81345(!f_10919_81313_81344(options));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81387, 81412);

                f_10919_81387_81411(
                            options);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81428, 81446);

                SyntaxToken
                token
                = default(SyntaxToken);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81460, 81515);

                position = f_10919_81471_81514(this, position, out token);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81531, 81701) || true) && ((object)container == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 81535, 81602) || f_10919_81564_81578(container) == SymbolKind.Namespace))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 81531, 81701);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81636, 81686);

                    options &= ~LookupOptions.IncludeExtensionMethods;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 81531, 81701);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81717, 81759);

                var
                binder = f_10919_81730_81758(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81773, 81877) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 81773, 81877);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81825, 81862);

                    return ImmutableArray<ISymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 81773, 81877);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81893, 82888) || true) && (useBaseReferenceAccessibility)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 81893, 82888);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 81960, 82000);

                    f_10919_81960_81999((object)container == null);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82018, 82068);

                    TypeSymbol
                    containingType = f_10919_82046_82067(binder)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82086, 82113);

                    TypeSymbol
                    baseType = null
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82223, 82453) || true) && ((object)containingType != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 82227, 82304) && f_10919_82261_82280(containingType) == SymbolKind.NamedType) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 82227, 82355) && f_10919_82308_82355(((NamedTypeSymbol)containingType))))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 82223, 82453);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82397, 82434);

                        return ImmutableArray<ISymbol>.Empty;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 82223, 82453);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82473, 82834) || true) && ((object)containingType == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 82477, 82583) || (object)(baseType = f_10919_82531_82574(containingType)) == null))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 82473, 82834);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82625, 82815);

                        throw f_10919_82631_82814("Not a valid position for a call to LookupBaseMembers (must be in a type with a base type)", nameof(position));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 82473, 82834);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82852, 82873);

                    container = baseType;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 81893, 82888);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 82904, 83703) || true) && (f_10919_82908_82930_M(!binder.IsInMethodBody) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 82908, 83069) && (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly | LookupOptions.LabelsOnly)) == 0))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 82904, 83703);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83385, 83435);

                    var
                    parentExpr = token.Parent as ExpressionSyntax
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83453, 83688) || true) && (parentExpr != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 83457, 83525) && !(f_10919_83481_83498(parentExpr) is XmlNameAttributeSyntax)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 83457, 83573) && !f_10919_83530_83573(parentExpr)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 83453, 83688);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83615, 83669);

                        options |= LookupOptions.MustNotBeMethodTypeParameter;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 83453, 83688);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 82904, 83703);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83719, 83762);

                var
                info = f_10919_83730_83761()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83776, 83799);

                info.FilterName = name;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83815, 84070) || true) && ((object)container == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 83815, 84070);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83878, 83921);

                    f_10919_83878_83920(binder, info, options);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 83815, 84070);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 83815, 84070);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 83987, 84055);

                    f_10919_83987_84054(binder, info, container, options, binder);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 83815, 84070);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84086, 84146);

                var
                results = f_10919_84100_84145(f_10919_84134_84144(info))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84162, 84808) || true) && (name == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 84162, 84808);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84370, 84546);
                        foreach (string foundName in f_10919_84399_84409_I(f_10919_84399_84409(info)))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 84370, 84546);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84451, 84527);

                            f_10919_84451_84526(this, results, foundName, binder, container, options, info);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 84370, 84546);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 177);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 177);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 84162, 84808);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 84162, 84808);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84722, 84793);

                    f_10919_84722_84792(this, results, name, binder, container, options, info);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 84162, 84808);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84824, 84836);

                f_10919_84824_84835(
                            info);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84854, 85922) || true) && ((options & LookupOptions.IncludeExtensionMethods) != 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 84854, 85922);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 84946, 84992);

                    var
                    lookupResult = f_10919_84965_84991()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85012, 85059);

                    options |= LookupOptions.AllMethodsOnArityZero;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85077, 85118);

                    options &= ~LookupOptions.MustBeInstance;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85138, 85188);

                    HashSet<DiagnosticInfo>
                    useSiteDiagnostics = null
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85206, 85292);

                    f_10919_85206_85291(binder, lookupResult, name, 0, options, ref useSiteDiagnostics);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85312, 85867) || true) && (f_10919_85316_85342(lookupResult))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 85312, 85867);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85384, 85434);

                        TypeSymbol
                        containingType = (TypeSymbol)container
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85456, 85848);
                            foreach (MethodSymbol extensionMethod in f_10919_85497_85517_I(f_10919_85497_85517(lookupResult)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 85456, 85848);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85567, 85648);

                                var
                                reduced = f_10919_85581_85647(extensionMethod, containingType, f_10919_85635_85646())
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85674, 85825) || true) && ((object)reduced != null)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 85674, 85825);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85759, 85798);

                                    f_10919_85759_85797(results, f_10919_85771_85796(reduced));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 85674, 85825);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 85456, 85848);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 393);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 393);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 85312, 85867);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85887, 85907);

                    f_10919_85887_85906(
                                    lookupResult);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 84854, 85922);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 85938, 86007);

                ImmutableArray<ISymbol>
                sealedResults = f_10919_85978_86006(results)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86021, 86130);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 86028, 86040) || ((name == null
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 86060, 86096)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 86116, 86129))) ? f_10919_86060_86096(sealedResults) : sealedResults;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 80744, 86141);

                int
                f_10919_81007_81133(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81007, 81133);
                    return 0;
                }


                bool
                f_10919_81313_81344(Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    var return_v = options.IsAttributeTypeLookup();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81313, 81344);
                    return return_v;
                }


                int
                f_10919_81299_81345(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81299, 81345);
                    return 0;
                }


                int
                f_10919_81387_81411(Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    options.ThrowIfInvalid();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81387, 81411);
                    return 0;
                }


                int
                f_10919_81471_81514(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, out Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position, out token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81471, 81514);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_81564_81578(Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 81564, 81578);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_81730_81758(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81730, 81758);
                    return return_v;
                }


                int
                f_10919_81960_81999(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 81960, 81999);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10919_82046_82067(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 82046, 82067);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_82261_82280(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 82261, 82280);
                    return return_v;
                }


                bool
                f_10919_82308_82355(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.IsScriptClass;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 82308, 82355);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10919_82531_82574(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.BaseTypeNoUseSiteDiagnostics;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 82531, 82574);
                    return return_v;
                }


                System.ArgumentException
                f_10919_82631_82814(string
                message, string
                paramName)
                {
                    var return_v = new System.ArgumentException(message, paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 82631, 82814);
                    return return_v;
                }


                bool
                f_10919_82908_82930_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 82908, 82930);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_83481_83498(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 83481, 83498);
                    return return_v;
                }


                bool
                f_10919_83530_83573(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = SyntaxFacts.IsInTypeOnlyContext(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 83530, 83573);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                f_10919_83730_83761()
                {
                    var return_v = LookupSymbolsInfo.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 83730, 83761);
                    return return_v;
                }


                int
                f_10919_83878_83920(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                result, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    this_param.AddLookupSymbolsInfo(result, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 83878, 83920);
                    return 0;
                }


                int
                f_10919_83987_84054(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                result, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                nsOrType, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    this_param.AddMemberLookupSymbolsInfo(result, nsOrType, options, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 83987, 84054);
                    return 0;
                }


                int
                f_10919_84134_84144(Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 84134, 84144);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                f_10919_84100_84145(int
                capacity)
                {
                    var return_v = ArrayBuilder<ISymbol>.GetInstance(capacity);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84100, 84145);
                    return return_v;
                }


                System.Collections.Generic.ICollection<string>
                f_10919_84399_84409(Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                this_param)
                {
                    var return_v = this_param.Names;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 84399, 84409);
                    return return_v;
                }


                int
                f_10919_84451_84526(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                results, string
                name, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                container, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                info)
                {
                    this_param.AppendSymbolsWithName(results, name, binder, container, options, info);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84451, 84526);
                    return 0;
                }


                System.Collections.Generic.ICollection<string>
                f_10919_84399_84409_I(System.Collections.Generic.ICollection<string>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84399, 84409);
                    return return_v;
                }


                int
                f_10919_84722_84792(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                results, string
                name, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                container, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                info)
                {
                    this_param.AppendSymbolsWithName(results, name, binder, container, options, info);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84722, 84792);
                    return 0;
                }


                int
                f_10919_84824_84835(Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84824, 84835);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResult
                f_10919_84965_84991()
                {
                    var return_v = LookupResult.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 84965, 84991);
                    return return_v;
                }


                int
                f_10919_85206_85291(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupResult
                result, string?
                name, int
                arity, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    this_param.LookupExtensionMethods(result, name, arity, options, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85206, 85291);
                    return 0;
                }


                bool
                f_10919_85316_85342(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.IsMultiViable;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 85316, 85342);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_85497_85517(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 85497, 85517);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_85635_85646()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 85635, 85646);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_85581_85647(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = this_param.ReduceExtensionMethod(receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85581, 85647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IMethodSymbol?
                f_10919_85771_85796(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85771, 85796);
                    return return_v;
                }


                int
                f_10919_85759_85797(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.IMethodSymbol
                item)
                {
                    this_param.Add((Microsoft.CodeAnalysis.ISymbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85759, 85797);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_85497_85517_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85497, 85517);
                    return return_v;
                }


                int
                f_10919_85887_85906(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85887, 85906);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_85978_86006(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 85978, 86006);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_86060_86096(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                sealedResults)
                {
                    var return_v = FilterNotReferencable(sealedResults);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 86060, 86096);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 80744, 86141);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 80744, 86141);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void AppendSymbolsWithName(ArrayBuilder<ISymbol> results, string name, Binder binder, NamespaceOrTypeSymbol container, LookupOptions options, LookupSymbolsInfo info)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 86153, 87717);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86351, 86394);

                LookupSymbolsInfo.IArityEnumerable
                arities
                = default(LookupSymbolsInfo.IArityEnumerable);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86408, 86428);

                Symbol
                uniqueSymbol
                = default(Symbol);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86444, 87706) || true) && (f_10919_86448_86518(info, name, out arities, out uniqueSymbol))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 86444, 87706);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86552, 87691) || true) && ((object)uniqueSymbol != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 86552, 87691);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 86798, 86866);

                        f_10919_86798_86865(                    // This name mapped to something unique.  We don't need to proceed
                                                                // with a costly lookup.  Just add it straight to the results.
                                            results, f_10919_86810_86864(f_10919_86810_86846(this, uniqueSymbol)));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 86552, 87691);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 86552, 87691);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 87114, 87672) || true) && (arities != null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 87114, 87672);
                            try
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 87183, 87382);
                                foreach (var arity in f_10919_87205_87212_I(arities))
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 87183, 87382);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 87270, 87355);

                                    f_10919_87270_87354(this, results, name, arity, binder, container, options);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 87183, 87382);
                                }
                            }
                            catch (System.Exception)
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 200);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 200);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 87114, 87672);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 87114, 87672);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 87568, 87649);

                            f_10919_87568_87648(                        //non-unique symbol with non-zero arity doesn't seem possible.
                                                    this, results, name, 0, binder, container, options);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 87114, 87672);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 86552, 87691);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 86444, 87706);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 86153, 87717);

                bool
                f_10919_86448_86518(Microsoft.CodeAnalysis.CSharp.LookupSymbolsInfo
                this_param, string
                name, out Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo<Microsoft.CodeAnalysis.CSharp.Symbol>.IArityEnumerable
                arities, out Microsoft.CodeAnalysis.CSharp.Symbol
                uniqueSymbol)
                {
                    var return_v = this_param.TryGetAritiesAndUniqueSymbol(name, out arities, out uniqueSymbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 86448, 86518);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_86810_86846(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.RemapSymbolIfNecessary(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 86810, 86846);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_86810_86864(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 86810, 86864);
                    return return_v;
                }


                int
                f_10919_86798_86865(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.ISymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 86798, 86865);
                    return 0;
                }


                int
                f_10919_87270_87354(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                results, string
                name, int
                arity, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    this_param.AppendSymbolsWithNameAndArity(results, name, arity, binder, container, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 87270, 87354);
                    return 0;
                }


                Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo<Microsoft.CodeAnalysis.CSharp.Symbol>.IArityEnumerable
                f_10919_87205_87212_I(Microsoft.CodeAnalysis.AbstractLookupSymbolsInfo<Microsoft.CodeAnalysis.CSharp.Symbol>.IArityEnumerable
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 87205, 87212);
                    return return_v;
                }


                int
                f_10919_87568_87648(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                results, string
                name, int
                arity, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    this_param.AppendSymbolsWithNameAndArity(results, name, arity, binder, container, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 87568, 87648);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 86153, 87717);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 86153, 87717);
            }
        }

        private void AppendSymbolsWithNameAndArity(
                    ArrayBuilder<ISymbol> results,
                    string name,
                    int arity,
                    Binder binder,
                    NamespaceOrTypeSymbol container,
                    LookupOptions options)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 87729, 90218);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88001, 88031);

                f_10919_88001_88030(results != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88177, 88244);

                f_10919_88177_88243((options & LookupOptions.AllMethodsOnArityZero) == 0);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88260, 88306);

                var
                lookupResult = f_10919_88279_88305()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88322, 88372);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88386, 88738);

                f_10919_88386_88737(binder, lookupResult, container, name, arity, basesBeingResolved: null, options: options & ~LookupOptions.IncludeExtensionMethods, diagnose: false, useSiteDiagnostics: ref useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88754, 90171) || true) && (f_10919_88758_88784(lookupResult))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 88754, 90171);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 88818, 90156) || true) && (f_10919_88822_88951(f_10919_88822_88842(lookupResult), t => t.Kind == SymbolKind.NamedType || t.Kind == SymbolKind.Namespace || t.Kind == SymbolKind.ErrorType))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 88818, 90156);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89080, 89094);

                        bool
                        wasError
                        = default(bool);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89116, 89162);

                        var
                        diagnostics = f_10919_89134_89161()
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89237, 89370);

                        Symbol
                        singleSymbol = f_10919_89259_89369(binder, lookupResult, name, arity, f_10919_89306_89315(this), diagnostics, true, out wasError, container, options)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89392, 89411);

                        f_10919_89392_89410(diagnostics);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89435, 89877) || true) && (!wasError)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 89435, 89877);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89498, 89566);

                            f_10919_89498_89565(results, f_10919_89510_89564(f_10919_89510_89546(this, singleSymbol)));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 89435, 89877);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 89435, 89877);
                            try
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89664, 89854);
                                foreach (var symbol in f_10919_89687_89707_I(f_10919_89687_89707(lookupResult)))
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 89664, 89854);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89765, 89827);

                                    f_10919_89765_89826(results, f_10919_89777_89825(f_10919_89777_89807(this, symbol)));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 89664, 89854);
                                }
                            }
                            catch (System.Exception)
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 191);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 191);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 89435, 89877);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 88818, 90156);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 88818, 90156);
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 89959, 90137);
                            foreach (var symbol in f_10919_89982_90002_I(f_10919_89982_90002(lookupResult)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 89959, 90137);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 90052, 90114);

                                f_10919_90052_90113(results, f_10919_90064_90112(f_10919_90064_90094(this, symbol)));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 89959, 90137);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 179);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 179);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 88818, 90156);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 88754, 90171);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 90187, 90207);

                f_10919_90187_90206(
                            lookupResult);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 87729, 90218);

                int
                f_10919_88001_88030(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 88001, 88030);
                    return 0;
                }


                int
                f_10919_88177_88243(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 88177, 88243);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResult
                f_10919_88279_88305()
                {
                    var return_v = LookupResult.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 88279, 88305);
                    return return_v;
                }


                int
                f_10919_88386_88737(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupResult
                result, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                qualifierOpt, string
                plainName, int
                arity, Roslyn.Utilities.ConsList<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol>
                basesBeingResolved, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, bool
                diagnose, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    this_param.LookupSymbolsSimpleName(result, qualifierOpt, plainName, arity, basesBeingResolved: basesBeingResolved, options: options, diagnose: diagnose, useSiteDiagnostics: ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 88386, 88737);
                    return 0;
                }


                bool
                f_10919_88758_88784(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.IsMultiViable;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 88758, 88784);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_88822_88842(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 88822, 88842);
                    return return_v;
                }


                bool
                f_10919_88822_88951(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                builder, System.Func<Microsoft.CodeAnalysis.CSharp.Symbol, bool>
                predicate)
                {
                    var return_v = builder.Any<Microsoft.CodeAnalysis.CSharp.Symbol>(predicate);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 88822, 88951);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_89134_89161()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89134, 89161);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_89306_89315(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 89306, 89315);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_89259_89369(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupResult
                result, string
                simpleName, int
                arity, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                where, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                suppressUseSiteDiagnostics, out bool
                wasError, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                qualifierOpt, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    var return_v = this_param.ResultSymbol(result, simpleName, arity, (Microsoft.CodeAnalysis.SyntaxNode)where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89259, 89369);
                    return return_v;
                }


                int
                f_10919_89392_89410(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89392, 89410);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_89510_89546(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.RemapSymbolIfNecessary(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89510, 89546);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_89510_89564(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89510, 89564);
                    return return_v;
                }


                int
                f_10919_89498_89565(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.ISymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89498, 89565);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_89687_89707(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 89687, 89707);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_89777_89807(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.RemapSymbolIfNecessary(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89777, 89807);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_89777_89825(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89777, 89825);
                    return return_v;
                }


                int
                f_10919_89765_89826(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.ISymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89765, 89826);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_89687_89707_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89687, 89707);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_89982_90002(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 89982, 90002);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_90064_90094(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.RemapSymbolIfNecessary(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 90064, 90094);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_90064_90112(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 90064, 90112);
                    return return_v;
                }


                int
                f_10919_90052_90113(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.ISymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 90052, 90113);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_89982_90002_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 89982, 90002);
                    return return_v;
                }


                int
                f_10919_90187_90206(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 90187, 90206);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 87729, 90218);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 87729, 90218);
            }
        }

        private Symbol RemapSymbolIfNecessary(Symbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 90230, 90645);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 90307, 90634);

                switch (symbol)
                {

                    case LocalSymbol _:
                    case ParameterSymbol _:
                    case MethodSymbol { MethodKind: MethodKind.LambdaMethod }:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 90307, 90634);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 90513, 90555);

                        return f_10919_90520_90554(this, symbol);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 90307, 90634);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 90307, 90634);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 90605, 90619);

                        return symbol;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 90307, 90634);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 90230, 90645);

                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_90520_90554(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.RemapSymbolIfNecessaryCore(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 90520, 90554);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 90230, 90645);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 90230, 90645);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract Symbol RemapSymbolIfNecessaryCore(Symbol symbol);

        private static ImmutableArray<ISymbol> FilterNotReferencable(ImmutableArray<ISymbol> sealedResults)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 90998, 91711);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91122, 91159);

                ArrayBuilder<ISymbol>
                builder = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91173, 91185);

                int
                pos = 0
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91199, 91630);
                    foreach (var result in f_10919_91222_91235_I(sealedResults))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 91199, 91630);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91269, 91591) || true) && (f_10919_91273_91301(result))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 91269, 91591);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91343, 91364);

                            DynAbs.Tracing.TraceSender.TraceInvocationWrapper(() => DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(builder, 10919, 91343, 91363)?.Add(result), 10919, 91351, 91363);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 91269, 91591);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 91269, 91591);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91406, 91591) || true) && (builder == null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 91406, 91591);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91467, 91513);

                                builder = f_10919_91477_91512();
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91535, 91572);

                                f_10919_91535_91571(builder, sealedResults, pos);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 91406, 91591);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 91269, 91591);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91609, 91615);

                        pos++;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 91199, 91630);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 432);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 432);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 91646, 91700);

                return f_10919_91653_91682_I(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(builder, 10919, 91653, 91682)?.ToImmutableAndFree()) ?? (DynAbs.Tracing.TraceSender.Expression_Null<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>?>(10919, 91653, 91699) ?? sealedResults);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 90998, 91711);

                bool
                f_10919_91273_91301(Microsoft.CodeAnalysis.ISymbol
                this_param)
                {
                    var return_v = this_param.CanBeReferencedByName;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 91273, 91301);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                f_10919_91477_91512()
                {
                    var return_v = ArrayBuilder<ISymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 91477, 91512);
                    return return_v;
                }


                int
                f_10919_91535_91571(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                items, int
                length)
                {
                    this_param.AddRange(items, length);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 91535, 91571);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_91222_91235_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 91222, 91235);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>?
                f_10919_91653_91682_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 91653, 91682);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 90998, 91711);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 90998, 91711);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public bool IsAccessible(int position, Symbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 92635, 93213);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 92713, 92757);

                position = f_10919_92724_92756(this, position);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 92773, 92896) || true) && ((object)symbol == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 92773, 92896);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 92833, 92881);

                    throw f_10919_92839_92880(nameof(symbol));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 92773, 92896);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 92912, 92959);

                var
                binder = f_10919_92925_92958(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 92973, 93173) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 92973, 93173);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93025, 93075);

                    HashSet<DiagnosticInfo>
                    useSiteDiagnostics = null
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93093, 93158);

                    return f_10919_93100_93157(binder, symbol, ref useSiteDiagnostics, null);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 92973, 93173);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93189, 93202);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 92635, 93213);

                int
                f_10919_92724_92756(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 92724, 92756);
                    return return_v;
                }


                System.ArgumentNullException
                f_10919_92839_92880(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 92839, 92880);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_92925_92958(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 92925, 92958);
                    return return_v;
                }


                bool
                f_10919_93100_93157(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                accessThroughType)
                {
                    var return_v = this_param.IsAccessible(symbol, ref useSiteDiagnostics, accessThroughType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 93100, 93157);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 92635, 93213);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 92635, 93213);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public bool IsEventUsableAsField(int position, EventSymbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 93415, 93656);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93506, 93614);

                return symbol is object && (DynAbs.Tracing.TraceSender.Expression_True(10919, 93513, 93558) && f_10919_93533_93558(symbol)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 93513, 93613) && f_10919_93562_93613(this, position, f_10919_93590_93612(symbol)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 93415, 93656);

                bool
                f_10919_93533_93558(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.HasAssociatedField;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 93533, 93558);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol?
                f_10919_93590_93612(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.AssociatedField;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 93590, 93612);
                    return return_v;
                }


                bool
                f_10919_93562_93613(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol?
                symbol)
                {
                    var return_v = this_param.IsAccessible(position, (Microsoft.CodeAnalysis.CSharp.Symbol?)symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 93562, 93613);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 93415, 93656);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 93415, 93656);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsInTypeofExpression(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 93668, 94127);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93740, 93782);

                var
                token = f_10919_93752_93781(f_10919_93752_93761(this), position)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93796, 93820);

                var
                curr = token.Parent
                ;
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93834, 94087) || true) && (curr != f_10919_93849_93858(this))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 93834, 94087);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93892, 94009) || true) && (f_10919_93896_93936(curr, SyntaxKind.TypeOfExpression))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 93892, 94009);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 93978, 93990);

                            return true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 93892, 94009);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 94029, 94072);

                        curr = f_10919_94036_94071(curr);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 93834, 94087);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 93834, 94087);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 93834, 94087);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 94103, 94116);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 93668, 94127);

                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_93752_93761(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 93752, 93761);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10919_93752_93781(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param, int
                position)
                {
                    var return_v = this_param.FindToken(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 93752, 93781);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_93849_93858(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 93849, 93858);
                    return return_v;
                }


                bool
                f_10919_93896_93936(Microsoft.CodeAnalysis.SyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 93896, 93936);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxNode?
                f_10919_94036_94071(Microsoft.CodeAnalysis.SyntaxNode?
                this_param)
                {
                    var return_v = this_param.ParentOrStructuredTriviaParent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 94036, 94071);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 93668, 94127);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 93668, 94127);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        [PerformanceSensitive(
                    "https://github.com/dotnet/roslyn/issues/23582",
                    Constraint = "Provide " + nameof(ArrayBuilder<Symbol>) + " capacity to reduce number of allocations.")]
        internal SymbolInfo GetSymbolInfoForNode(
                    SymbolInfoOptions options,
                    BoundNode lowestBoundNode,
                    BoundNode highestBoundNode,
                    BoundNode boundNodeForSyntacticParent,
                    Binder binderOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 94637, 99663);
                bool isDynamic = default(bool);
                Microsoft.CodeAnalysis.CSharp.LookupResultKind resultKind = default(Microsoft.CodeAnalysis.CSharp.LookupResultKind);
                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol> unusedMemberGroup = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95118, 95144);

                BoundExpression
                boundExpr
                = default(BoundExpression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95160, 95329);

                switch (highestBoundNode)
                {

                    case BoundRecursivePattern pat:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 95160, 95329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95271, 95314);

                        return f_10919_95278_95313(this, pat);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 95160, 95329);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95343, 95709);

                switch (lowestBoundNode)
                {

                    case BoundSubpattern subpattern:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 95343, 95709);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95454, 95500);

                        return f_10919_95461_95499(this, subpattern);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 95343, 95709);

                    case BoundExpression boundExpr2:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 95343, 95709);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95572, 95595);

                        boundExpr = boundExpr2;
                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 95617, 95623);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 95343, 95709);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 95343, 95709);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 95671, 95694);

                        return SymbolInfo.None;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 95343, 95709);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96162, 96391);

                ImmutableArray<Symbol>
                symbols = f_10919_96195_96390(this, boundExpr, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out unusedMemberGroup)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96407, 98386) || true) && (highestBoundNode is BoundExpression highestBoundExpr)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 96407, 98386);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96497, 96532);

                    LookupResultKind
                    highestResultKind
                    = default(LookupResultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96550, 96572);

                    bool
                    highestIsDynamic
                    = default(bool);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96590, 96638);

                    ImmutableArray<Symbol>
                    unusedHighestMemberGroup
                    = default(ImmutableArray<Symbol>);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96656, 96879);

                    ImmutableArray<Symbol>
                    highestSymbols = f_10919_96696_96878(this, highestBoundExpr, boundNodeForSyntacticParent, binderOpt, options, out highestIsDynamic, out highestResultKind, out unusedHighestMemberGroup)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 96899, 98371) || true) && ((symbols.Length != 1 || (DynAbs.Tracing.TraceSender.Expression_False(10919, 96904, 96983) || resultKind == LookupResultKind.OverloadResolutionFailure)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 96903, 97013) && highestSymbols.Length > 0))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 96899, 98371);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97055, 97080);

                        symbols = highestSymbols;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97102, 97133);

                        resultKind = highestResultKind;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97155, 97184);

                        isDynamic = highestIsDynamic;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 96899, 98371);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 96899, 98371);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97226, 98371) || true) && (highestResultKind != LookupResultKind.Empty && (DynAbs.Tracing.TraceSender.Expression_True(10919, 97230, 97307) && highestResultKind < resultKind))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97226, 98371);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97349, 97380);

                            resultKind = highestResultKind;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97402, 97431);

                            isDynamic = highestIsDynamic;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97226, 98371);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97226, 98371);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97473, 98371) || true) && (f_10919_97477_97498(highestBoundExpr) == BoundKind.TypeOrValueExpression)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97473, 98371);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97575, 97600);

                                symbols = highestSymbols;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97622, 97653);

                                resultKind = highestResultKind;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97675, 97704);

                                isDynamic = highestIsDynamic;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97473, 98371);
                            }

                            else
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97473, 98371);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97746, 98371) || true) && (f_10919_97750_97771(highestBoundExpr) == BoundKind.UnaryOperator)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97746, 98371);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97840, 98352) || true) && (f_10919_97844_97906(highestBoundExpr))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97840, 98352);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 97956, 97981);

                                        symbols = highestSymbols;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98007, 98038);

                                        resultKind = highestResultKind;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98064, 98093);

                                        isDynamic = highestIsDynamic;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97840, 98352);
                                    }

                                    else

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 97840, 98352);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98191, 98329);

                                        f_10919_98191_98328(f_10919_98204_98254(lowestBoundNode, highestBoundNode), "How is it that this operator has the same syntax node as its operand?");
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97840, 98352);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97746, 98371);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97473, 98371);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 97226, 98371);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 96899, 98371);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 96407, 98386);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98402, 99237) || true) && (resultKind == LookupResultKind.Empty)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 98402, 99237);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98616, 98713);

                    return f_10919_98623_98712(ImmutableArray<Symbol>.Empty, LookupResultKind.Empty, isDynamic);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 98402, 99237);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 98402, 99237);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 98947, 99010);

                    var
                    builder = f_10919_98961_99009(symbols.Length)
                    ;
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99028, 99163);
                        foreach (Symbol symbol in f_10919_99054_99061_I(symbols))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 99028, 99163);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99103, 99144);

                            f_10919_99103_99143(builder, symbol);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 99028, 99163);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 136);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 136);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99183, 99222);

                    symbols = f_10919_99193_99221(builder);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 98402, 99237);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99253, 99388) || true) && ((options & SymbolInfoOptions.ResolveAliases) != 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 99253, 99388);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99340, 99373);

                    symbols = f_10919_99350_99372(symbols);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 99253, 99388);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99404, 99572) || true) && (resultKind == LookupResultKind.Viable && (DynAbs.Tracing.TraceSender.Expression_True(10919, 99408, 99467) && symbols.Length > 1))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 99404, 99572);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99501, 99557);

                    resultKind = LookupResultKind.OverloadResolutionFailure;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 99404, 99572);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99588, 99652);

                return f_10919_99595_99651(symbols, resultKind, isDynamic);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 94637, 99663);

                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_95278_95313(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundRecursivePattern
                pat)
                {
                    var return_v = this_param.GetSymbolInfoForDeconstruction(pat);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 95278, 95313);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_95461_95499(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundSubpattern
                subpattern)
                {
                    var return_v = this_param.GetSymbolInfoForSubpattern(subpattern);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 95461, 95499);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_96195_96390(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, out bool
                isDynamic, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                memberGroup)
                {
                    var return_v = this_param.GetSemanticSymbols(boundNode, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out memberGroup);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 96195, 96390);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_96696_96878(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, out bool
                isDynamic, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                memberGroup)
                {
                    var return_v = this_param.GetSemanticSymbols(boundNode, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out memberGroup);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 96696, 96878);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_97477_97498(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 97477, 97498);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_97750_97771(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 97750, 97771);
                    return return_v;
                }


                bool
                f_10919_97844_97906(Microsoft.CodeAnalysis.CSharp.BoundExpression
                @operator)
                {
                    var return_v = IsUserDefinedTrueOrFalse((Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator)@operator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 97844, 97906);
                    return return_v;
                }


                bool
                f_10919_98204_98254(Microsoft.CodeAnalysis.CSharp.BoundNode
                objA, Microsoft.CodeAnalysis.CSharp.BoundNode
                objB)
                {
                    var return_v = ReferenceEquals((object)objA, (object)objB);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 98204, 98254);
                    return return_v;
                }


                int
                f_10919_98191_98328(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 98191, 98328);
                    return 0;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_98623_98712(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, bool
                isDynamic)
                {
                    var return_v = SymbolInfoFactory.Create(symbols, resultKind, isDynamic);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 98623, 98712);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_98961_99009(int
                capacity)
                {
                    var return_v = ArrayBuilder<Symbol>.GetInstance(capacity);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 98961, 99009);
                    return return_v;
                }


                int
                f_10919_99103_99143(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                builder, Microsoft.CodeAnalysis.CSharp.Symbol
                s)
                {
                    AddUnwrappingErrorTypes(builder, s);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99103, 99143);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_99054_99061_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99054, 99061);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_99193_99221(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99193, 99221);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_99350_99372(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols)
                {
                    var return_v = UnwrapAliases(symbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99350, 99372);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_99595_99651(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, bool
                isDynamic)
                {
                    var return_v = SymbolInfoFactory.Create(symbols, resultKind, isDynamic);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99595, 99651);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 94637, 99663);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 94637, 99663);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private SymbolInfo GetSymbolInfoForSubpattern(BoundSubpattern subpattern)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 99675, 100149);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99773, 100041) || true) && (f_10919_99777_99814_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10919_99777_99794(subpattern), 10919, 99777, 99814)?.OriginalDefinition) is ErrorTypeSymbol originalErrorType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 99773, 100041);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 99885, 100026);

                    return f_10919_99892_100025(symbol: null, originalErrorType.CandidateSymbols.GetPublicSymbols(), f_10919_99976_100024(f_10919_99976_100004(originalErrorType)));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 99773, 100041);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100057, 100138);

                return f_10919_100064_100137(f_10919_100079_100114(f_10919_100079_100096(subpattern)), CandidateReason.None);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 99675, 100149);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_99777_99794(Microsoft.CodeAnalysis.CSharp.BoundSubpattern
                this_param)
                {
                    var return_v = this_param.Symbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 99777, 99794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_99777_99814_M(Microsoft.CodeAnalysis.CSharp.Symbol?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 99777, 99814);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_99976_100004(Microsoft.CodeAnalysis.CSharp.Symbols.ErrorTypeSymbol
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 99976, 100004);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CandidateReason
                f_10919_99976_100024(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    var return_v = resultKind.ToCandidateReason();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99976, 100024);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_99892_100025(Microsoft.CodeAnalysis.ISymbol?
                symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                candidateSymbols, Microsoft.CodeAnalysis.CandidateReason
                candidateReason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol: symbol, candidateSymbols, candidateReason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 99892, 100025);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_100079_100096(Microsoft.CodeAnalysis.CSharp.BoundSubpattern
                this_param)
                {
                    var return_v = this_param.Symbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 100079, 100096);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_100079_100114(Microsoft.CodeAnalysis.CSharp.Symbol?
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100079, 100114);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_100064_100137(Microsoft.CodeAnalysis.ISymbol?
                symbol, Microsoft.CodeAnalysis.CandidateReason
                reason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol, reason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100064, 100137);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 99675, 100149);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 99675, 100149);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private SymbolInfo GetSymbolInfoForDeconstruction(BoundRecursivePattern pat)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 100161, 100358);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100262, 100347);

                return f_10919_100269_100346(f_10919_100284_100323(f_10919_100284_100305(pat)), CandidateReason.None);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 100161, 100358);

                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_100284_100305(Microsoft.CodeAnalysis.CSharp.BoundRecursivePattern
                this_param)
                {
                    var return_v = this_param.DeconstructMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 100284, 100305);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IMethodSymbol?
                f_10919_100284_100323(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100284, 100323);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_100269_100346(Microsoft.CodeAnalysis.IMethodSymbol?
                symbol, Microsoft.CodeAnalysis.CandidateReason
                reason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo((Microsoft.CodeAnalysis.ISymbol?)symbol, reason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100269, 100346);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 100161, 100358);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 100161, 100358);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void AddUnwrappingErrorTypes(ArrayBuilder<Symbol> builder, Symbol s)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 100370, 100793);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100478, 100544);

                var
                originalErrorSymbol = f_10919_100504_100524(s) as ErrorTypeSymbol
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100558, 100782) || true) && ((object)originalErrorSymbol != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 100558, 100782);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100631, 100686);

                    f_10919_100631_100685(builder, f_10919_100648_100684(originalErrorSymbol));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 100558, 100782);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 100558, 100782);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100752, 100767);

                    f_10919_100752_100766(builder, s);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 100558, 100782);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 100370, 100793);

                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_100504_100524(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.OriginalDefinition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 100504, 100524);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_100648_100684(Microsoft.CodeAnalysis.CSharp.Symbols.ErrorTypeSymbol
                this_param)
                {
                    var return_v = this_param.CandidateSymbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 100648, 100684);
                    return return_v;
                }


                int
                f_10919_100631_100685(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                items)
                {
                    this_param.AddRange(items);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100631, 100685);
                    return 0;
                }


                int
                f_10919_100752_100766(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 100752, 100766);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 100370, 100793);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 100370, 100793);
            }
        }

        private static bool IsUserDefinedTrueOrFalse(BoundUnaryOperator @operator)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 100805, 101096);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100904, 100960);

                UnaryOperatorKind
                operatorKind = f_10919_100937_100959(@operator)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 100974, 101085);

                return operatorKind == UnaryOperatorKind.UserDefinedTrue || (DynAbs.Tracing.TraceSender.Expression_False(10919, 100981, 101084) || operatorKind == UnaryOperatorKind.UserDefinedFalse);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 100805, 101096);

                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_100937_100959(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 100937, 100959);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 100805, 101096);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 100805, 101096);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal CSharpTypeInfo GetTypeInfoForNode(
                    BoundNode lowestBoundNode,
                    BoundNode highestBoundNode,
                    BoundNode boundNodeForSyntacticParent)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 101469, 114189);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 101670, 101825);

                BoundPattern
                pattern = lowestBoundNode as BoundPattern ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.BoundPattern?>(10919, 101693, 101824) ?? highestBoundNode as BoundPattern ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.BoundPattern?>(10919, 101728, 101824) ?? ((DynAbs.Tracing.TraceSender.Conditional_F1(10919, 101765, 101803) || ((highestBoundNode is BoundSubpattern sp && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 101806, 101816)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 101819, 101823))) ? f_10919_101806_101816((BoundSubpattern)highestBoundNode) : null)))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 101839, 102338) || true) && (pattern != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 101839, 102338);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 101892, 101942);

                    HashSet<DiagnosticInfo>
                    useSiteDiagnostics = null
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 102044, 102323);

                    return f_10919_102051_102322(f_10919_102092_102109(pattern), f_10919_102111_102131(pattern), nullability: default, convertedNullability: default, f_10919_102207_102321(f_10919_102207_102230(f_10919_102207_102218()), f_10919_102257_102274(pattern), f_10919_102276_102296(pattern), ref useSiteDiagnostics));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 101839, 102338);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 102354, 102405);

                var
                boundExpr = lowestBoundNode as BoundExpression
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 102419, 102478);

                var
                highestBoundExpr = highestBoundNode as BoundExpression
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 102494, 113997) || true) && (boundExpr != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 102498, 102793) && !(boundNodeForSyntacticParent != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 102538, 102676) && f_10919_102596_102637(boundNodeForSyntacticParent.Syntax) == SyntaxKind.ObjectCreationExpression) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 102538, 102792) && f_10919_102699_102772(((ObjectCreationExpressionSyntax)boundNodeForSyntacticParent.Syntax)) == boundExpr.Syntax))))
                ) // Do not return any type information for a ObjectCreationExpressionSyntax.Type node.

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 102494, 113997);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 103240, 103263);

                    TypeSymbol
                    type = null
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 103281, 103341);

                    NullabilityInfo
                    nullability = f_10919_103311_103340(boundExpr)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 103361, 105508) || true) && (f_10919_103365_103394(boundExpr))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 103361, 105508);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 103436, 103458);

                        type = f_10919_103443_103457(boundExpr);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 103482, 105489);

                        switch (boundExpr)
                        {

                            case BoundLocal local:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 103482, 105489);
                                {

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 104469, 104827) || true) && (type is ExtendedErrorTypeSymbol extended && (DynAbs.Tracing.TraceSender.Expression_True(10919, 104473, 104555) && extended.VariableUsedBeforeDeclaration))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 104469, 104827);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 104629, 104659);

                                        type = f_10919_104636_104658(f_10919_104636_104653(local));
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 104697, 104792);

                                        nullability = f_10919_104711_104791(f_10919_104711_104728(local).TypeWithAnnotations.NullableAnnotation, type);
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 104469, 104827);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 104861, 104867);

                                    break;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 103482, 105489);

                            case BoundConvertedTupleLiteral { SourceTuple: BoundTupleLiteral original }:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 103482, 105489);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105374, 105395);

                                    type = f_10919_105381_105394(original);
                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 105429, 105435);

                                    break;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 103482, 105489);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 103361, 105508);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105740, 105817);

                    var
                    highestBoundExprKind = f_10919_105767_105789_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(highestBoundExpr, 10919, 105767, 105789)?.Kind) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.BoundKind?>(10919, 105767, 105816) ?? BoundKind.NoOpStatement)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105835, 105860);

                    TypeSymbol
                    convertedType
                    = default(TypeSymbol);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105878, 105915);

                    NullabilityInfo
                    convertedNullability
                    = default(NullabilityInfo);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105933, 105955);

                    Conversion
                    conversion
                    = default(Conversion);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 105975, 113868) || true) && (highestBoundExprKind == BoundKind.Lambda)
                    ) // the enclosing conversion is explicit

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 105975, 113868);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106101, 106144);

                        var
                        lambda = (BoundLambda)highestBoundExpr
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106166, 106194);

                        convertedType = f_10919_106182_106193(lambda);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106662, 106674);

                        type = null;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106696, 106718);

                        nullability = default;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106740, 106869);

                        convertedNullability = f_10919_106763_106868(CodeAnalysis.NullableAnnotation.NotAnnotated, CodeAnalysis.NullableFlowState.NotNull);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 106891, 106975);

                        conversion = f_10919_106904_106974(ConversionKind.AnonymousFunction, f_10919_106953_106966(lambda), false);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 105975, 113868);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 105975, 113868);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107044, 113868) || true) && ((highestBoundExpr is BoundConversion) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 107048, 107160) && ((BoundConversion)highestBoundExpr).Conversion.IsTupleLiteralConversion))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 107044, 113868);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107202, 107265);

                            var
                            tupleLiteralConversion = (BoundConversion)highestBoundExpr
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107287, 107828) || true) && (f_10919_107291_107326(f_10919_107291_107321(tupleLiteralConversion)) == BoundKind.ConvertedTupleLiteral)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 107287, 107828);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107411, 107491);

                                var
                                convertedTuple = (BoundConvertedTupleLiteral)f_10919_107460_107490(tupleLiteralConversion)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107517, 107556);

                                type = f_10919_107524_107555(f_10919_107524_107550(convertedTuple));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107582, 107631);

                                nullability = f_10919_107596_107630(convertedTuple);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 107287, 107828);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 107287, 107828);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107729, 107805);

                                (type, nullability) = f_10919_107751_107804(f_10919_107773_107803(tupleLiteralConversion));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 107287, 107828);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107852, 107938);

                            (convertedType, convertedNullability) = f_10919_107892_107937(tupleLiteralConversion);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 107960, 108007);

                            conversion = f_10919_107973_108006(tupleLiteralConversion);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 107044, 113868);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 107044, 113868);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108049, 113868) || true) && (highestBoundExprKind == BoundKind.FixedLocalCollectionInitializer)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108049, 113868);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108160, 108233);

                                var
                                initializer = (BoundFixedLocalCollectionInitializer)highestBoundExpr
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108255, 108330);

                                (convertedType, convertedNullability) = f_10919_108295_108329(initializer);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108352, 108420);

                                (type, nullability) = f_10919_108374_108419(f_10919_108396_108418(initializer));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108525, 108579);

                                conversion = f_10919_108538_108578(initializer);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108049, 113868);
                            }

                            else
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108049, 113868);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108621, 113868) || true) && (highestBoundExpr != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 108625, 108682) && highestBoundExpr != boundExpr) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 108625, 108722) && f_10919_108686_108722(highestBoundExpr)))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108621, 113868);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108764, 108844);

                                    (convertedType, convertedNullability) = f_10919_108804_108843(highestBoundExpr);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108866, 110077) || true) && (highestBoundExprKind != BoundKind.Conversion)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108866, 110077);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 108964, 108997);

                                        conversion = Conversion.Identity;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108866, 110077);
                                    }

                                    else
                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108866, 110077);

                                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109047, 110077) || true) && (f_10919_109051_109099(f_10919_109051_109094(((BoundConversion)highestBoundExpr))) != BoundKind.Conversion)
                                        )

                                        {
                                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 109047, 110077);
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109173, 109219);

                                            conversion = f_10919_109186_109218(highestBoundExpr);

                                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109245, 109539) || true) && (conversion.Kind == ConversionKind.AnonymousFunction)
                                            )

                                            {
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 109245, 109539);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109448, 109460);

                                                type = null;
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109490, 109512);

                                                nullability = default;
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 109245, 109539);
                                            }
                                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 109047, 110077);
                                        }

                                        else

                                        {
                                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 109047, 110077);
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109771, 109837);

                                            var
                                            binder = f_10919_109784_109836(this, boundExpr.Syntax.Span.Start)
                                            ;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109863, 109913);

                                            HashSet<DiagnosticInfo>
                                            useSiteDiagnostics = null
                                            ;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 109939, 110054);

                                            conversion = f_10919_109952_110053(f_10919_109952_109970(binder), boundExpr, convertedType, ref useSiteDiagnostics);
                                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 109047, 110077);
                                        }
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108866, 110077);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108621, 113868);
                                }

                                else
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 108621, 113868);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 110119, 113868) || true) && (f_10919_110123_110156_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(boundNodeForSyntacticParent, 10919, 110123, 110156)?.Kind) == BoundKind.DelegateCreationExpression)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110119, 113868);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 110361, 110445);

                                        var
                                        delegateCreation = (BoundDelegateCreationExpression)boundNodeForSyntacticParent
                                        ;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 110467, 110547);

                                        (convertedType, convertedNullability) = f_10919_110507_110546(delegateCreation);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 110569, 111848);

                                        switch (f_10919_110577_110591(boundExpr))
                                        {

                                            case BoundKind.MethodGroup:
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110569, 111848);
                                                {
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 110733, 110853);

                                                    conversion = f_10919_110746_110852(ConversionKind.MethodGroup, f_10919_110789_110815(delegateCreation), f_10919_110817_110851(delegateCreation));
                                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 110887, 110893);

                                                    break;
                                                }
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110569, 111848);

                                            case BoundKind.Lambda:
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110569, 111848);
                                                {
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111037, 111073);

                                                    var
                                                    lambda = (BoundLambda)boundExpr
                                                    ;
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111107, 111220);

                                                    conversion = f_10919_111120_111219(ConversionKind.AnonymousFunction, f_10919_111169_111182(lambda), f_10919_111184_111218(delegateCreation));
                                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 111254, 111260);

                                                    break;
                                                }
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110569, 111848);

                                            case BoundKind.UnboundLambda:
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110569, 111848);
                                                {
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111411, 111474);

                                                    var
                                                    lambda = f_10919_111424_111473(((UnboundLambda)boundExpr))
                                                    ;
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111508, 111621);

                                                    conversion = f_10919_111521_111620(ConversionKind.AnonymousFunction, f_10919_111570_111583(lambda), f_10919_111585_111619(delegateCreation));
                                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 111655, 111661);

                                                    break;
                                                }
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110569, 111848);

                                            default:
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110569, 111848);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111756, 111789);

                                                conversion = Conversion.Identity;
                                                DynAbs.Tracing.TraceSender.TraceBreak(10919, 111819, 111825);

                                                break;
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110569, 111848);
                                        }
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110119, 113868);
                                    }

                                    else
                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 110119, 113868);

                                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 111890, 113868) || true) && (boundExpr is BoundConversion { ConversionKind: ConversionKind.MethodGroup, Conversion: var exprConversion, Type: { TypeKind: TypeKind.FunctionPointer }, SymbolOpt: var symbol })
                                        )

                                        {
                                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 111890, 113868);
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112491, 112512);

                                            convertedType = type;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112534, 112569);

                                            convertedNullability = nullability;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112591, 112619);

                                            conversion = exprConversion;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112641, 112653);

                                            type = null;
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112675, 112795);

                                            nullability = f_10919_112689_112794(CodeAnalysis.NullableAnnotation.NotAnnotated, CodeAnalysis.NullableFlowState.NotNull);
                                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 111890, 113868);
                                        }

                                        else
                                        {
                                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 111890, 113868);

                                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112837, 113868) || true) && (highestBoundExpr is BoundConvertedSwitchExpression e)
                                            )

                                            {
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 112837, 113868);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 112935, 112979);

                                                f_10919_112935_112978(boundExpr == highestBoundExpr);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113001, 113025);

                                                type = f_10919_113008_113024(e);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113047, 113070);

                                                convertedType = f_10919_113063_113069(e);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113092, 113137);

                                                convertedNullability = f_10919_113115_113136(e);
                                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113159, 113234);

                                                conversion = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 113172, 113192) || ((e.Conversion.IsValid && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 113195, 113207)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 113210, 113233))) ? f_10919_113195_113207(e) : Conversion.NoConversion;
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 112837, 113868);
                                            }

                                            else
                                            {
                                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 112837, 113868);

                                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113276, 113868) || true) && (highestBoundExpr is BoundConditionalOperator { WasTargetTyped: true } cond)
                                                )

                                                {
                                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 113276, 113868);
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113396, 113423);

                                                    type = f_10919_113403_113422(cond);
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113445, 113471);

                                                    convertedType = f_10919_113461_113470(cond);
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113493, 113528);

                                                    convertedNullability = nullability;
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113550, 113634);

                                                    conversion = Conversion.MakeConditionalExpression(ImmutableArray<Conversion>.Empty);
                                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 113276, 113868);
                                                }

                                                else

                                                {
                                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 113276, 113868);
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113716, 113737);

                                                    convertedType = type;
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113759, 113794);

                                                    convertedNullability = nullability;
                                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113816, 113849);

                                                    conversion = Conversion.Identity;
                                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 113276, 113868);
                                                }
                                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 112837, 113868);
                                            }
                                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 111890, 113868);
                                        }
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 110119, 113868);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108621, 113868);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 108049, 113868);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 107044, 113868);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 105975, 113868);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 113888, 113982);

                    return f_10919_113895_113981(type, convertedType, nullability, convertedNullability, conversion);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 102494, 113997);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114013, 114040);

                return CSharpTypeInfo.None;

                static (TypeSymbol, NullabilityInfo) getTypeAndNullability(BoundExpression expr)
                {
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 114137, 114177);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114140, 114177);
                        return (f_10919_114141_114150(expr), f_10919_114152_114176(expr)); DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 114137, 114177);
                    }
                    catch
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 114137, 114177);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 114137, 114177);
                    }
                    throw new System.Exception("Slicer error: unreachable code");
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 101469, 114189);

                Microsoft.CodeAnalysis.CSharp.BoundPattern
                f_10919_101806_101816(Microsoft.CodeAnalysis.CSharp.BoundSubpattern
                this_param)
                {
                    var return_v = this_param.Pattern;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 101806, 101816);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_102092_102109(Microsoft.CodeAnalysis.CSharp.BoundPattern
                this_param)
                {
                    var return_v = this_param.InputType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102092, 102109);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_102111_102131(Microsoft.CodeAnalysis.CSharp.BoundPattern
                this_param)
                {
                    var return_v = this_param.NarrowedType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102111, 102131);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_102207_102218()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102207, 102218);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10919_102207_102230(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102207, 102230);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_102257_102274(Microsoft.CodeAnalysis.CSharp.BoundPattern
                this_param)
                {
                    var return_v = this_param.InputType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102257, 102274);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_102276_102296(Microsoft.CodeAnalysis.CSharp.BoundPattern
                this_param)
                {
                    var return_v = this_param.NarrowedType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102276, 102296);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_102207_102321(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyBuiltInConversion(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 102207, 102321);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_102051_102322(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                convertedType, Microsoft.CodeAnalysis.NullabilityInfo
                nullability, Microsoft.CodeAnalysis.NullabilityInfo
                convertedNullability, Microsoft.CodeAnalysis.CSharp.Conversion
                implicitConversion)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo(type, convertedType, nullability: nullability, convertedNullability: convertedNullability, implicitConversion);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 102051, 102322);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_102596_102637(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 102596, 102637);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10919_102699_102772(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 102699, 102772);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_103311_103340(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.TopLevelNullability;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 103311, 103340);
                    return return_v;
                }


                bool
                f_10919_103365_103394(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasExpressionType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 103365, 103394);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_103443_103457(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 103443, 103457);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                f_10919_104636_104653(Microsoft.CodeAnalysis.CSharp.BoundLocal
                this_param)
                {
                    var return_v = this_param.LocalSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 104636, 104653);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_104636_104658(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 104636, 104658);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                f_10919_104711_104728(Microsoft.CodeAnalysis.CSharp.BoundLocal
                this_param)
                {
                    var return_v = this_param.LocalSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 104711, 104728);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_104711_104791(Microsoft.CodeAnalysis.CSharp.NullableAnnotation
                annotation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = annotation.ToNullabilityInfo(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 104711, 104791);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_105381_105394(Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 105381, 105394);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind?
                f_10919_105767_105789_M(Microsoft.CodeAnalysis.CSharp.BoundKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 105767, 105789);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_106182_106193(Microsoft.CodeAnalysis.CSharp.BoundLambda?
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 106182, 106193);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_106763_106868(Microsoft.CodeAnalysis.NullableAnnotation
                annotation, Microsoft.CodeAnalysis.NullableFlowState
                flowState)
                {
                    var return_v = new Microsoft.CodeAnalysis.NullabilityInfo(annotation, flowState);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 106763, 106868);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                f_10919_106953_106966(Microsoft.CodeAnalysis.CSharp.BoundLambda
                this_param)
                {
                    var return_v = this_param.Symbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 106953, 106966);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_106904_106974(Microsoft.CodeAnalysis.CSharp.ConversionKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                conversionMethod, bool
                isExtensionMethod)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Conversion(kind, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)conversionMethod, isExtensionMethod);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 106904, 106974);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_107291_107321(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107291, 107321);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_107291_107326(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107291, 107326);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_107460_107490(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107460, 107490);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral?
                f_10919_107524_107550(Microsoft.CodeAnalysis.CSharp.BoundConvertedTupleLiteral
                this_param)
                {
                    var return_v = this_param.SourceTuple;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107524, 107550);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_107524_107555(Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral?
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107524, 107555);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_107596_107630(Microsoft.CodeAnalysis.CSharp.BoundConvertedTupleLiteral
                this_param)
                {
                    var return_v = this_param.TopLevelNullability;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107596, 107630);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_107773_107803(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107773, 107803);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_107751_107804(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr)
                {
                    var return_v = getTypeAndNullability(expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 107751, 107804);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_107892_107937(Microsoft.CodeAnalysis.CSharp.BoundConversion
                expr)
                {
                    var return_v = getTypeAndNullability((Microsoft.CodeAnalysis.CSharp.BoundExpression)expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 107892, 107937);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_107973_108006(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Conversion;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 107973, 108006);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_108295_108329(Microsoft.CodeAnalysis.CSharp.BoundFixedLocalCollectionInitializer
                expr)
                {
                    var return_v = getTypeAndNullability((Microsoft.CodeAnalysis.CSharp.BoundExpression)expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 108295, 108329);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_108396_108418(Microsoft.CodeAnalysis.CSharp.BoundFixedLocalCollectionInitializer
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 108396, 108418);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_108374_108419(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr)
                {
                    var return_v = getTypeAndNullability(expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 108374, 108419);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_108538_108578(Microsoft.CodeAnalysis.CSharp.BoundFixedLocalCollectionInitializer
                this_param)
                {
                    var return_v = this_param.ElementPointerTypeConversion;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 108538, 108578);
                    return return_v;
                }


                bool
                f_10919_108686_108722(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasExpressionType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 108686, 108722);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_108804_108843(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr)
                {
                    var return_v = getTypeAndNullability(expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 108804, 108843);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_109051_109094(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 109051, 109094);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_109051_109099(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 109051, 109099);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_109186_109218(Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundNode)
                {
                    var return_v = boundNode.GetConversion();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 109186, 109218);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_109784_109836(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 109784, 109836);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10919_109952_109970(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 109952, 109970);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_109952_110053(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 109952, 110053);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind?
                f_10919_110123_110156_M(Microsoft.CodeAnalysis.CSharp.BoundKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 110123, 110156);
                    return return_v;
                }


                (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.NullabilityInfo)
                f_10919_110507_110546(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                expr)
                {
                    var return_v = getTypeAndNullability((Microsoft.CodeAnalysis.CSharp.BoundExpression)expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 110507, 110546);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_110577_110591(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 110577, 110591);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_110789_110815(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 110789, 110815);
                    return return_v;
                }


                bool
                f_10919_110817_110851(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 110817, 110851);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_110746_110852(Microsoft.CodeAnalysis.CSharp.ConversionKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                conversionMethod, bool
                isExtensionMethod)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Conversion(kind, conversionMethod, isExtensionMethod);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 110746, 110852);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                f_10919_111169_111182(Microsoft.CodeAnalysis.CSharp.BoundLambda
                this_param)
                {
                    var return_v = this_param.Symbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 111169, 111182);
                    return return_v;
                }


                bool
                f_10919_111184_111218(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 111184, 111218);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_111120_111219(Microsoft.CodeAnalysis.CSharp.ConversionKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                conversionMethod, bool
                isExtensionMethod)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Conversion(kind, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)conversionMethod, isExtensionMethod);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 111120, 111219);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLambda
                f_10919_111424_111473(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.BindForErrorRecovery();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 111424, 111473);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                f_10919_111570_111583(Microsoft.CodeAnalysis.CSharp.BoundLambda
                this_param)
                {
                    var return_v = this_param.Symbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 111570, 111583);
                    return return_v;
                }


                bool
                f_10919_111585_111619(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 111585, 111619);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_111521_111620(Microsoft.CodeAnalysis.CSharp.ConversionKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                conversionMethod, bool
                isExtensionMethod)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Conversion(kind, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)conversionMethod, isExtensionMethod);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 111521, 111620);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_112689_112794(Microsoft.CodeAnalysis.NullableAnnotation
                annotation, Microsoft.CodeAnalysis.NullableFlowState
                flowState)
                {
                    var return_v = new Microsoft.CodeAnalysis.NullabilityInfo(annotation, flowState);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 112689, 112794);
                    return return_v;
                }


                int
                f_10919_112935_112978(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 112935, 112978);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_113008_113024(Microsoft.CodeAnalysis.CSharp.BoundConvertedSwitchExpression
                this_param)
                {
                    var return_v = this_param.NaturalTypeOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113008, 113024);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_113063_113069(Microsoft.CodeAnalysis.CSharp.BoundConvertedSwitchExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113063, 113069);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_113115_113136(Microsoft.CodeAnalysis.CSharp.BoundConvertedSwitchExpression
                this_param)
                {
                    var return_v = this_param.TopLevelNullability;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113115, 113136);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_113195_113207(Microsoft.CodeAnalysis.CSharp.BoundConvertedSwitchExpression
                this_param)
                {
                    var return_v = this_param.Conversion;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113195, 113207);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_113403_113422(Microsoft.CodeAnalysis.CSharp.BoundConditionalOperator
                this_param)
                {
                    var return_v = this_param.NaturalTypeOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113403, 113422);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_113461_113470(Microsoft.CodeAnalysis.CSharp.BoundConditionalOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 113461, 113470);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_113895_113981(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                convertedType, Microsoft.CodeAnalysis.NullabilityInfo
                nullability, Microsoft.CodeAnalysis.NullabilityInfo
                convertedNullability, Microsoft.CodeAnalysis.CSharp.Conversion
                implicitConversion)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo(type, convertedType, nullability, convertedNullability, implicitConversion);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 113895, 113981);
                    return return_v;
                }


                static Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_114141_114150(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 114141, 114150);
                    return return_v;
                }


                static Microsoft.CodeAnalysis.NullabilityInfo
                f_10919_114152_114176(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.TopLevelNullability;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 114152, 114176);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 101469, 114189);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 101469, 114189);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal ImmutableArray<Symbol> GetMemberGroupForNode(
                    SymbolInfoOptions options,
                    BoundNode lowestBoundNode,
                    BoundNode boundNodeForSyntacticParent,
                    Binder binderOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 114549, 115249);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114791, 115186) || true) && (lowestBoundNode is BoundExpression boundExpr)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 114791, 115186);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114873, 114901);

                    LookupResultKind
                    resultKind
                    = default(LookupResultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114919, 114954);

                    ImmutableArray<Symbol>
                    memberGroup
                    = default(ImmutableArray<Symbol>);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 114972, 114987);

                    bool
                    isDynamic
                    = default(bool);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115005, 115132);

                    f_10919_115005_115131(this, boundExpr, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out memberGroup);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115152, 115171);

                    return memberGroup;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 114791, 115186);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115202, 115238);

                return ImmutableArray<Symbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 114549, 115249);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_115005_115131(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundNode, Microsoft.CodeAnalysis.CSharp.BoundNode
                boundNodeForSyntacticParent, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, out bool
                isDynamic, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                memberGroup)
                {
                    var return_v = this_param.GetSemanticSymbols(boundNode, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out memberGroup);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 115005, 115131);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 114549, 115249);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 114549, 115249);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal ImmutableArray<IPropertySymbol> GetIndexerGroupForNode(
                    BoundNode lowestBoundNode,
                    Binder binderOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 115598, 116071);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115758, 115809);

                var
                boundExpr = lowestBoundNode as BoundExpression
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115823, 115999) || true) && (boundExpr != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 115827, 115890) && f_10919_115848_115862(boundExpr) != BoundKind.TypeExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 115823, 115999);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 115924, 115984);

                    return f_10919_115931_115983(this, boundExpr, binderOpt);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 115823, 115999);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116015, 116060);

                return ImmutableArray<IPropertySymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 115598, 116071);

                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_115848_115862(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 115848, 115862);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IPropertySymbol>
                f_10919_115931_115983(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundNode, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt)
                {
                    var return_v = this_param.GetIndexerGroupSemanticSymbols(boundNode, binderOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 115931, 115983);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 115598, 116071);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 115598, 116071);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static SymbolInfo GetSymbolInfoForSymbol(Symbol symbol, SymbolInfoOptions options)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 116314, 117892);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116430, 116467);

                f_10919_116430_116466((object)symbol != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116549, 116588);

                Symbol
                unwrapped = f_10919_116568_116587(symbol)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116602, 116644);

                TypeSymbol
                type = unwrapped as TypeSymbol
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116710, 116809);

                var
                originalErrorSymbol = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 116736, 116756) || (((object)type != null && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 116759, 116801)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 116804, 116808))) ? f_10919_116759_116782(type) as ErrorTypeSymbol : null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116825, 117881) || true) && ((object)originalErrorSymbol != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 116825, 117881);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116930, 116973);

                    var
                    symbols = ImmutableArray<Symbol>.Empty
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 116993, 117054);

                    LookupResultKind
                    resultKind = f_10919_117023_117053(originalErrorSymbol)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117072, 117220) || true) && (resultKind != LookupResultKind.Empty)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 117072, 117220);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117154, 117201);

                        symbols = f_10919_117164_117200(originalErrorSymbol);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 117072, 117220);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117240, 117387) || true) && ((options & SymbolInfoOptions.ResolveAliases) != 0)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 117240, 117387);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117335, 117368);

                        symbols = f_10919_117345_117367(symbols);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 117240, 117387);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117407, 117478);

                    return f_10919_117414_117477(symbols, resultKind, isDynamic: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 116825, 117881);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 116825, 117881);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117645, 117739);

                    var
                    symbolToReturn = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 117666, 117717) || ((((options & SymbolInfoOptions.ResolveAliases) != 0) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 117720, 117729)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 117732, 117738))) ? unwrapped : symbol
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 117757, 117866);

                    return f_10919_117764_117865(f_10919_117779_117811(symbolToReturn), ImmutableArray<ISymbol>.Empty, CandidateReason.None);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 116825, 117881);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 116314, 117892);

                int
                f_10919_116430_116466(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 116430, 116466);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_116568_116587(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = UnwrapAlias(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 116568, 116587);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_116759_116782(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.OriginalDefinition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 116759, 116782);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_117023_117053(Microsoft.CodeAnalysis.CSharp.Symbols.ErrorTypeSymbol
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 117023, 117053);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_117164_117200(Microsoft.CodeAnalysis.CSharp.Symbols.ErrorTypeSymbol
                this_param)
                {
                    var return_v = this_param.CandidateSymbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 117164, 117200);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_117345_117367(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols)
                {
                    var return_v = UnwrapAliases(symbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 117345, 117367);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_117414_117477(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, bool
                isDynamic)
                {
                    var return_v = SymbolInfoFactory.Create(symbols, resultKind, isDynamic: isDynamic);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 117414, 117477);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_117779_117811(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 117779, 117811);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_117764_117865(Microsoft.CodeAnalysis.ISymbol
                symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                candidateSymbols, Microsoft.CodeAnalysis.CandidateReason
                candidateReason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol, candidateSymbols, candidateReason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 117764, 117865);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 116314, 117892);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 116314, 117892);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static CSharpTypeInfo GetTypeInfoForSymbol(Symbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 117974, 118471);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118065, 118102);

                f_10919_118065_118101((object)symbol != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118184, 118236);

                TypeSymbol
                type = f_10919_118202_118221(symbol) as TypeSymbol
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118383, 118460);

                return f_10919_118390_118459(type, type, default, default, Conversion.Identity);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 117974, 118471);

                int
                f_10919_118065_118101(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 118065, 118101);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_118202_118221(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = UnwrapAlias(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 118202, 118221);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo
                f_10919_118390_118459(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                convertedType, Microsoft.CodeAnalysis.NullabilityInfo
                nullability, Microsoft.CodeAnalysis.NullabilityInfo
                convertedNullability, Microsoft.CodeAnalysis.CSharp.Conversion
                implicitConversion)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSharpTypeInfo(type, convertedType, nullability, convertedNullability, implicitConversion);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 118390, 118459);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 117974, 118471);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 117974, 118471);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected static Symbol UnwrapAlias(Symbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 118483, 118634);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118558, 118623);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 118565, 118595) || ((symbol is AliasSymbol aliasSym && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 118598, 118613)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 118616, 118622))) ? f_10919_118598_118613((AliasSymbol)symbol) : symbol;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 118483, 118634);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                f_10919_118598_118613(Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                this_param)
                {
                    var return_v = this_param.Target;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 118598, 118613);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 118483, 118634);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 118483, 118634);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected static ImmutableArray<Symbol> UnwrapAliases(ImmutableArray<Symbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 118646, 119482);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118756, 118780);

                bool
                anyAliases = false
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118796, 118954);
                    foreach (Symbol symbol in f_10919_118822_118829_I(symbols))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 118796, 118954);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118863, 118939) || true) && (f_10919_118867_118878(symbol) == SymbolKind.Alias)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 118863, 118939);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118921, 118939);

                            anyAliases = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 118863, 118939);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 118796, 118954);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 159);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 159);
                }
                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 118970, 119019) || true) && (!anyAliases)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 118970, 119019);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119004, 119019);

                    return symbols;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 118970, 119019);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119035, 119101);

                ArrayBuilder<Symbol>
                builder = f_10919_119066_119100()
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119115, 119419);
                    foreach (Symbol symbol in f_10919_119141_119148_I(symbols))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 119115, 119419);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119350, 119404);

                        f_10919_119350_119403(builder, f_10919_119383_119402(symbol));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 119115, 119419);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 305);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 305);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119435, 119471);

                return f_10919_119442_119470(builder);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 118646, 119482);

                Microsoft.CodeAnalysis.SymbolKind
                f_10919_118867_118878(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 118867, 118878);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_118822_118829_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 118822, 118829);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_119066_119100()
                {
                    var return_v = ArrayBuilder<Symbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119066, 119100);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_119383_119402(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = UnwrapAlias(symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119383, 119402);
                    return return_v;
                }


                int
                f_10919_119350_119403(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                builder, Microsoft.CodeAnalysis.CSharp.Symbol
                s)
                {
                    AddUnwrappingErrorTypes(builder, s);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119350, 119403);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_119141_119148_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119141, 119148);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_119442_119470(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119442, 119470);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 118646, 119482);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 118646, 119482);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundNode Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 119572, 120476);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119693, 120437);

                switch (node)
                {

                    case ExpressionSyntax expression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 119693, 120437);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119794, 119825);

                        var
                        parent = f_10919_119807_119824(expression)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 119847, 120054);

                        return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 119854, 119893) || ((f_10919_119854_119893(parent, SyntaxKind.GotoStatement) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 119921, 119962)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 119990, 120053))) ? f_10919_119921_119962(binder, expression, diagnostics) : f_10919_119990_120053(binder, expression, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 119693, 120437);

                    case StatementSyntax statement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 119693, 120437);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 120125, 120177);

                        return f_10919_120132_120176(binder, statement, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 119693, 120437);

                    case GlobalStatementSyntax globalStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 119693, 120437);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 120260, 120344);

                        BoundStatement
                        bound = f_10919_120283_120343(binder, f_10919_120304_120329(globalStatement), diagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 120366, 120422);

                        return f_10919_120373_120421(node, bound);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 119693, 120437);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 120453, 120465);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 119572, 120476);

                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_119807_119824(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 119807, 119824);
                    return return_v;
                }


                bool
                f_10919_119854_119893(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119854, 119893);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_119921_119962(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLabel(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119921, 119962);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_119990_120053(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindNamespaceOrTypeOrExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 119990, 120053);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10919_120132_120176(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 120132, 120176);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10919_120304_120329(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 120304, 120329);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10919_120283_120343(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 120283, 120343);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundGlobalStatementInitializer
                f_10919_120373_120421(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundStatement
                statement)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundGlobalStatementInitializer((Microsoft.CodeAnalysis.SyntaxNode)syntax, statement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 120373, 120421);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 119572, 120476);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 119572, 120476);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual ControlFlowAnalysis AnalyzeControlFlow(StatementSyntax firstStatement, StatementSyntax lastStatement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 121044, 121291);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 121246, 121280);

                throw f_10919_121252_121279();
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 121044, 121291);

                System.NotSupportedException
                f_10919_121252_121279()
                {
                    var return_v = new System.NotSupportedException();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 121252, 121279);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 121044, 121291);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 121044, 121291);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual ControlFlowAnalysis AnalyzeControlFlow(StatementSyntax statement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 121618, 121782);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 121723, 121771);

                return f_10919_121730_121770(this, statement, statement);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 121618, 121782);

                Microsoft.CodeAnalysis.ControlFlowAnalysis
                f_10919_121730_121770(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                firstStatement, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                lastStatement)
                {
                    var return_v = this_param.AnalyzeControlFlow(firstStatement, lastStatement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 121730, 121770);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 121618, 121782);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 121618, 121782);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual DataFlowAnalysis AnalyzeDataFlow(ExpressionSyntax expression)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 122108, 122315);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 122270, 122304);

                throw f_10919_122276_122303();
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 122108, 122315);

                System.NotSupportedException
                f_10919_122276_122303()
                {
                    var return_v = new System.NotSupportedException();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 122276, 122303);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 122108, 122315);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 122108, 122315);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual DataFlowAnalysis AnalyzeDataFlow(StatementSyntax firstStatement, StatementSyntax lastStatement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 122877, 123118);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 123073, 123107);

                throw f_10919_123079_123106();
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 122877, 123118);

                System.NotSupportedException
                f_10919_123079_123106()
                {
                    var return_v = new System.NotSupportedException();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 123079, 123106);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 122877, 123118);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 122877, 123118);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual DataFlowAnalysis AnalyzeDataFlow(StatementSyntax statement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 123439, 123594);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 123538, 123583);

                return f_10919_123545_123582(this, statement, statement);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 123439, 123594);

                Microsoft.CodeAnalysis.DataFlowAnalysis
                f_10919_123545_123582(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                firstStatement, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                lastStatement)
                {
                    var return_v = this_param.AnalyzeDataFlow(firstStatement, lastStatement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 123545, 123582);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 123439, 123594);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 123439, 123594);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public bool TryGetSpeculativeSemanticModelForMethodBody(int position, BaseMethodDeclarationSyntax method, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 125583, 125943);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 125749, 125792);

                f_10919_125749_125791(this, method);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 125806, 125932);

                return f_10919_125813_125931(this, this, position, method, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 125583, 125943);

                int
                f_10919_125749_125791(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 125749, 125791);
                    return 0;
                }


                bool
                f_10919_125813_125931(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                method, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelForMethodBodyCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, method, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 125813, 125931);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 125583, 125943);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 125583, 125943);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelForMethodBodyCore(SyntaxTreeSemanticModel parentModel, int position, BaseMethodDeclarationSyntax method, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModelForMethodBody(int position, AccessorDeclarationSyntax accessor, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 128017, 128381);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 128183, 128228);

                f_10919_128183_128227(this, accessor);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 128242, 128370);

                return f_10919_128249_128369(this, this, position, accessor, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 128017, 128381);

                int
                f_10919_128183_128227(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 128183, 128227);
                    return 0;
                }


                bool
                f_10919_128249_128369(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                accessor, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelForMethodBodyCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, accessor, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 128249, 128369);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 128017, 128381);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 128017, 128381);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelForMethodBodyCore(SyntaxTreeSemanticModel parentModel, int position, AccessorDeclarationSyntax accessor, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, TypeSyntax type, out SemanticModel speculativeModel, SpeculativeBindingOption bindingOption = SpeculativeBindingOption.BindAsExpression)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 130389, 130799);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 130607, 130648);

                f_10919_130607_130647(this, type);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 130662, 130788);

                return f_10919_130669_130787(this, this, position, type, bindingOption, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 130389, 130799);

                int
                f_10919_130607_130647(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 130607, 130647);
                    return 0;
                }


                bool
                f_10919_130669_130787(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                type, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, type, bindingOption, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 130669, 130787);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 130389, 130799);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 130389, 130799);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, TypeSyntax type, SpeculativeBindingOption bindingOption, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, StatementSyntax statement, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 132658, 132989);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 132802, 132848);

                f_10919_132802_132847(this, statement);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 132862, 132978);

                return f_10919_132869_132977(this, this, position, statement, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 132658, 132989);

                int
                f_10919_132802_132847(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 132802, 132847);
                    return 0;
                }


                bool
                f_10919_132869_132977(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                statement, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, statement, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 132869, 132977);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 132658, 132989);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 132658, 132989);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, StatementSyntax statement, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, EqualsValueClauseSyntax initializer, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 134882, 135227);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 135036, 135084);

                f_10919_135036_135083(this, initializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 135098, 135216);

                return f_10919_135105_135215(this, this, position, initializer, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 134882, 135227);

                int
                f_10919_135036_135083(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 135036, 135083);
                    return 0;
                }


                bool
                f_10919_135105_135215(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                initializer, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, initializer, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 135105, 135215);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 134882, 135227);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 134882, 135227);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, EqualsValueClauseSyntax initializer, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, ArrowExpressionClauseSyntax expressionBody, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 137115, 137473);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 137276, 137327);

                f_10919_137276_137326(this, expressionBody);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 137341, 137462);

                return f_10919_137348_137461(this, this, position, expressionBody, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 137115, 137473);

                int
                f_10919_137276_137326(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 137276, 137326);
                    return 0;
                }


                bool
                f_10919_137348_137461(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, expressionBody, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 137348, 137461);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 137115, 137473);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 137115, 137473);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, ArrowExpressionClauseSyntax expressionBody, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, ConstructorInitializerSyntax constructorInitializer, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 139632, 140015);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 139802, 139861);

                f_10919_139802_139860(this, constructorInitializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 139875, 140004);

                return f_10919_139882_140003(this, this, position, constructorInitializer, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 139632, 140015);

                int
                f_10919_139802_139860(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 139802, 139860);
                    return 0;
                }


                bool
                f_10919_139882_140003(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                constructorInitializer, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, constructorInitializer, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 139882, 140003);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 139632, 140015);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 139632, 140015);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, ConstructorInitializerSyntax constructorInitializer, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, PrimaryConstructorBaseTypeSyntax constructorInitializer, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 142079, 142466);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 142253, 142312);

                f_10919_142253_142311(this, constructorInitializer);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 142326, 142455);

                return f_10919_142333_142454(this, this, position, constructorInitializer, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 142079, 142466);

                int
                f_10919_142253_142311(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 142253, 142311);
                    return 0;
                }


                bool
                f_10919_142333_142454(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                constructorInitializer, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, constructorInitializer, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 142333, 142454);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 142079, 142466);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 142079, 142466);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, PrimaryConstructorBaseTypeSyntax constructorInitializer, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, CrefSyntax crefSyntax, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 144502, 144831);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 144642, 144689);

                f_10919_144642_144688(this, crefSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 144703, 144820);

                return f_10919_144710_144819(this, this, position, crefSyntax, out speculativeModel);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 144502, 144831);

                int
                f_10919_144642_144688(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 144642, 144688);
                    return 0;
                }


                bool
                f_10919_144710_144819(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                parentModel, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax, out Microsoft.CodeAnalysis.SemanticModel
                speculativeModel)
                {
                    var return_v = this_param.TryGetSpeculativeSemanticModelCore((Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel)parentModel, position, crefSyntax, out speculativeModel);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 144710, 144819);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 144502, 144831);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 144502, 144831);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract bool TryGetSpeculativeSemanticModelCore(SyntaxTreeSemanticModel parentModel, int position, CrefSyntax crefSyntax, out SemanticModel speculativeModel);

        public bool TryGetSpeculativeSemanticModel(int position, AttributeSyntax attribute, out SemanticModel speculativeModel)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 146659, 147509);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 146803, 146849);

                f_10919_146803_146848(this, attribute);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 146865, 146932);

                var
                binder = f_10919_146878_146931(this, position, attribute)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 146946, 147068) || true) && (binder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 146946, 147068);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 146998, 147022);

                    speculativeModel = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147040, 147053);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 146946, 147068);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147084, 147130);

                var
                diagnostics = f_10919_147102_147129()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147144, 147165);

                AliasSymbol
                aliasOpt
                = default(AliasSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147179, 147280);

                var
                attributeType = (NamedTypeSymbol)f_10919_147216_147274(binder, f_10919_147232_147246(attribute), diagnostics, out aliasOpt).Type
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147294, 147313);

                f_10919_147294_147312(diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147327, 147472);

                speculativeModel = f_10919_147346_147471(((SyntaxTreeSemanticModel)this), position, attribute, binder, aliasOpt, attributeType);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 147486, 147498);

                return true;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 146659, 147509);

                int
                f_10919_146803_146848(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                syntax)
                {
                    this_param.CheckModelAndSyntaxNodeToSpeculate((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 146803, 146848);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_146878_146931(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute)
                {
                    var return_v = this_param.GetSpeculativeBinderForAttribute(position, attribute);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 146878, 146931);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_147102_147129()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 147102, 147129);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                f_10919_147232_147246(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 147232, 147246);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10919_147216_147274(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                alias)
                {
                    var return_v = this_param.BindType((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)syntax, diagnostics, out alias);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 147216, 147274);
                    return return_v;
                }


                int
                f_10919_147294_147312(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 147294, 147312);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.AttributeSemanticModel
                f_10919_147346_147471(Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                aliasOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                attributeType)
                {
                    var return_v = this_param.CreateSpeculativeAttributeSemanticModel(position, attribute, binder, aliasOpt, attributeType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 147346, 147471);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 146659, 147509);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 146659, 147509);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public new abstract CSharpSemanticModel ParentModel
        {
            get;
        }

        public new abstract SyntaxTree SyntaxTree
        {
            get;
        }

        public abstract Conversion ClassifyConversion(ExpressionSyntax expression, ITypeSymbol destination, bool isExplicitInSource = false);

        public Conversion ClassifyConversion(int position, ExpressionSyntax expression, ITypeSymbol destination, bool isExplicitInSource = false)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 150583, 152340);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 150745, 150878) || true) && ((object)destination == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 150745, 150878);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 150810, 150863);

                    throw f_10919_150816_150862(nameof(destination));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 150745, 150878);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 150894, 150978);

                TypeSymbol
                cdestination = f_10919_150920_150977(destination, nameof(destination))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 150994, 151197) || true) && (f_10919_150998_151015(expression) == SyntaxKind.DeclarationExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 150994, 151197);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151151, 151182);

                    return Conversion.NoConversion;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 150994, 151197);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151213, 151353) || true) && (isExplicitInSource)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 151213, 151353);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151269, 151338);

                    return f_10919_151276_151337(this, position, expression, cdestination);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 151213, 151353);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151631, 151675);

                position = f_10919_151642_151674(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151689, 151736);

                var
                binder = f_10919_151702_151735(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151750, 152282) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 151750, 152282);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151802, 151848);

                    var
                    diagnostics = f_10919_151820_151847()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151866, 151925);

                    var
                    bnode = f_10919_151878_151924(binder, expression, diagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151943, 151962);

                    f_10919_151943_151961(diagnostics);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 151982, 152267) || true) && (bnode != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 151986, 152030) && !f_10919_152004_152030(cdestination)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 151982, 152267);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 152072, 152122);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 152144, 152248);

                        return f_10919_152151_152247(f_10919_152151_152169(binder), bnode, cdestination, ref useSiteDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 151982, 152267);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 151750, 152282);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 152298, 152329);

                return Conversion.NoConversion;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 150583, 152340);

                System.ArgumentNullException
                f_10919_150816_150862(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 150816, 150862);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_150920_150977(Microsoft.CodeAnalysis.ITypeSymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 150920, 150977);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_150998_151015(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 150998, 151015);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_151276_151337(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination)
                {
                    var return_v = this_param.ClassifyConversionForCast(position, expression, destination);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151276, 151337);
                    return return_v;
                }


                int
                f_10919_151642_151674(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151642, 151674);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_151702_151735(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151702, 151735);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_151820_151847()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151820, 151847);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_151878_151924(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151878, 151924);
                    return return_v;
                }


                int
                f_10919_151943_151961(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 151943, 151961);
                    return 0;
                }


                bool
                f_10919_152004_152030(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 152004, 152030);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10919_152151_152169(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 152151, 152169);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_152151_152247(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 152151, 152247);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 150583, 152340);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 150583, 152340);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract Conversion ClassifyConversionForCast(ExpressionSyntax expression, TypeSymbol destination);

        internal Conversion ClassifyConversionForCast(int position, ExpressionSyntax expression, TypeSymbol destination)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 154404, 155412);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154541, 154674) || true) && ((object)destination == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 154541, 154674);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154606, 154659);

                    throw f_10919_154612_154658(nameof(destination));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 154541, 154674);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154690, 154734);

                position = f_10919_154701_154733(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154748, 154795);

                var
                binder = f_10919_154761_154794(this, position)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154809, 155354) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 154809, 155354);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154861, 154907);

                    var
                    diagnostics = f_10919_154879_154906()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 154925, 154984);

                    var
                    bnode = f_10919_154937_154983(binder, expression, diagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 155002, 155021);

                    f_10919_155002_155020(diagnostics);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 155041, 155339) || true) && (bnode != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 155045, 155088) && !f_10919_155063_155088(destination)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 155041, 155339);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 155130, 155180);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 155202, 155320);

                        return f_10919_155209_155319(f_10919_155209_155227(binder), bnode, destination, ref useSiteDiagnostics, forCast: true);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 155041, 155339);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 154809, 155354);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 155370, 155401);

                return Conversion.NoConversion;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 154404, 155412);

                System.ArgumentNullException
                f_10919_154612_154658(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 154612, 154658);
                    return return_v;
                }


                int
                f_10919_154701_154733(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 154701, 154733);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_154761_154794(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 154761, 154794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10919_154879_154906()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 154879, 154906);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_154937_154983(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 154937, 154983);
                    return return_v;
                }


                int
                f_10919_155002_155020(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 155002, 155020);
                    return 0;
                }


                bool
                f_10919_155063_155088(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 155063, 155088);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10919_155209_155227(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 155209, 155227);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10919_155209_155319(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics, bool
                forCast)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics, forCast: forCast);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 155209, 155319);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 154404, 155412);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 154404, 155412);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract ISymbol GetDeclaredSymbol(MemberDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ISymbol GetDeclaredSymbol(LocalFunctionStatementSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IMethodSymbol GetDeclaredSymbol(CompilationUnitSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract INamespaceSymbol GetDeclaredSymbol(NamespaceDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract INamedTypeSymbol GetDeclaredSymbol(BaseTypeDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract INamedTypeSymbol GetDeclaredSymbol(DelegateDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IFieldSymbol GetDeclaredSymbol(EnumMemberDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IMethodSymbol GetDeclaredSymbol(BaseMethodDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ISymbol GetDeclaredSymbol(BasePropertyDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IPropertySymbol GetDeclaredSymbol(PropertyDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IPropertySymbol GetDeclaredSymbol(IndexerDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IEventSymbol GetDeclaredSymbol(EventDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IPropertySymbol GetDeclaredSymbol(AnonymousObjectMemberDeclaratorSyntax declaratorSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract INamedTypeSymbol GetDeclaredSymbol(AnonymousObjectCreationExpressionSyntax declaratorSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract INamedTypeSymbol GetDeclaredSymbol(TupleExpressionSyntax declaratorSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ISymbol GetDeclaredSymbol(ArgumentSyntax declaratorSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IMethodSymbol GetDeclaredSymbol(AccessorDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IMethodSymbol GetDeclaredSymbol(ArrowExpressionClauseSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ISymbol GetDeclaredSymbol(VariableDeclaratorSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ISymbol GetDeclaredSymbol(SingleVariableDesignationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ILabelSymbol GetDeclaredSymbol(LabeledStatementSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract ILabelSymbol GetDeclaredSymbol(SwitchLabelSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IAliasSymbol GetDeclaredSymbol(UsingDirectiveSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IAliasSymbol GetDeclaredSymbol(ExternAliasDirectiveSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IParameterSymbol GetDeclaredSymbol(ParameterSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        internal abstract ImmutableArray<ISymbol> GetDeclaredSymbols(BaseFieldDeclarationSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken));

        protected ParameterSymbol GetParameterSymbol(
                    ImmutableArray<ParameterSymbol> parameters,
                    ParameterSyntax parameter,
                    CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 175089, 175877);
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175335, 175838);
                    foreach (var symbol in f_10919_175358_175368_I(parameters))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 175335, 175838);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175402, 175451);

                        cancellationToken.ThrowIfCancellationRequested();
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175471, 175823);
                            foreach (var location in f_10919_175496_175512_I(f_10919_175496_175512(symbol)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 175471, 175823);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175554, 175603);

                                cancellationToken.ThrowIfCancellationRequested();

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175627, 175804) || true) && (f_10919_175631_175650(location) == f_10919_175654_175669(this) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 175631, 175717) && parameter.Span.Contains(f_10919_175697_175716(location))))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 175627, 175804);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175767, 175781);

                                    return symbol;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 175627, 175804);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 175471, 175823);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 353);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 353);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 175335, 175838);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 504);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 504);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 175854, 175866);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 175089, 175877);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                f_10919_175496_175512(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.Locations;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 175496, 175512);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree?
                f_10919_175631_175650(Microsoft.CodeAnalysis.Location
                this_param)
                {
                    var return_v = this_param.SourceTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 175631, 175650);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_175654_175669(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 175654, 175669);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Text.TextSpan
                f_10919_175697_175716(Microsoft.CodeAnalysis.Location
                this_param)
                {
                    var return_v = this_param.SourceSpan;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 175697, 175716);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                f_10919_175496_175512_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 175496, 175512);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                f_10919_175358_175368_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 175358, 175368);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 175089, 175877);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 175089, 175877);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract ITypeParameterSymbol GetDeclaredSymbol(TypeParameterSyntax typeParameter, CancellationToken cancellationToken = default(CancellationToken));

        internal BinderFlags GetSemanticModelBinderFlags()
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 176327, 176570);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 176402, 176559);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 176409, 176434) || ((f_10919_176409_176434(this) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 176454, 176513)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 176533, 176558))) ? BinderFlags.SemanticModel | BinderFlags.IgnoreAccessibility
                : BinderFlags.SemanticModel;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 176327, 176570);

                bool
                f_10919_176409_176434(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.IgnoresAccessibility
                    ;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 176409, 176434);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 176327, 176570);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 176327, 176570);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ILocalSymbol GetDeclaredSymbol(ForEachStatementSyntax forEachStatement, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 176841, 177813);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177010, 177102);

                Binder
                enclosingBinder = f_10919_177035_177101(this, f_10919_177059_177100(this, forEachStatement))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177118, 177206) || true) && (enclosingBinder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 177118, 177206);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177179, 177191);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 177118, 177206);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177222, 177289);

                Binder
                foreachBinder = f_10919_177245_177288(enclosingBinder, forEachStatement)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177378, 177464) || true) && (foreachBinder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 177378, 177464);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177437, 177449);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 177378, 177464);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177480, 177575);

                LocalSymbol
                local = f_10919_177500_177557(foreachBinder, forEachStatement).FirstOrDefault()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 177589, 177802);

                return f_10919_177596_177801(((DynAbs.Tracing.TraceSender.Conditional_F1(10919, 177597, 177702) || ((local is SourceLocalSymbol { DeclarationKind: LocalDeclarationKind.ForEachIterationVariable } sourceLocal
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 177722, 177757)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 177777, 177782))) ? f_10919_177722_177757(this, (SourceLocalSymbol)local) : local));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 176841, 177813);

                int
                f_10919_177059_177100(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
                node)
                {
                    var return_v = this_param.GetAdjustedNodePosition((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177059, 177100);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_177035_177101(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177035, 177101);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10919_177245_177288(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177245, 177288);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10919_177500_177557(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177500, 177557);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                f_10919_177722_177757(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                originalSymbol)
                {
                    var return_v = this_param.GetAdjustedLocalSymbol(originalSymbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177722, 177757);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILocalSymbol?
                f_10919_177596_177801(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol?
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 177596, 177801);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 176841, 177813);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 176841, 177813);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal abstract LocalSymbol GetAdjustedLocalSymbol(SourceLocalSymbol originalSymbol);

        public ILocalSymbol GetDeclaredSymbol(CatchDeclarationSyntax catchDeclaration, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 178649, 179807);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 178818, 178873);

                CSharpSyntaxNode
                catchClause = f_10919_178849_178872(catchDeclaration)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 178937, 178996);

                f_10919_178937_178995(f_10919_178950_178968(catchClause) == SyntaxKind.CatchClause);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179010, 179097);

                Binder
                enclosingBinder = f_10919_179035_179096(this, f_10919_179059_179095(this, catchClause))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179113, 179201) || true) && (enclosingBinder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 179113, 179201);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179174, 179186);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 179113, 179201);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179217, 179277);

                Binder
                catchBinder = f_10919_179238_179276(enclosingBinder, catchClause)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179366, 179450) || true) && (catchBinder == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 179366, 179450);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179423, 179435);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 179366, 179450);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179466, 179519);

                catchBinder = f_10919_179480_179518(enclosingBinder, catchClause);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179533, 179621);

                LocalSymbol
                local = f_10919_179553_179603(catchBinder, catchClause).FirstOrDefault()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 179635, 179796);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 179642, 179728) || ((((object)local != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 179643, 179727) && f_10919_179668_179689(local) == LocalDeclarationKind.CatchVariable))
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 179748, 179771)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 179791, 179795))) ? f_10919_179748_179771(local) : null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 178649, 179807);

                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_178849_178872(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 178849, 178872);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_178950_178968(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 178950, 178968);
                    return return_v;
                }


                int
                f_10919_178937_178995(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 178937, 178995);
                    return 0;
                }


                int
                f_10919_179059_179095(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetAdjustedNodePosition((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179059, 179095);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_179035_179096(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179035, 179096);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10919_179238_179276(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179238, 179276);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10919_179480_179518(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179480, 179518);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10919_179553_179603(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179553, 179603);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                f_10919_179668_179689(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.DeclarationKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 179668, 179689);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILocalSymbol?
                f_10919_179748_179771(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 179748, 179771);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 178649, 179807);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 178649, 179807);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract IRangeVariableSymbol GetDeclaredSymbol(QueryClauseSyntax queryClause, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IRangeVariableSymbol GetDeclaredSymbol(JoinIntoClauseSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        public abstract IRangeVariableSymbol GetDeclaredSymbol(QueryContinuationSyntax node, CancellationToken cancellationToken = default(CancellationToken));

        // Get the symbols and possible method or property group associated with a bound node, as
        // they should be exposed through GetSemanticInfo.
        // NB: It is not safe to pass a null binderOpt during speculative binding.
        private ImmutableArray<Symbol> GetSemanticSymbols(
            BoundExpression boundNode,
            BoundNode boundNodeForSyntacticParent,
            Binder binderOpt,
            SymbolInfoOptions options,
            out bool isDynamic,
            out LookupResultKind resultKind,
            out ImmutableArray<Symbol> memberGroup)
        {
            memberGroup = ImmutableArray<Symbol>.Empty;
            ImmutableArray<Symbol> symbols = ImmutableArray<Symbol>.Empty;
            resultKind = LookupResultKind.Viable;
            isDynamic = false;

            switch (boundNode.Kind)
            {
                case BoundKind.MethodGroup:
                    symbols = GetMethodGroupSemanticSymbols((BoundMethodGroup)boundNode, boundNodeForSyntacticParent, binderOpt, out resultKind, out isDynamic, out memberGroup);
                    break;

                case BoundKind.PropertyGroup:
                    symbols = GetPropertyGroupSemanticSymbols((BoundPropertyGroup)boundNode, boundNodeForSyntacticParent, binderOpt, out resultKind, out memberGroup);
                    break;

                case BoundKind.BadExpression:
                    {
                        var expr = (BoundBadExpression)boundNode;
                        resultKind = expr.ResultKind;

                        if (expr.Syntax.Kind() is SyntaxKind.ObjectCreationExpression or SyntaxKind.ImplicitObjectCreationExpression)
                        {
                            if (resultKind == LookupResultKind.NotCreatable)
                            {
                                return expr.Symbols;
                            }
                            else if (expr.Type.IsDelegateType())
                            {
                                resultKind = LookupResultKind.Empty;
                                return symbols;
                            }

                            memberGroup = expr.Symbols;
                        }

                        return expr.Symbols;
                    }

                case BoundKind.DelegateCreationExpression:
                    break;

                case BoundKind.TypeExpression:
                    {
                        var boundType = (BoundTypeExpression)boundNode;

                        // Watch out for not creatable types within object creation syntax
                        if (boundNodeForSyntacticParent != null &&
                           boundNodeForSyntacticParent.Syntax.Kind() == SyntaxKind.ObjectCreationExpression &&
                           ((ObjectCreationExpressionSyntax)boundNodeForSyntacticParent.Syntax).Type == boundType.Syntax &&
                           boundNodeForSyntacticParent.Kind == BoundKind.BadExpression &&
                           ((BoundBadExpression)boundNodeForSyntacticParent).ResultKind == LookupResultKind.NotCreatable)
                        {
                            resultKind = LookupResultKind.NotCreatable;
                        }

                        // could be a type or alias.
                        var typeSymbol = boundType.AliasOpt ?? (Symbol)boundType.Type;

                        var originalErrorType = typeSymbol.OriginalDefinition as ErrorTypeSymbol;
                        if ((object)originalErrorType != null)
                        {
                            resultKind = originalErrorType.ResultKind;
                            symbols = originalErrorType.CandidateSymbols;
                        }
                        else
                        {
                            symbols = ImmutableArray.Create<Symbol>(typeSymbol);
                        }
                    }
                    break;

                case BoundKind.TypeOrValueExpression:
                    {
                        // If we're seeing a node of this kind, then we failed to resolve the member access
                        // as either a type or a property/field/event/local/parameter.  In such cases,
                        // the second interpretation applies so just visit the node for that.
                        BoundExpression valueExpression = ((BoundTypeOrValueExpression)boundNode).Data.ValueExpression;
                        return GetSemanticSymbols(valueExpression, boundNodeForSyntacticParent, binderOpt, options, out isDynamic, out resultKind, out memberGroup);
                    }

                case BoundKind.Call:
                    {
                        // Either overload resolution succeeded for this call or it did not. If it
                        // did not succeed then we've stashed the original method symbols from the
                        // method group, and we should use those as the symbols displayed for the
                        // call. If it did succeed then we did not stash any symbols; just fall
                        // through to the default case.

                        var call = (BoundCall)boundNode;
                        if (call.OriginalMethodsOpt.IsDefault)
                        {
                            if ((object)call.Method != null)
                            {
                                symbols = CreateReducedExtensionMethodIfPossible(call);
                                resultKind = call.ResultKind;
                            }
                        }
                        else
                        {
                            symbols = StaticCast<Symbol>.From(CreateReducedExtensionMethodsFromOriginalsIfNecessary(call, Compilation));
                            resultKind = call.ResultKind;
                        }
                    }
                    break;

                case BoundKind.FunctionPointerInvocation:
                    {
                        var invocation = (BoundFunctionPointerInvocation)boundNode;
                        symbols = ImmutableArray.Create<Symbol>(invocation.FunctionPointer);
                        resultKind = invocation.ResultKind;
                        break;
                    }

                case BoundKind.UnconvertedAddressOfOperator:
                    {
                        // We try to match the results given for a similar piece of syntax here: bad invocations.
                        // A BoundUnconvertedAddressOfOperator represents this syntax: &M
                        // Similarly, a BoundCall for a bad invocation represents this syntax: M(args)
                        // Calling GetSymbolInfo on the syntax will return an array of candidate symbols that were
                        // looked up, but calling GetMemberGroup will return an empty array. So, we ignore the member
                        // group result in the call below.
                        symbols = GetMethodGroupSemanticSymbols(
                            ((BoundUnconvertedAddressOfOperator)boundNode).Operand,
                            boundNodeForSyntacticParent, binderOpt, out resultKind, out isDynamic, methodGroup: out _);
                        break;
                    }

                case BoundKind.IndexerAccess:
                    {
                        // As for BoundCall, pull out stashed candidates if overload resolution failed.

                        BoundIndexerAccess indexerAccess = (BoundIndexerAccess)boundNode;
                        Debug.Assert((object)indexerAccess.Indexer != null);

                        resultKind = indexerAccess.ResultKind;

                        ImmutableArray<PropertySymbol> originalIndexersOpt = indexerAccess.OriginalIndexersOpt;
                        symbols = originalIndexersOpt.IsDefault ? ImmutableArray.Create<Symbol>(indexerAccess.Indexer) : StaticCast<Symbol>.From(originalIndexersOpt);
                    }
                    break;

                case BoundKind.IndexOrRangePatternIndexerAccess:
                    {
                        var indexerAccess = (BoundIndexOrRangePatternIndexerAccess)boundNode;

                        resultKind = indexerAccess.ResultKind;

                        // The only time a BoundIndexOrRangePatternIndexerAccess is created, overload resolution succeeded
                        // and returned only 1 result
                        Debug.Assert(indexerAccess.PatternSymbol is object);
                        symbols = ImmutableArray.Create<Symbol>(indexerAccess.PatternSymbol);
                    }
                    break;

                case BoundKind.EventAssignmentOperator:
                    var eventAssignment = (BoundEventAssignmentOperator)boundNode;
                    isDynamic = eventAssignment.IsDynamic;
                    var eventSymbol = eventAssignment.Event;
                    var methodSymbol = eventAssignment.IsAddition ? eventSymbol.AddMethod : eventSymbol.RemoveMethod;
                    if ((object)methodSymbol == null)
                    {
                        symbols = ImmutableArray<Symbol>.Empty;
                        resultKind = LookupResultKind.Empty;
                    }
                    else
                    {
                        symbols = ImmutableArray.Create<Symbol>(methodSymbol);
                        resultKind = eventAssignment.ResultKind;
                    }
                    break;

                case BoundKind.EventAccess when boundNodeForSyntacticParent is BoundEventAssignmentOperator { ResultKind: LookupResultKind.Viable } parentOperator &&
                                                boundNode.ExpressionSymbol is Symbol accessSymbol &&
                                                boundNode != parentOperator.Argument &&
                                                parentOperator.Event.Equals(accessSymbol, TypeCompareKind.AllNullableIgnoreOptions):
                    // When we're looking at the left-hand side of an event assignment, we synthesize a BoundEventAccess node. This node does not have
                    // nullability information, however, so if we're in that case then we need to grab the event symbol from the parent event assignment
                    // which does have the nullability-reinferred symbol
                    symbols = ImmutableArray.Create<Symbol>(parentOperator.Event);
                    resultKind = parentOperator.ResultKind;
                    break;

                case BoundKind.Conversion:
                    var conversion = (BoundConversion)boundNode;
                    isDynamic = conversion.ConversionKind.IsDynamic();
                    if (!isDynamic)
                    {
                        if ((conversion.ConversionKind == ConversionKind.MethodGroup) && conversion.IsExtensionMethod)
                        {
                            var symbol = conversion.SymbolOpt;
                            Debug.Assert((object)symbol != null);
                            symbols = ImmutableArray.Create<Symbol>(ReducedExtensionMethodSymbol.Create(symbol));
                            resultKind = conversion.ResultKind;
                        }
                        else if (conversion.ConversionKind.IsUserDefinedConversion())
                        {
                            GetSymbolsAndResultKind(conversion, conversion.SymbolOpt, conversion.OriginalUserDefinedConversionsOpt, out symbols, out resultKind);
                        }
                        else
                        {
                            goto default;
                        }
                    }
                    break;

                case BoundKind.BinaryOperator:
                    GetSymbolsAndResultKind((BoundBinaryOperator)boundNode, out isDynamic, ref resultKind, ref symbols);
                    break;

                case BoundKind.UnaryOperator:
                    GetSymbolsAndResultKind((BoundUnaryOperator)boundNode, out isDynamic, ref resultKind, ref symbols);
                    break;

                case BoundKind.UserDefinedConditionalLogicalOperator:
                    var @operator = (BoundUserDefinedConditionalLogicalOperator)boundNode;
                    isDynamic = false;
                    GetSymbolsAndResultKind(@operator, @operator.LogicalOperator, @operator.OriginalUserDefinedOperatorsOpt, out symbols, out resultKind);
                    break;

                case BoundKind.CompoundAssignmentOperator:
                    GetSymbolsAndResultKind((BoundCompoundAssignmentOperator)boundNode, out isDynamic, ref resultKind, ref symbols);
                    break;

                case BoundKind.IncrementOperator:
                    GetSymbolsAndResultKind((BoundIncrementOperator)boundNode, out isDynamic, ref resultKind, ref symbols);
                    break;

                case BoundKind.AwaitExpression:
                    var await = (BoundAwaitExpression)boundNode;
                    isDynamic = await.AwaitableInfo.IsDynamic;
                    goto default;

                case BoundKind.ConditionalOperator:
                    var conditional = (BoundConditionalOperator)boundNode;
                    Debug.Assert(conditional.ExpressionSymbol is null);
                    isDynamic = conditional.IsDynamic;
                    goto default;

                case BoundKind.Attribute:
                    {
                        Debug.Assert(boundNodeForSyntacticParent == null);
                        var attribute = (BoundAttribute)boundNode;
                        resultKind = attribute.ResultKind;

                        // If attribute name bound to a single named type or an error type
                        // with a single named type candidate symbol, we will return constructors
                        // of the named type in the semantic info.
                        // Otherwise, we will return the error type candidate symbols.

                        var namedType = (NamedTypeSymbol)attribute.Type;
                        if (namedType.IsErrorType())
                        {
                            Debug.Assert(resultKind != LookupResultKind.Viable);
                            var errorType = (ErrorTypeSymbol)namedType;
                            var candidateSymbols = errorType.CandidateSymbols;

                            // If error type has a single named type candidate symbol, we want to 
                            // use that type for symbol info. 
                            if (candidateSymbols.Length == 1 && candidateSymbols[0] is NamedTypeSymbol)
                            {
                                namedType = (NamedTypeSymbol)candidateSymbols[0];
                            }
                            else
                            {
                                symbols = candidateSymbols;
                                break;
                            }
                        }

                        AdjustSymbolsForObjectCreation(attribute, namedType, attribute.Constructor, binderOpt, ref resultKind, ref symbols, ref memberGroup);
                    }
                    break;

                case BoundKind.QueryClause:
                    {
                        var query = (BoundQueryClause)boundNode;
                        var builder = ArrayBuilder<Symbol>.GetInstance();
                        if (query.Operation != null && (object)query.Operation.ExpressionSymbol != null) builder.Add(query.Operation.ExpressionSymbol);
                        if ((object)query.DefinedSymbol != null) builder.Add(query.DefinedSymbol);
                        if (query.Cast != null && (object)query.Cast.ExpressionSymbol != null) builder.Add(query.Cast.ExpressionSymbol);
                        symbols = builder.ToImmutableAndFree();
                    }
                    break;

                case BoundKind.DynamicInvocation:
                    var dynamicInvocation = (BoundDynamicInvocation)boundNode;
                    Debug.Assert(dynamicInvocation.ExpressionSymbol is null);
                    symbols = memberGroup = dynamicInvocation.ApplicableMethods.Cast<MethodSymbol, Symbol>();
                    isDynamic = true;
                    break;

                case BoundKind.DynamicCollectionElementInitializer:
                    var collectionInit = (BoundDynamicCollectionElementInitializer)boundNode;
                    Debug.Assert(collectionInit.ExpressionSymbol is null);
                    symbols = memberGroup = collectionInit.ApplicableMethods.Cast<MethodSymbol, Symbol>();
                    isDynamic = true;
                    break;

                case BoundKind.DynamicIndexerAccess:
                    var dynamicIndexer = (BoundDynamicIndexerAccess)boundNode;
                    Debug.Assert(dynamicIndexer.ExpressionSymbol is null);
                    symbols = memberGroup = dynamicIndexer.ApplicableIndexers.Cast<PropertySymbol, Symbol>();
                    isDynamic = true;
                    break;

                case BoundKind.DynamicMemberAccess:
                    Debug.Assert((object)boundNode.ExpressionSymbol == null);
                    isDynamic = true;
                    break;

                case BoundKind.DynamicObjectCreationExpression:
                    var objectCreation = (BoundDynamicObjectCreationExpression)boundNode;
                    symbols = memberGroup = objectCreation.ApplicableMethods.Cast<MethodSymbol, Symbol>();
                    isDynamic = true;
                    break;

                case BoundKind.ObjectCreationExpression:
                    var boundObjectCreation = (BoundObjectCreationExpression)boundNode;

                    if ((object)boundObjectCreation.Constructor != null)
                    {
                        Debug.Assert(boundObjectCreation.ConstructorsGroup.Contains(boundObjectCreation.Constructor));
                        symbols = ImmutableArray.Create<Symbol>(boundObjectCreation.Constructor);
                    }
                    else if (boundObjectCreation.ConstructorsGroup.Length > 0)
                    {
                        symbols = StaticCast<Symbol>.From(boundObjectCreation.ConstructorsGroup);
                        resultKind = resultKind.WorseResultKind(LookupResultKind.OverloadResolutionFailure);
                    }

                    memberGroup = boundObjectCreation.ConstructorsGroup.Cast<MethodSymbol, Symbol>();
                    break;

                case BoundKind.ThisReference:
                case BoundKind.BaseReference:
                    {
                        Binder binder = binderOpt ?? GetEnclosingBinder(GetAdjustedNodePosition(boundNode.Syntax));
                        NamedTypeSymbol containingType = binder.ContainingType;
                        var containingMember = binder.ContainingMember();

                        var thisParam = GetThisParameter(boundNode.Type, containingType, containingMember, out resultKind);
                        symbols = thisParam != null ? ImmutableArray.Create<Symbol>(thisParam) : ImmutableArray<Symbol>.Empty;
                    }
                    break;

                case BoundKind.FromEndIndexExpression:
                    {
                        var fromEndIndexExpression = (BoundFromEndIndexExpression)boundNode;
                        if ((object)fromEndIndexExpression.MethodOpt != null)
                        {
                            symbols = ImmutableArray.Create<Symbol>(fromEndIndexExpression.MethodOpt);
                        }
                        break;
                    }

                case BoundKind.RangeExpression:
                    {
                        var rangeExpression = (BoundRangeExpression)boundNode;
                        if ((object)rangeExpression.MethodOpt != null)
                        {
                            symbols = ImmutableArray.Create<Symbol>(rangeExpression.MethodOpt);
                        }
                        break;
                    }

                default:
                    {
                        if (boundNode.ExpressionSymbol is Symbol symbol)
                        {
                            symbols = ImmutableArray.Create(symbol);
                            resultKind = boundNode.ResultKind;
                        }
                    }
                    break;
            }

            if (boundNodeForSyntacticParent != null && (options & SymbolInfoOptions.PreferConstructorsToType) != 0)
            {
                // Adjust symbols to get the constructors if we're T in a "new T(...)".
                AdjustSymbolsForObjectCreation(boundNode, boundNodeForSyntacticParent, binderOpt, ref resultKind, ref symbols, ref memberGroup);
            }

            return symbols;
        }

        private static ParameterSymbol GetThisParameter(TypeSymbol typeOfThis, NamedTypeSymbol containingType, Symbol containingMember, out LookupResultKind resultKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 201915, 204985);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202100, 202436) || true) && ((object)containingMember == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 202104, 202170) || (object)containingType == null))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 202100, 202436);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202280, 202326);

                    resultKind = LookupResultKind.NotReferencable;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202344, 202421);

                    return f_10919_202351_202420(containingMember as MethodSymbol, typeOfThis);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 202100, 202436);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202452, 202478);

                ParameterSymbol
                thisParam
                = default(ParameterSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202494, 204941);

                switch (f_10919_202502_202523(containingMember))
                {

                    case SymbolKind.Method:
                    case SymbolKind.Field:
                    case SymbolKind.Property:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 202494, 204941);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202685, 204670) || true) && (f_10919_202689_202714(containingMember))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 202685, 204670);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202811, 202864);

                            resultKind = LookupResultKind.StaticInstanceMismatch;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 202890, 202976);

                            thisParam = f_10919_202902_202975(containingMember as MethodSymbol, containingType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 202685, 204670);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 202685, 204670);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203074, 204647) || true) && ((object)typeOfThis == ErrorTypeSymbol.UnknownResultType)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 203074, 204647);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203294, 203380);

                                thisParam = f_10919_203306_203379(containingMember as MethodSymbol, containingType);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203410, 203456);

                                resultKind = LookupResultKind.NotReferencable;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 203074, 204647);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 203074, 204647);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203570, 204620);

                                switch (f_10919_203578_203599(containingMember))
                                {

                                    case SymbolKind.Method:
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 203570, 204620);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203726, 203763);

                                        resultKind = LookupResultKind.Viable;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 203801, 203852);

                                        thisParam = f_10919_203813_203851(containingMember);
                                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 203890, 203896);

                                        break;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 203570, 204620);

                                    case SymbolKind.Field:
                                    case SymbolKind.Property:
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 203570, 204620);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204215, 204261);

                                        resultKind = LookupResultKind.NotReferencable;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204299, 204399);

                                        thisParam = f_10919_204311_204349(containingMember) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol?>(10919, 204311, 204398) ?? f_10919_204353_204398(null, containingType));
                                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 204437, 204443);

                                        break;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 203570, 204620);

                                    default:
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 203570, 204620);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204525, 204589);

                                        throw f_10919_204531_204588(f_10919_204566_204587(containingMember));
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 203570, 204620);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 203074, 204647);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 202685, 204670);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 204692, 204698);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 202494, 204941);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 202494, 204941);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204748, 204830);

                        thisParam = f_10919_204760_204829(containingMember as MethodSymbol, typeOfThis);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204852, 204898);

                        resultKind = LookupResultKind.NotReferencable;
                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 204920, 204926);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 202494, 204941);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 204957, 204974);

                return thisParam;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 201915, 204985);

                Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol
                f_10919_202351_202420(Microsoft.CodeAnalysis.CSharp.Symbol?
                forMethod, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                containingType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)forMethod, containingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 202351, 202420);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_202502_202523(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 202502, 202523);
                    return return_v;
                }


                bool
                f_10919_202689_202714(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 202689, 202714);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol
                f_10919_202902_202975(Microsoft.CodeAnalysis.CSharp.Symbol
                forMethod, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                containingType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)forMethod, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)containingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 202902, 202975);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol
                f_10919_203306_203379(Microsoft.CodeAnalysis.CSharp.Symbol
                forMethod, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                containingType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)forMethod, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)containingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 203306, 203379);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_203578_203599(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 203578, 203599);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol?
                f_10919_203813_203851(Microsoft.CodeAnalysis.CSharp.Symbol
                containingMember)
                {
                    var return_v = containingMember.EnclosingThisSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 203813, 203851);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol?
                f_10919_204311_204349(Microsoft.CodeAnalysis.CSharp.Symbol
                containingMember)
                {
                    var return_v = containingMember.EnclosingThisSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 204311, 204349);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol
                f_10919_204353_204398(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                forMethod, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                containingType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol(forMethod, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)containingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 204353, 204398);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_204566_204587(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 204566, 204587);
                    return return_v;
                }


                System.Exception
                f_10919_204531_204588(Microsoft.CodeAnalysis.SymbolKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 204531, 204588);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol
                f_10919_204760_204829(Microsoft.CodeAnalysis.CSharp.Symbol
                forMethod, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                containingType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.ThisParameterSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)forMethod, containingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 204760, 204829);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 201915, 204985);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 201915, 204985);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void GetSymbolsAndResultKind(BoundUnaryOperator unaryOperator, out bool isDynamic, ref LookupResultKind resultKind, ref ImmutableArray<Symbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 204997, 206625);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205188, 205262);

                UnaryOperatorKind
                operandType = f_10919_205220_205261(f_10919_205220_205246(unaryOperator))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205276, 205327);

                isDynamic = f_10919_205288_205326(f_10919_205288_205314(unaryOperator));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205343, 206614) || true) && (operandType == 0 || (DynAbs.Tracing.TraceSender.Expression_False(10919, 205347, 205411) || operandType == UnaryOperatorKind.UserDefined) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 205347, 205466) || f_10919_205415_205439(unaryOperator) != LookupResultKind.Viable))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 205343, 206614);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205500, 205715) || true) && (!isDynamic)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 205500, 205715);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205556, 205696);

                        f_10919_205556_205695(unaryOperator, f_10919_205595_205618(unaryOperator), f_10919_205620_205665(unaryOperator), out symbols, out resultKind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 205500, 205715);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 205343, 206614);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 205343, 206614);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205781, 205901);

                    f_10919_205781_205900((object)f_10919_205802_205825(unaryOperator) == null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 205794, 205899) && unaryOperator.OriginalUserDefinedOperatorsOpt.IsDefaultOrEmpty));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205919, 205980);

                    UnaryOperatorKind
                    op = f_10919_205942_205979(f_10919_205942_205968(unaryOperator))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 205998, 206543);

                    symbols = f_10919_206008_206542(f_10919_206038_206541(f_10919_206077_206118(f_10919_206077_206103(f_10919_206077_206098(unaryOperator))), f_10919_206218_206269(op), f_10919_206369_206402(f_10919_206369_206387(unaryOperator)), f_10919_206502_206540(f_10919_206502_206528(unaryOperator))));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 206561, 206599);

                    resultKind = f_10919_206574_206598(unaryOperator);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 205343, 206614);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 204997, 206625);

                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_205220_205246(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205220, 205246);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_205220_205261(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 205220, 205261);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_205288_205314(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205288, 205314);
                    return return_v;
                }


                bool
                f_10919_205288_205326(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 205288, 205326);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_205415_205439(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205415, 205439);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_205595_205618(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205595, 205618);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_205620_205665(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OriginalUserDefinedOperatorsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205620, 205665);
                    return return_v;
                }


                int
                f_10919_205556_205695(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                node, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                symbolOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalCandidates, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    GetSymbolsAndResultKind((Microsoft.CodeAnalysis.CSharp.BoundExpression)node, (Microsoft.CodeAnalysis.CSharp.Symbol?)symbolOpt, originalCandidates, out symbols, out resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 205556, 205695);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_205802_205825(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205802, 205825);
                    return return_v;
                }


                int
                f_10919_205781_205900(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 205781, 205900);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_205942_205968(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 205942, 205968);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_205942_205979(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 205942, 205979);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_206077_206098(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206077, 206098);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_206077_206103(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206077, 206103);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_206077_206118(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206077, 206118);
                    return return_v;
                }


                string
                f_10919_206218_206269(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = OperatorFacts.UnaryOperatorNameFromOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206218, 206269);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_206369_206387(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206369, 206387);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_206369_206402(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206369, 206402);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_206502_206528(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206502, 206528);
                    return return_v;
                }


                bool
                f_10919_206502_206540(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsChecked();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206502, 206540);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                f_10919_206038_206541(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                container, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isCheckedBuiltin)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol(container, name, returnType, isCheckedBuiltin);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206038, 206541);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_206008_206542(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206008, 206542);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_206574_206598(Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206574, 206598);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 204997, 206625);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 204997, 206625);
            }
        }

        private static void GetSymbolsAndResultKind(BoundIncrementOperator increment, out bool isDynamic, ref LookupResultKind resultKind, ref ImmutableArray<Symbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 206637, 208213);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 206828, 206898);

                UnaryOperatorKind
                operandType = f_10919_206860_206897(f_10919_206860_206882(increment))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 206912, 206959);

                isDynamic = f_10919_206924_206958(f_10919_206924_206946(increment));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 206975, 208202) || true) && (operandType == 0 || (DynAbs.Tracing.TraceSender.Expression_False(10919, 206979, 207043) || operandType == UnaryOperatorKind.UserDefined) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 206979, 207094) || f_10919_207047_207067(increment) != LookupResultKind.Viable))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 206975, 208202);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 207128, 207331) || true) && (!isDynamic)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 207128, 207331);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 207184, 207312);

                        f_10919_207184_207311(increment, f_10919_207219_207238(increment), f_10919_207240_207281(increment), out symbols, out resultKind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 207128, 207331);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 206975, 208202);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 206975, 208202);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 207397, 207509);

                    f_10919_207397_207508((object)f_10919_207418_207437(increment) == null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 207410, 207507) && increment.OriginalUserDefinedOperatorsOpt.IsDefaultOrEmpty));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 207527, 207584);

                    UnaryOperatorKind
                    op = f_10919_207550_207583(f_10919_207550_207572(increment))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 207602, 208135);

                    symbols = f_10919_207612_208134(f_10919_207642_208133(f_10919_207681_207718(f_10919_207681_207703(f_10919_207681_207698(increment))), f_10919_207818_207869(op), f_10919_207969_207998(f_10919_207969_207983(increment)), f_10919_208098_208132(f_10919_208098_208120(increment))));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208153, 208187);

                    resultKind = f_10919_208166_208186(increment);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 206975, 208202);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 206637, 208213);

                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_206860_206882(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206860, 206882);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_206860_206897(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206860, 206897);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_206924_206946(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 206924, 206946);
                    return return_v;
                }


                bool
                f_10919_206924_206958(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 206924, 206958);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_207047_207067(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207047, 207067);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_207219_207238(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207219, 207238);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_207240_207281(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.OriginalUserDefinedOperatorsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207240, 207281);
                    return return_v;
                }


                int
                f_10919_207184_207311(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                node, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                symbolOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalCandidates, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    GetSymbolsAndResultKind((Microsoft.CodeAnalysis.CSharp.BoundExpression)node, (Microsoft.CodeAnalysis.CSharp.Symbol?)symbolOpt, originalCandidates, out symbols, out resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207184, 207311);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_207418_207437(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207418, 207437);
                    return return_v;
                }


                int
                f_10919_207397_207508(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207397, 207508);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_207550_207572(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207550, 207572);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_207550_207583(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207550, 207583);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_207681_207698(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207681, 207698);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_207681_207703(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207681, 207703);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_207681_207718(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207681, 207718);
                    return return_v;
                }


                string
                f_10919_207818_207869(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = OperatorFacts.UnaryOperatorNameFromOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207818, 207869);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_207969_207983(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 207969, 207983);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_207969_207998(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207969, 207998);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10919_208098_208120(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208098, 208120);
                    return return_v;
                }


                bool
                f_10919_208098_208132(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsChecked();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208098, 208132);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                f_10919_207642_208133(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                container, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isCheckedBuiltin)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol(container, name, returnType, isCheckedBuiltin);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207642, 208133);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_207612_208134(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 207612, 208134);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_208166_208186(Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208166, 208186);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 206637, 208213);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 206637, 208213);
            }
        }

        private static void GetSymbolsAndResultKind(BoundBinaryOperator binaryOperator, out bool isDynamic, ref LookupResultKind resultKind, ref ImmutableArray<Symbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 208225, 211249);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208418, 208494);

                BinaryOperatorKind
                operandType = f_10919_208451_208493(f_10919_208451_208478(binaryOperator))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208508, 208571);

                BinaryOperatorKind
                op = f_10919_208532_208570(f_10919_208532_208559(binaryOperator))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208585, 208637);

                isDynamic = f_10919_208597_208636(f_10919_208597_208624(binaryOperator));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208653, 211238) || true) && (operandType == 0 || (DynAbs.Tracing.TraceSender.Expression_False(10919, 208657, 208722) || operandType == BinaryOperatorKind.UserDefined) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 208657, 208778) || f_10919_208726_208751(binaryOperator) != LookupResultKind.Viable) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 208657, 208821) || f_10919_208782_208821(f_10919_208782_208809(binaryOperator))))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 208653, 211238);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208855, 209073) || true) && (!isDynamic)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 208855, 209073);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 208911, 209054);

                        f_10919_208911_209053(binaryOperator, f_10919_208951_208975(binaryOperator), f_10919_208977_209023(binaryOperator), out symbols, out resultKind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 208855, 209073);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 208653, 211238);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 208653, 211238);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 209139, 209261);

                    f_10919_209139_209260((object)f_10919_209160_209184(binaryOperator) == null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209152, 209259) && binaryOperator.OriginalUserDefinedOperatorsOpt.IsDefaultOrEmpty));

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 209281, 211164) || true) && (!isDynamic && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209285, 209389) && (op == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10919, 209321, 209388) || op == BinaryOperatorKind.NotEqual))) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209285, 209608) && ((f_10919_209416_209451(f_10919_209416_209435(binaryOperator)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209416, 209497) && f_10919_209455_209497(f_10919_209455_209480(f_10919_209455_209475(binaryOperator))))) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 209415, 209607) || (f_10919_209525_209561(f_10919_209525_209545(binaryOperator)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209525, 209606) && f_10919_209565_209606(f_10919_209565_209589(f_10919_209565_209584(binaryOperator)))))))) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 209285, 209694) && f_10919_209633_209664(f_10919_209633_209652(binaryOperator)) == SpecialType.System_Boolean))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 209281, 211164);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 209843, 209941);

                        var
                        objectType = f_10919_209860_209940(f_10919_209860_209898(f_10919_209860_209879(binaryOperator)), SpecialType.System_Object)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 209965, 210561);

                        symbols = f_10919_209975_210560(f_10919_210005_210559(objectType, f_10919_210150_210202(op), objectType, f_10919_210404_210423(binaryOperator), f_10919_210519_210558(f_10919_210519_210546(binaryOperator))));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 209281, 211164);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 209281, 211164);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 210643, 211145);

                        symbols = f_10919_210653_211144(f_10919_210675_211143(op, isDynamic, f_10919_210795_210819(f_10919_210795_210814(binaryOperator)), f_10919_210899_210924(f_10919_210899_210919(binaryOperator)), f_10919_211004_211023(binaryOperator), f_10919_211103_211142(f_10919_211103_211130(binaryOperator))));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 209281, 211164);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211184, 211223);

                    resultKind = f_10919_211197_211222(binaryOperator);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 208653, 211238);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 208225, 211249);

                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208451_208478(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208451, 208478);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208451_208493(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208451, 208493);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208532_208559(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208532, 208559);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208532_208570(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208532, 208570);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208597_208624(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208597, 208624);
                    return return_v;
                }


                bool
                f_10919_208597_208636(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208597, 208636);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_208726_208751(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208726, 208751);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_208782_208809(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208782, 208809);
                    return return_v;
                }


                bool
                f_10919_208782_208821(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLogical();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208782, 208821);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_208951_208975(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208951, 208975);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_208977_209023(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OriginalUserDefinedOperatorsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 208977, 209023);
                    return return_v;
                }


                int
                f_10919_208911_209053(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                node, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                symbolOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalCandidates, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    GetSymbolsAndResultKind((Microsoft.CodeAnalysis.CSharp.BoundExpression)node, (Microsoft.CodeAnalysis.CSharp.Symbol?)symbolOpt, originalCandidates, out symbols, out resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 208911, 209053);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_209160_209184(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209160, 209184);
                    return return_v;
                }


                int
                f_10919_209139_209260(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209139, 209260);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_209416_209435(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209416, 209435);
                    return return_v;
                }


                bool
                f_10919_209416_209451(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209416, 209451);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_209455_209475(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209455, 209475);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_209455_209480(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209455, 209480);
                    return return_v;
                }


                bool
                f_10919_209455_209497(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsNullableType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209455, 209497);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_209525_209545(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209525, 209545);
                    return return_v;
                }


                bool
                f_10919_209525_209561(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209525, 209561);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_209565_209584(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209565, 209584);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_209565_209589(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209565, 209589);
                    return return_v;
                }


                bool
                f_10919_209565_209606(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsNullableType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209565, 209606);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_209633_209652(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209633, 209652);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10919_209633_209664(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209633, 209664);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_209860_209879(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209860, 209879);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol
                f_10919_209860_209898(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.ContainingAssembly;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 209860, 209898);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10919_209860_209940(Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol
                this_param, Microsoft.CodeAnalysis.SpecialType
                type)
                {
                    var return_v = this_param.GetSpecialType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209860, 209940);
                    return return_v;
                }


                string
                f_10919_210150_210202(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = OperatorFacts.BinaryOperatorNameFromOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 210150, 210202);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_210404_210423(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210404, 210423);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_210519_210546(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210519, 210546);
                    return return_v;
                }


                bool
                f_10919_210519_210558(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsChecked();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 210519, 210558);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                f_10919_210005_210559(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                leftType, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isCheckedBuiltin)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)leftType, name, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)rightType, returnType, isCheckedBuiltin);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 210005, 210559);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_209975_210560(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 209975, 210560);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_210795_210814(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210795, 210814);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_210795_210819(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210795, 210819);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_210899_210919(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210899, 210919);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_210899_210924(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 210899, 210924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_211004_211023(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 211004, 211023);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_211103_211130(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.OperatorKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 211103, 211130);
                    return return_v;
                }


                bool
                f_10919_211103_211142(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsChecked();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211103, 211142);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_210675_211143(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                op, bool
                isDynamic, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isChecked)
                {
                    var return_v = GetIntrinsicOperatorSymbol(op, isDynamic, leftType, rightType, returnType, isChecked);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 210675, 211143);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_210653_211144(Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = ImmutableArray.Create(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 210653, 211144);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_211197_211222(Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 211197, 211222);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 208225, 211249);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 208225, 211249);
            }
        }

        private static Symbol GetIntrinsicOperatorSymbol(BinaryOperatorKind op, bool isDynamic, TypeSymbol leftType, TypeSymbol rightType, TypeSymbol returnType, bool isChecked)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 211261, 212552);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211455, 212147) || true) && (!isDynamic)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 211455, 212147);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211503, 211538);

                    leftType = f_10919_211514_211537(leftType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211556, 211593);

                    rightType = f_10919_211568_211592(rightType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211611, 211650);

                    returnType = f_10919_211624_211649(returnType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 211455, 212147);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 211455, 212147);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211716, 211753);

                    f_10919_211716_211752(f_10919_211729_211751(returnType));

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211773, 212132) || true) && ((object)leftType == null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 211773, 212132);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211843, 211879);

                        f_10919_211843_211878(f_10919_211856_211877(rightType));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211901, 211922);

                        leftType = rightType;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 211773, 212132);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 211773, 212132);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 211964, 212132) || true) && ((object)rightType == null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 211964, 212132);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212035, 212070);

                            f_10919_212035_212069(f_10919_212048_212068(leftType));
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212092, 212113);

                            rightType = leftType;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 211964, 212132);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 211773, 212132);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 211455, 212147);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212161, 212541);

                return f_10919_212168_212540(leftType, f_10919_212276_212328(op), rightType, returnType, isChecked);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 211261, 212552);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_211514_211537(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211514, 211537);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_211568_211592(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211568, 211592);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_211624_211649(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.StrippedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211624, 211649);
                    return return_v;
                }


                bool
                f_10919_211729_211751(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211729, 211751);
                    return return_v;
                }


                int
                f_10919_211716_211752(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211716, 211752);
                    return 0;
                }


                bool
                f_10919_211856_211877(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211856, 211877);
                    return return_v;
                }


                int
                f_10919_211843_211878(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 211843, 211878);
                    return 0;
                }


                bool
                f_10919_212048_212068(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212048, 212068);
                    return return_v;
                }


                int
                f_10919_212035_212069(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212035, 212069);
                    return 0;
                }


                string
                f_10919_212276_212328(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = OperatorFacts.BinaryOperatorNameFromOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212276, 212328);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol
                f_10919_212168_212540(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                leftType, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isCheckedBuiltin)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedIntrinsicOperatorSymbol(leftType, name, rightType, returnType, isCheckedBuiltin);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212168, 212540);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 211261, 212552);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 211261, 212552);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void GetSymbolsAndResultKind(BoundCompoundAssignmentOperator compoundAssignment, out bool isDynamic, ref LookupResultKind resultKind, ref ImmutableArray<Symbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 212564, 214281);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212773, 212854);

                BinaryOperatorKind
                operandType = f_10919_212806_212853(compoundAssignment.Operator.Kind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212868, 212936);

                BinaryOperatorKind
                op = f_10919_212892_212935(compoundAssignment.Operator.Kind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 212950, 213007);

                isDynamic = f_10919_212962_213006(compoundAssignment.Operator.Kind);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 213023, 214270) || true) && (operandType == 0 || (DynAbs.Tracing.TraceSender.Expression_False(10919, 213027, 213092) || operandType == BinaryOperatorKind.UserDefined) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 213027, 213152) || f_10919_213096_213125(compoundAssignment) != LookupResultKind.Viable))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 213023, 214270);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 213186, 213422) || true) && (!isDynamic)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 213186, 213422);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 213242, 213403);

                        f_10919_213242_213402(compoundAssignment, compoundAssignment.Operator.Method, f_10919_213322_213372(compoundAssignment), out symbols, out resultKind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 213186, 213422);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 213023, 214270);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 213023, 214270);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 213488, 213624);

                    f_10919_213488_213623((object)compoundAssignment.Operator.Method == null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 213501, 213622) && compoundAssignment.OriginalUserDefinedOperatorsOpt.IsDefaultOrEmpty));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 213644, 214194);

                    symbols = f_10919_213654_214193(f_10919_213676_214192(op, isDynamic, compoundAssignment.Operator.LeftType, compoundAssignment.Operator.RightType, compoundAssignment.Operator.ReturnType, f_10919_214147_214191(compoundAssignment.Operator.Kind)));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214212, 214255);

                    resultKind = f_10919_214225_214254(compoundAssignment);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 213023, 214270);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 212564, 214281);

                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_212806_212853(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212806, 212853);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10919_212892_212935(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212892, 212935);
                    return return_v;
                }


                bool
                f_10919_212962_213006(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 212962, 213006);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_213096_213125(Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 213096, 213125);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_213322_213372(Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                this_param)
                {
                    var return_v = this_param.OriginalUserDefinedOperatorsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 213322, 213372);
                    return return_v;
                }


                int
                f_10919_213242_213402(Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                node, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbolOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalCandidates, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    GetSymbolsAndResultKind((Microsoft.CodeAnalysis.CSharp.BoundExpression)node, (Microsoft.CodeAnalysis.CSharp.Symbol)symbolOpt, originalCandidates, out symbols, out resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 213242, 213402);
                    return 0;
                }


                int
                f_10919_213488_213623(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 213488, 213623);
                    return 0;
                }


                bool
                f_10919_214147_214191(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsChecked();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 214147, 214191);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10919_213676_214192(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                op, bool
                isDynamic, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, bool
                isChecked)
                {
                    var return_v = GetIntrinsicOperatorSymbol(op, isDynamic, leftType, rightType, returnType, isChecked);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 213676, 214192);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_213654_214193(Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = ImmutableArray.Create(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 213654, 214193);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_214225_214254(Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 214225, 214254);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 212564, 214281);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 212564, 214281);
            }
        }

        private static void GetSymbolsAndResultKind(BoundExpression node, Symbol symbolOpt, ImmutableArray<MethodSymbol> originalCandidates, out ImmutableArray<Symbol> symbols, out LookupResultKind resultKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 214293, 215067);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214519, 215056) || true) && (!f_10919_214524_214556(symbolOpt, null))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 214519, 215056);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214590, 214633);

                    symbols = f_10919_214600_214632(symbolOpt);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214651, 214680);

                    resultKind = f_10919_214664_214679(node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 214519, 215056);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 214519, 215056);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214714, 215056) || true) && (f_10919_214718_214747_M(!originalCandidates.IsDefault))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 214714, 215056);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214781, 214835);

                        symbols = f_10919_214791_214834(originalCandidates);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214853, 214882);

                        resultKind = f_10919_214866_214881(node);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 214714, 215056);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 214714, 215056);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 214948, 214987);

                        symbols = ImmutableArray<Symbol>.Empty;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 215005, 215041);

                        resultKind = LookupResultKind.Empty;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 214714, 215056);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 214519, 215056);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 214293, 215067);

                bool
                f_10919_214524_214556(Microsoft.CodeAnalysis.CSharp.Symbol
                objA, object?
                objB)
                {
                    var return_v = ReferenceEquals((object)objA, objB);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 214524, 214556);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_214600_214632(Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = ImmutableArray.Create(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 214600, 214632);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_214664_214679(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 214664, 214679);
                    return return_v;
                }


                bool
                f_10919_214718_214747_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 214718, 214747);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_214791_214834(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                from)
                {
                    var return_v = StaticCast<Symbol>.From(from);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 214791, 214834);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_214866_214881(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 214866, 214881);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 214293, 215067);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 214293, 215067);
            }
        }

        private void AdjustSymbolsForObjectCreation(
                    BoundExpression boundNode,
                    BoundNode boundNodeForSyntacticParent,
                    Binder binderOpt,
                    ref LookupResultKind resultKind,
                    ref ImmutableArray<Symbol> symbols,
                    ref ImmutableArray<Symbol> memberGroup)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 215420, 218042);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 215760, 215794);

                NamedTypeSymbol
                typeSymbol = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 215808, 215840);

                MethodSymbol
                constructor = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 215938, 215999);

                SyntaxNode
                parentSyntax = boundNodeForSyntacticParent.Syntax
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216013, 218031) || true) && (parentSyntax != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 216017, 216097) && parentSyntax == f_10919_216074_216097(boundNode.Syntax)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 216017, 216161) && f_10919_216118_216137(parentSyntax) == SyntaxKind.Attribute) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 216017, 216221) && f_10919_216165_216201(((AttributeSyntax)parentSyntax)) == boundNode.Syntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 216013, 218031);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216255, 216301);

                    var
                    unwrappedSymbols = f_10919_216278_216300(symbols)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216321, 217872);

                    switch (f_10919_216329_216361(boundNodeForSyntacticParent))
                    {

                        case BoundKind.Attribute:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 216321, 217872);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216454, 216530);

                            BoundAttribute
                            boundAttribute = (BoundAttribute)boundNodeForSyntacticParent
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216558, 217193) || true) && (unwrappedSymbols.Length == 1 && (DynAbs.Tracing.TraceSender.Expression_True(10919, 216562, 216642) && f_10919_216594_216618(unwrappedSymbols[0]) == SymbolKind.NamedType))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 216558, 217193);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216700, 216916);

                                f_10919_216700_216915(resultKind != LookupResultKind.Viable || (DynAbs.Tracing.TraceSender.Expression_False(10919, 216713, 216914) || f_10919_216787_216914(unwrappedSymbols[0], f_10919_216838_216876(f_10919_216838_216857(boundAttribute)), TypeCompareKind.ConsiderEverything2)));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 216948, 216998);

                                typeSymbol = (NamedTypeSymbol)unwrappedSymbols[0];
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217028, 217069);

                                constructor = f_10919_217042_217068(boundAttribute);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217099, 217166);

                                resultKind = f_10919_217112_217165(resultKind, f_10919_217139_217164(boundAttribute));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 216558, 217193);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10919, 217219, 217225);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 216321, 217872);

                        case BoundKind.BadExpression:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 216321, 217872);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217304, 217392);

                            BoundBadExpression
                            boundBadExpression = (BoundBadExpression)boundNodeForSyntacticParent
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217418, 217688) || true) && (unwrappedSymbols.Length == 1)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 217418, 217688);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217508, 217579);

                                resultKind = f_10919_217521_217578(resultKind, f_10919_217548_217577(boundBadExpression));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217609, 217661);

                                typeSymbol = unwrappedSymbols[0] as NamedTypeSymbol;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 217418, 217688);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10919, 217714, 217720);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 216321, 217872);

                        default:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 216321, 217872);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217778, 217853);

                            throw f_10919_217784_217852(f_10919_217819_217851(boundNodeForSyntacticParent));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 216321, 217872);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 217892, 218016);

                    f_10919_217892_218015(this, boundNode, typeSymbol, constructor, binderOpt, ref resultKind, ref symbols, ref memberGroup);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 216013, 218031);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 215420, 218042);

                Microsoft.CodeAnalysis.SyntaxNode?
                f_10919_216074_216097(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 216074, 216097);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_216118_216137(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 216118, 216137);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax
                f_10919_216165_216201(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 216165, 216201);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_216278_216300(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols)
                {
                    var return_v = UnwrapAliases(symbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 216278, 216300);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_216329_216361(Microsoft.CodeAnalysis.CSharp.BoundNode
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 216329, 216361);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_216594_216618(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 216594, 216618);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10919_216838_216857(Microsoft.CodeAnalysis.CSharp.BoundAttribute
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 216838, 216857);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_216838_216876(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.GetNonErrorGuess();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 216838, 216876);
                    return return_v;
                }


                bool
                f_10919_216787_216914(Microsoft.CodeAnalysis.CSharp.Symbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals((Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 216787, 216914);
                    return return_v;
                }


                int
                f_10919_216700_216915(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 216700, 216915);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_217042_217068(Microsoft.CodeAnalysis.CSharp.BoundAttribute
                this_param)
                {
                    var return_v = this_param.Constructor;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 217042, 217068);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_217139_217164(Microsoft.CodeAnalysis.CSharp.BoundAttribute
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 217139, 217164);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_217112_217165(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind1, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind2)
                {
                    var return_v = resultKind1.WorseResultKind(resultKind2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 217112, 217165);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_217548_217577(Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 217548, 217577);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_217521_217578(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind1, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind2)
                {
                    var return_v = resultKind1.WorseResultKind(resultKind2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 217521, 217578);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_217819_217851(Microsoft.CodeAnalysis.CSharp.BoundNode
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 217819, 217851);
                    return return_v;
                }


                System.Exception
                f_10919_217784_217852(Microsoft.CodeAnalysis.CSharp.BoundKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 217784, 217852);
                    return return_v;
                }


                int
                f_10919_217892_218015(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                lowestBoundNode, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                typeSymbolOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                constructorOpt, Microsoft.CodeAnalysis.CSharp.Binder
                binderOpt, ref Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, ref System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                symbols, ref System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                memberGroup)
                {
                    this_param.AdjustSymbolsForObjectCreation((Microsoft.CodeAnalysis.CSharp.BoundNode)lowestBoundNode, typeSymbolOpt, constructorOpt, binderOpt, ref resultKind, ref symbols, ref memberGroup);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 217892, 218015);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 215420, 218042);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 215420, 218042);
            }
        }

        private void AdjustSymbolsForObjectCreation(
                    BoundNode lowestBoundNode,
                    NamedTypeSymbol typeSymbolOpt,
                    MethodSymbol constructorOpt,
                    Binder binderOpt,
                    ref LookupResultKind resultKind,
                    ref ImmutableArray<Symbol> symbols,
                    ref ImmutableArray<Symbol> memberGroup)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 218054, 221102);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 218428, 218466);

                f_10919_218428_218465(lowestBoundNode != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 218480, 218548);

                f_10919_218480_218547(binderOpt != null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 218493, 218546) || f_10919_218514_218546(this, lowestBoundNode.Syntax)));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 218564, 221091) || true) && ((object)typeSymbolOpt != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 218564, 221091);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 218631, 218676);

                    f_10919_218631_218675(lowestBoundNode.Syntax != null);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 218916, 219013);

                    Binder
                    binder = binderOpt ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Binder?>(10919, 218932, 219012) ?? f_10919_218945_219012(this, f_10919_218964_219011(this, lowestBoundNode.Syntax)))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219031, 219082);

                    ImmutableArray<MethodSymbol>
                    candidateConstructors
                    = default(ImmutableArray<MethodSymbol>);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219102, 220380) || true) && (binder != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 219102, 220380);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219162, 219412);

                        var
                        instanceConstructors = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 219189, 219270) || ((f_10919_219189_219220(typeSymbolOpt) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 219189, 219270) && (object)f_10919_219232_219262(typeSymbolOpt) != null) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 219298, 219349)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 219377, 219411))) ? f_10919_219298_219349(f_10919_219298_219328(typeSymbolOpt)) : f_10919_219377_219411(typeSymbolOpt)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219436, 219486);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219508, 219681);

                        candidateConstructors = f_10919_219532_219680(binder, instanceConstructors, allowProtectedConstructorsOfBaseType: false, useSiteDiagnostics: ref useSiteDiagnostics);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 219705, 220220) || true) && ((DynAbs.Tracing.TraceSender.Conditional_F1(10919, 219709, 219739) || (((object)constructorOpt == null && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 219742, 219770)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 219773, 219820))) ? !candidateConstructors.Any() : !candidateConstructors.Contains(constructorOpt))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 219705, 220220);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220074, 220126);

                            f_10919_220074_220125(resultKind != LookupResultKind.Viable);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220152, 220197);

                            candidateConstructors = instanceConstructors;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 219705, 220220);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 219102, 220380);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 219102, 220380);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220302, 220361);

                        candidateConstructors = ImmutableArray<MethodSymbol>.Empty;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 219102, 220380);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220400, 220991) || true) && ((object)constructorOpt != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 220400, 220991);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220476, 220537);

                        f_10919_220476_220536(candidateConstructors.Contains(constructorOpt));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220559, 220615);

                        symbols = f_10919_220569_220614(constructorOpt);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 220400, 220991);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 220400, 220991);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220657, 220991) || true) && (candidateConstructors.Length > 0)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 220657, 220991);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220735, 220792);

                            symbols = f_10919_220745_220791(candidateConstructors);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220814, 220866);

                            f_10919_220814_220865(resultKind != LookupResultKind.Viable);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 220888, 220972);

                            resultKind = f_10919_220901_220971(resultKind, LookupResultKind.OverloadResolutionFailure);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 220657, 220991);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 220400, 220991);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221011, 221076);

                    memberGroup = candidateConstructors.Cast<MethodSymbol, Symbol>();
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 218564, 221091);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 218054, 221102);

                int
                f_10919_218428_218465(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218428, 218465);
                    return 0;
                }


                bool
                f_10919_218514_218546(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.IsInTree(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218514, 218546);
                    return return_v;
                }


                int
                f_10919_218480_218547(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218480, 218547);
                    return 0;
                }


                int
                f_10919_218631_218675(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218631, 218675);
                    return 0;
                }


                int
                f_10919_218964_219011(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.GetAdjustedNodePosition(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218964, 219011);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_218945_219012(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 218945, 219012);
                    return return_v;
                }


                bool
                f_10919_219189_219220(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type)
                {
                    var return_v = type.IsInterfaceType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 219189, 219220);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10919_219232_219262(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.ComImportCoClass;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 219232, 219262);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10919_219298_219328(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.ComImportCoClass;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 219298, 219328);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_219298_219349(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.InstanceConstructors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 219298, 219349);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_219377_219411(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.InstanceConstructors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 219377, 219411);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_219532_219680(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                constructors, bool
                allowProtectedConstructorsOfBaseType, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.FilterInaccessibleConstructors(constructors, allowProtectedConstructorsOfBaseType: allowProtectedConstructorsOfBaseType, useSiteDiagnostics: ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 219532, 219680);
                    return return_v;
                }


                int
                f_10919_220074_220125(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220074, 220125);
                    return 0;
                }


                int
                f_10919_220476_220536(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220476, 220536);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_220569_220614(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220569, 220614);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_220745_220791(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                from)
                {
                    var return_v = StaticCast<Symbol>.From(from);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220745, 220791);
                    return return_v;
                }


                int
                f_10919_220814_220865(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220814, 220865);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_220901_220971(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind1, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind2)
                {
                    var return_v = resultKind1.WorseResultKind(resultKind2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 220901, 220971);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 218054, 221102);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 218054, 221102);
            }
        }

        private ImmutableArray<IPropertySymbol> GetIndexerGroupSemanticSymbols(BoundExpression boundNode, Binder binderOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 221553, 222525);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221693, 221755);

                f_10919_221693_221754(binderOpt != null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 221706, 221753) || f_10919_221727_221753(this, boundNode.Syntax)));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221771, 221804);

                TypeSymbol
                type = f_10919_221789_221803(boundNode)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221820, 221962) || true) && (f_10919_221824_221851(type, null) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 221824, 221868) || f_10919_221855_221868(type)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 221820, 221962);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221902, 221947);

                    return ImmutableArray<IPropertySymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 221820, 221962);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 221978, 222069);

                Binder
                binder = binderOpt ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Binder?>(10919, 221994, 222068) ?? f_10919_222007_222068(this, f_10919_222026_222067(this, boundNode.Syntax)))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222083, 222133);

                var
                symbols = f_10919_222097_222132()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222147, 222263);

                f_10919_222147_222262(this, symbols, WellKnownMemberNames.Indexer, 0, binder, type, LookupOptions.MustBeInstance);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222279, 222428) || true) && (f_10919_222283_222296(symbols) == 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 222279, 222428);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222335, 222350);

                    f_10919_222335_222349(symbols);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222368, 222413);

                    return ImmutableArray<IPropertySymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 222279, 222428);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222444, 222514);

                return f_10919_222451_222513(f_10919_222484_222512(symbols));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 221553, 222525);

                bool
                f_10919_221727_221753(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.IsInTree(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 221727, 221753);
                    return return_v;
                }


                int
                f_10919_221693_221754(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 221693, 221754);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_221789_221803(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 221789, 221803);
                    return return_v;
                }


                bool
                f_10919_221824_221851(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                objA, object?
                objB)
                {
                    var return_v = ReferenceEquals((object?)objA, objB);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 221824, 221851);
                    return return_v;
                }


                bool
                f_10919_221855_221868(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 221855, 221868);
                    return return_v;
                }


                int
                f_10919_222026_222067(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.GetAdjustedNodePosition(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222026, 222067);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_222007_222068(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222007, 222068);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                f_10919_222097_222132()
                {
                    var return_v = ArrayBuilder<ISymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222097, 222132);
                    return return_v;
                }


                int
                f_10919_222147_222262(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                results, string
                name, int
                arity, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                container, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    this_param.AppendSymbolsWithNameAndArity(results, name, arity, binder, (Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol)container, options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222147, 222262);
                    return 0;
                }


                int
                f_10919_222283_222296(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 222283, 222296);
                    return return_v;
                }


                int
                f_10919_222335_222349(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222335, 222349);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_222484_222512(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222484, 222512);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IPropertySymbol>
                f_10919_222451_222513(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                symbols)
                {
                    var return_v = FilterOverriddenOrHiddenIndexers(symbols);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222451, 222513);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 221553, 222525);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 221553, 222525);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static ImmutableArray<IPropertySymbol> FilterOverriddenOrHiddenIndexers(ImmutableArray<ISymbol> symbols)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 222537, 224434);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222674, 222717);

                PooledHashSet<Symbol>
                hiddenSymbols = null
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222731, 223998);
                    foreach (ISymbol iSymbol in f_10919_222759_222766_I(symbols))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 222731, 223998);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222800, 222836);

                        Symbol
                        symbol = f_10919_222816_222835(iSymbol)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222854, 222950);

                        f_10919_222854_222949(f_10919_222867_222885(symbol), "Only indexers can have name " + WellKnownMemberNames.Indexer);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 222970, 223018);

                        PropertySymbol
                        indexer = (PropertySymbol)symbol
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223036, 223130);

                        OverriddenOrHiddenMembersResult
                        overriddenOrHiddenMembers = f_10919_223096_223129(indexer)
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223150, 223486);
                            foreach (Symbol overridden in f_10919_223180_223223_I(f_10919_223180_223223(overriddenOrHiddenMembers)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 223150, 223486);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223265, 223415) || true) && (hiddenSymbols == null)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 223265, 223415);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223340, 223392);

                                    hiddenSymbols = f_10919_223356_223391();
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 223265, 223415);
                                }
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223437, 223467);

                                f_10919_223437_223466(hiddenSymbols, overridden);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 223150, 223486);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 337);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 337);
                        }
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223659, 223983);
                            foreach (Symbol hidden in f_10919_223685_223724_I(f_10919_223685_223724(overriddenOrHiddenMembers)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 223659, 223983);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223766, 223916) || true) && (hiddenSymbols == null)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 223766, 223916);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223841, 223893);

                                    hiddenSymbols = f_10919_223857_223892();
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 223766, 223916);
                                }
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 223938, 223964);

                                f_10919_223938_223963(hiddenSymbols, hidden);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 223659, 223983);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 325);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 325);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 222731, 223998);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 1268);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 1268);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224014, 224072);

                var
                builder = f_10919_224028_224071()
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224088, 224335);
                    foreach (IPropertySymbol indexer in f_10919_224124_224131_I(symbols))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 224088, 224335);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224165, 224320) || true) && (hiddenSymbols == null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 224169, 224238) || !f_10919_224195_224238(hiddenSymbols, f_10919_224218_224237(indexer))))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 224165, 224320);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224280, 224301);

                            f_10919_224280_224300(builder, indexer);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 224165, 224320);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 224088, 224335);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 248);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 248);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224351, 224373);

                DynAbs.Tracing.TraceSender.TraceInvocationWrapper(() => DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(hiddenSymbols, 10919, 224351, 224372)?.Free(), 10919, 224365, 224372);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 224387, 224423);

                return f_10919_224394_224422(builder);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 222537, 224434);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_222816_222835(Microsoft.CodeAnalysis.ISymbol
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222816, 222835);
                    return return_v;
                }


                bool
                f_10919_222867_222885(Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = symbol.IsIndexer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222867, 222885);
                    return return_v;
                }


                int
                f_10919_222854_222949(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222854, 222949);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                f_10919_223096_223129(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                this_param)
                {
                    var return_v = this_param.OverriddenOrHiddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 223096, 223129);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223180_223223(Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                this_param)
                {
                    var return_v = this_param.OverriddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 223180, 223223);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.PooledHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223356_223391()
                {
                    var return_v = PooledHashSet<Symbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223356, 223391);
                    return return_v;
                }


                bool
                f_10919_223437_223466(Microsoft.CodeAnalysis.PooledObjects.PooledHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223437, 223466);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223180_223223_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223180, 223223);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223685_223724(Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                this_param)
                {
                    var return_v = this_param.HiddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 223685, 223724);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.PooledHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223857_223892()
                {
                    var return_v = PooledHashSet<Symbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223857, 223892);
                    return return_v;
                }


                bool
                f_10919_223938_223963(Microsoft.CodeAnalysis.PooledObjects.PooledHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223938, 223963);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_223685_223724_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 223685, 223724);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_222759_222766_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 222759, 222766);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.IPropertySymbol>
                f_10919_224028_224071()
                {
                    var return_v = ArrayBuilder<IPropertySymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224028, 224071);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol?
                f_10919_224218_224237(Microsoft.CodeAnalysis.IPropertySymbol
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224218, 224237);
                    return return_v;
                }


                bool
                f_10919_224195_224238(Microsoft.CodeAnalysis.PooledObjects.PooledHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                item)
                {
                    var return_v = this_param.Contains((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224195, 224238);
                    return return_v;
                }


                int
                f_10919_224280_224300(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.IPropertySymbol>
                this_param, Microsoft.CodeAnalysis.IPropertySymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224280, 224300);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_224124_224131_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224124, 224131);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IPropertySymbol>
                f_10919_224394_224422(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.IPropertySymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 224394, 224422);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 222537, 224434);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 222537, 224434);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static ImmutableArray<MethodSymbol> FilterOverriddenOrHiddenMethods(ImmutableArray<MethodSymbol> methods)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 227041, 228220);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227239, 227326) || true) && (methods.Length <= 1)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 227239, 227326);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227296, 227311);

                    return methods;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 227239, 227326);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227342, 227396);

                HashSet<Symbol>
                hiddenSymbols = f_10919_227374_227395()
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227410, 228100);
                    foreach (MethodSymbol method in f_10919_227442_227449_I(methods))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 227410, 228100);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227483, 227576);

                        OverriddenOrHiddenMembersResult
                        overriddenOrHiddenMembers = f_10919_227543_227575(method)
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227596, 227760);
                            foreach (Symbol overridden in f_10919_227626_227669_I(f_10919_227626_227669(overriddenOrHiddenMembers)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 227596, 227760);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227711, 227741);

                                f_10919_227711_227740(hiddenSymbols, overridden);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 227596, 227760);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 165);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 165);
                        }
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 227933, 228085);
                            foreach (Symbol hidden in f_10919_227959_227998_I(f_10919_227959_227998(overriddenOrHiddenMembers)))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 227933, 228085);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 228040, 228066);

                                f_10919_228040_228065(hiddenSymbols, hidden);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 227933, 228085);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 153);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 153);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 227410, 228100);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 691);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 691);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 228116, 228209);

                return methods.WhereAsArray((m, hiddenSymbols) => !hiddenSymbols.Contains(m), hiddenSymbols);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 227041, 228220);

                System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_227374_227395()
                {
                    var return_v = new System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.CSharp.Symbol>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 227374, 227395);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                f_10919_227543_227575(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.OverriddenOrHiddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 227543, 227575);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_227626_227669(Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                this_param)
                {
                    var return_v = this_param.OverriddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 227626, 227669);
                    return return_v;
                }


                bool
                f_10919_227711_227740(System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 227711, 227740);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_227626_227669_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 227626, 227669);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_227959_227998(Microsoft.CodeAnalysis.CSharp.Symbols.OverriddenOrHiddenMembersResult
                this_param)
                {
                    var return_v = this_param.HiddenMembers;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 227959, 227998);
                    return return_v;
                }


                bool
                f_10919_228040_228065(System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbol
                item)
                {
                    var return_v = this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 228040, 228065);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_227959_227998_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 227959, 227998);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_227442_227449_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 227442, 227449);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 227041, 228220);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 227041, 228220);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        // Get the symbols and possible method group associated with a method group bound node, as
        // they should be exposed through GetSemanticInfo.
        // NB: It is not safe to pass a null binderOpt during speculative binding.
        // 
        // If the parent node of the method group syntax node provides information (such as arguments) 
        // that allows us to return more specific symbols (a specific overload or applicable candidates)
        // we return these. The complete set of symbols of the method group is then returned in methodGroup parameter.
        private ImmutableArray<Symbol> GetMethodGroupSemanticSymbols(
            BoundMethodGroup boundNode,
            BoundNode boundNodeForSyntacticParent,
            Binder binderOpt,
            out LookupResultKind resultKind,
            out bool isDynamic,
            out ImmutableArray<Symbol> methodGroup)
        {
            Debug.Assert(binderOpt != null || IsInTree(boundNode.Syntax));

            ImmutableArray<Symbol> symbols = ImmutableArray<Symbol>.Empty;

            resultKind = boundNode.ResultKind;
            if (resultKind == LookupResultKind.Empty)
            {
                resultKind = LookupResultKind.Viable;
            }

            isDynamic = false;

            // The method group needs filtering.
            Binder binder = binderOpt ?? GetEnclosingBinder(GetAdjustedNodePosition(boundNode.Syntax));
            methodGroup = GetReducedAndFilteredMethodGroupSymbols(binder, boundNode).Cast<MethodSymbol, Symbol>();

            // We want to get the actual node chosen by overload resolution, if possible. 
            if (boundNodeForSyntacticParent != null)
            {
                switch (boundNodeForSyntacticParent.Kind)
                {
                    case BoundKind.Call:
                        // If we are looking for info on M in M(args), we want the symbol that overload resolution
                        // chose for M.
                        var call = (BoundCall)boundNodeForSyntacticParent;
                        InvocationExpressionSyntax invocation = call.Syntax as InvocationExpressionSyntax;
                        if (invocation != null && invocation.Expression.SkipParens() == ((ExpressionSyntax)boundNode.Syntax).SkipParens() && (object)call.Method != null)
                        {
                            if (call.OriginalMethodsOpt.IsDefault)
                            {
                                // Overload resolution succeeded.
                                symbols = CreateReducedExtensionMethodIfPossible(call);
                                resultKind = LookupResultKind.Viable;
                            }
                            else
                            {
                                resultKind = call.ResultKind.WorseResultKind(LookupResultKind.OverloadResolutionFailure);
                                symbols = StaticCast<Symbol>.From(CreateReducedExtensionMethodsFromOriginalsIfNecessary(call, Compilation));
                            }
                        }
                        break;

                    case BoundKind.DelegateCreationExpression:
                        // If we are looking for info on "M" in "new Action(M)" 
                        // we want to get the symbol that overload resolution chose for M, not the whole method group M.
                        var delegateCreation = (BoundDelegateCreationExpression)boundNodeForSyntacticParent;
                        if (delegateCreation.Argument == boundNode && (object)delegateCreation.MethodOpt != null)
                        {
                            symbols = CreateReducedExtensionMethodIfPossible(delegateCreation, boundNode.ReceiverOpt);
                        }
                        break;

                    case BoundKind.Conversion:
                        // If we are looking for info on "M" in "(Action)M" 
                        // we want to get the symbol that overload resolution chose for M, not the whole method group M.
                        var conversion = (BoundConversion)boundNodeForSyntacticParent;

                        var method = conversion.SymbolOpt;
                        if ((object)method != null)
                        {
                            Debug.Assert(conversion.ConversionKind == ConversionKind.MethodGroup);

                            if (conversion.IsExtensionMethod)
                            {
                                method = ReducedExtensionMethodSymbol.Create(method);
                            }

                            symbols = ImmutableArray.Create((Symbol)method);
                            resultKind = conversion.ResultKind;
                        }
                        else
                        {
                            goto default;
                        }

                        break;

                    case BoundKind.DynamicInvocation:
                        var dynamicInvocation = (BoundDynamicInvocation)boundNodeForSyntacticParent;
                        symbols = dynamicInvocation.ApplicableMethods.Cast<MethodSymbol, Symbol>();
                        isDynamic = true;
                        break;

                    case BoundKind.BadExpression:
                        // If the bad expression has symbol(s) from this method group, it better indicates any problems.
                        ImmutableArray<Symbol> myMethodGroup = methodGroup;

                        symbols = ((BoundBadExpression)boundNodeForSyntacticParent).Symbols.WhereAsArray((sym, myMethodGroup) => myMethodGroup.Contains(sym), myMethodGroup);
                        if (symbols.Any())
                        {
                            resultKind = ((BoundBadExpression)boundNodeForSyntacticParent).ResultKind;
                        }
                        break;

                    case BoundKind.NameOfOperator:
                        symbols = methodGroup;
                        resultKind = resultKind.WorseResultKind(LookupResultKind.MemberGroup);
                        break;

                    default:
                        symbols = methodGroup;
                        if (symbols.Length > 0)
                        {
                            resultKind = resultKind.WorseResultKind(LookupResultKind.OverloadResolutionFailure);
                        }
                        break;
                }
            }
            else if (methodGroup.Length == 1 && !boundNode.HasAnyErrors)
            {
                // During speculative binding, there won't be a parent bound node. The parent bound
                // node may also be absent if the syntactic parent has errors or if one is simply
                // not specified (see SemanticModel.GetSymbolInfoForNode). However, if there's exactly
                // one candidate, then we should probably succeed.

                symbols = methodGroup;
                if (symbols.Length > 0)
                {
                    resultKind = resultKind.WorseResultKind(LookupResultKind.OverloadResolutionFailure);
                }
            }

            if (!symbols.Any())
            {
                // If we didn't find a better set of symbols, then assume this is a method group that didn't
                // get resolved. Return all members of the method group, with a resultKind of OverloadResolutionFailure
                // (unless the method group already has a worse result kind).
                symbols = methodGroup;
                if (!isDynamic && resultKind > LookupResultKind.OverloadResolutionFailure)
                {
                    resultKind = LookupResultKind.OverloadResolutionFailure;
                }
            }

            return symbols;
        }

        private ImmutableArray<Symbol> GetPropertyGroupSemanticSymbols(
                    BoundPropertyGroup boundNode,
                    BoundNode boundNodeForSyntacticParent,
                    Binder binderOpt,
                    out LookupResultKind resultKind,
                    out ImmutableArray<Symbol> propertyGroup)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 236281, 240605);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236596, 236658);

                f_10919_236596_236657(binderOpt != null || (DynAbs.Tracing.TraceSender.Expression_False(10919, 236609, 236656) || f_10919_236630_236656(this, boundNode.Syntax)));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236674, 236736);

                ImmutableArray<Symbol>
                symbols = ImmutableArray<Symbol>.Empty
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236752, 236786);

                resultKind = f_10919_236765_236785(boundNode);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236800, 236926) || true) && (resultKind == LookupResultKind.Empty)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 236800, 236926);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236874, 236911);

                    resultKind = LookupResultKind.Viable;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 236800, 236926);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 236994, 237062);

                propertyGroup = boundNode.Properties.Cast<PropertySymbol, Symbol>();

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237170, 239946) || true) && (boundNodeForSyntacticParent != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237170, 239946);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237243, 239290);

                    switch (f_10919_237251_237283(boundNodeForSyntacticParent))
                    {

                        case BoundKind.IndexerAccess:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237243, 239290);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237537, 237599);

                            var
                            indexer = (BoundIndexerAccess)boundNodeForSyntacticParent
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237625, 237693);

                            var
                            elementAccess = indexer.Syntax as ElementAccessExpressionSyntax
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237719, 238564) || true) && (elementAccess != null && (DynAbs.Tracing.TraceSender.Expression_True(10919, 237723, 237792) && f_10919_237748_237772(elementAccess) == boundNode.Syntax) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 237723, 237827) && (object)f_10919_237804_237819(indexer) != null))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237719, 238564);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 237885, 238537) || true) && (indexer.OriginalIndexersOpt.IsDefault)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237885, 238537);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238059, 238116);

                                    symbols = f_10919_238069_238115(f_10919_238099_238114(indexer));
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238150, 238187);

                                    resultKind = LookupResultKind.Viable;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237885, 238537);
                                }

                                else

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237885, 238537);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238317, 238409);

                                    resultKind = f_10919_238330_238408(f_10919_238330_238348(indexer), LookupResultKind.OverloadResolutionFailure);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238443, 238506);

                                    symbols = f_10919_238453_238505(f_10919_238477_238504(indexer));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237885, 238537);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237719, 238564);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10919, 238590, 238596);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237243, 239290);

                        case BoundKind.BadExpression:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237243, 239290);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238799, 238854);

                            ImmutableArray<Symbol>
                            myPropertyGroup = propertyGroup
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 238882, 239037);

                            symbols = ((BoundBadExpression)boundNodeForSyntacticParent).Symbols.WhereAsArray((sym, myPropertyGroup) => myPropertyGroup.Contains(sym), myPropertyGroup);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 239063, 239239) || true) && (symbols.Any())
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 239063, 239239);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 239138, 239212);

                                resultKind = f_10919_239151_239211(((BoundBadExpression)boundNodeForSyntacticParent));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 239063, 239239);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10919, 239265, 239271);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237243, 239290);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237170, 239946);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 237170, 239946);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 239324, 239946) || true) && (propertyGroup.Length == 1 && (DynAbs.Tracing.TraceSender.Expression_True(10919, 239328, 239380) && f_10919_239357_239380_M(!boundNode.HasAnyErrors)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 239324, 239946);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 239907, 239931);

                        symbols = propertyGroup;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 239324, 239946);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 237170, 239946);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 239962, 240563) || true) && (!symbols.Any())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 239962, 240563);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 240330, 240354);

                    symbols = propertyGroup;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 240372, 240548) || true) && (resultKind > LookupResultKind.OverloadResolutionFailure)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 240372, 240548);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 240473, 240529);

                        resultKind = LookupResultKind.OverloadResolutionFailure;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 240372, 240548);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 239962, 240563);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 240579, 240594);

                return symbols;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 236281, 240605);

                bool
                f_10919_236630_236656(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.IsInTree(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 236630, 236656);
                    return return_v;
                }


                int
                f_10919_236596_236657(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 236596, 236657);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_236765_236785(Microsoft.CodeAnalysis.CSharp.BoundPropertyGroup
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 236765, 236785);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10919_237251_237283(Microsoft.CodeAnalysis.CSharp.BoundNode
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 237251, 237283);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10919_237748_237772(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 237748, 237772);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10919_237804_237819(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.Indexer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 237804, 237819);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10919_238099_238114(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.Indexer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 238099, 238114);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_238069_238115(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 238069, 238115);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_238330_238348(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 238330, 238348);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_238330_238408(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind1, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind2)
                {
                    var return_v = resultKind1.WorseResultKind(resultKind2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 238330, 238408);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol>
                f_10919_238477_238504(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.OriginalIndexersOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 238477, 238504);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_238453_238505(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol>
                from)
                {
                    var return_v = StaticCast<Symbol>.From(from);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 238453, 238505);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_239151_239211(Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 239151, 239211);
                    return return_v;
                }


                bool
                f_10919_239357_239380_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 239357, 239380);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 236281, 240605);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 236281, 240605);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private SymbolInfo GetNamedArgumentSymbolInfo(IdentifierNameSyntax identifierNameSyntax, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 240868, 244727);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 241018, 241086);

                f_10919_241018_241085(f_10919_241031_241084(identifierNameSyntax));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 241747, 241811);

                string
                argumentName = identifierNameSyntax.Identifier.ValueText
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 241825, 241895) || true) && (f_10919_241829_241848(argumentName) == 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 241825, 241895);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 241872, 241895);

                    return SymbolInfo.None;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 241825, 241895);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242062, 242118);

                var
                parent3 = f_10919_242076_242117(f_10919_242076_242110(f_10919_242076_242103(identifierNameSyntax)))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242132, 242543) || true) && (f_10919_242136_242178(parent3, SyntaxKind.TupleExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 242132, 242543);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242212, 242283);

                    var
                    tupleArgument = (ArgumentSyntax)f_10919_242248_242282(f_10919_242248_242275(identifierNameSyntax))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242301, 242372);

                    var
                    tupleElement = f_10919_242320_242371(this, tupleArgument, cancellationToken)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242390, 242528);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 242397, 242425) || (((object)tupleElement == null && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 242428, 242443)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 242446, 242527))) ? SymbolInfo.None : f_10919_242446_242527(tupleElement, ImmutableArray<ISymbol>.Empty, CandidateReason.None);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 242132, 242543);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242559, 242816) || true) && (f_10919_242563_242611(parent3, SyntaxKind.PropertyPatternClause) || (DynAbs.Tracing.TraceSender.Expression_False(10919, 242563, 242665) || f_10919_242615_242665(parent3, SyntaxKind.PositionalPatternClause)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 242559, 242816);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242699, 242801);

                    return f_10919_242706_242800(this, identifierNameSyntax, SymbolInfoOptions.DefaultOptions, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 242559, 242816);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242832, 242887);

                CSharpSyntaxNode
                containingInvocation = f_10919_242872_242886(parent3)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 242901, 243079);

                SymbolInfo
                containingInvocationInfo = f_10919_242939_243078(this, containingInvocation, SymbolInfoOptions.PreferConstructorsToType | SymbolInfoOptions.ResolveAliases, cancellationToken)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243095, 244716) || true) && ((object)containingInvocationInfo.Symbol != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 243095, 244716);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243180, 243298);

                    ParameterSymbol
                    param = f_10919_243204_243297(f_10919_243223_243282(f_10919_243223_243266(containingInvocationInfo.Symbol)), argumentName)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243316, 243458);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 243323, 243344) || (((object)param == null && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 243347, 243362)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 243365, 243457))) ? SymbolInfo.None : f_10919_243365_243457(f_10919_243380_243403(param), ImmutableArray<ISymbol>.Empty, CandidateReason.None);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 243095, 244716);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 243095, 244716);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243524, 243574);

                    var
                    symbols = f_10919_243538_243573()
                    ;
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243594, 244356);
                        foreach (ISymbol invocationSym in f_10919_243628_243669_I(containingInvocationInfo.CandidateSymbols))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 243594, 244356);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243711, 244058);

                            switch (f_10919_243719_243737(invocationSym))
                            {

                                case SymbolKind.Method:
                                case SymbolKind.Property:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 243711, 244058);
                                    DynAbs.Tracing.TraceSender.TraceBreak(10919, 243891, 243897);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 243711, 244058);

                                default:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 243711, 244058);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 243987, 243996);

                                    continue;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 243711, 244058);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244080, 244180);

                            ParameterSymbol
                            param = f_10919_244104_244179(f_10919_244123_244164(f_10919_244123_244148(invocationSym)), argumentName)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244202, 244337) || true) && ((object)param != null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 244202, 244337);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244277, 244314);

                                f_10919_244277_244313(symbols, f_10919_244289_244312(param));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 244202, 244337);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 243594, 244356);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 763);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 763);
                    }
                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244376, 244701) || true) && (f_10919_244380_244393(symbols) == 0)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 244376, 244701);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244440, 244455);

                        f_10919_244440_244454(symbols);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244477, 244500);

                        return SymbolInfo.None;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 244376, 244701);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 244376, 244701);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244582, 244682);

                        return f_10919_244589_244681(null, f_10919_244610_244638(symbols), containingInvocationInfo.CandidateReason);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 244376, 244701);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 243095, 244716);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 240868, 244727);

                bool
                f_10919_241031_241084(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                node)
                {
                    var return_v = SyntaxFacts.IsNamedArgumentName((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 241031, 241084);
                    return return_v;
                }


                int
                f_10919_241018_241085(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 241018, 241085);
                    return 0;
                }


                int
                f_10919_241829_241848(string
                this_param)
                {
                    var return_v = this_param.Length;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 241829, 241848);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_242076_242103(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242076, 242103);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_242076_242110(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242076, 242110);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_242076_242117(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242076, 242117);
                    return return_v;
                }


                bool
                f_10919_242136_242178(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242136, 242178);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_242248_242275(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242248, 242275);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_242248_242282(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242248, 242282);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_242320_242371(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax
                declaratorSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declaratorSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242320, 242371);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_242446_242527(Microsoft.CodeAnalysis.ISymbol
                symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                candidateSymbols, Microsoft.CodeAnalysis.CandidateReason
                candidateReason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol, candidateSymbols, candidateReason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242446, 242527);
                    return return_v;
                }


                bool
                f_10919_242563_242611(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242563, 242611);
                    return return_v;
                }


                bool
                f_10919_242615_242665(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242615, 242665);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_242706_242800(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242706, 242800);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_242872_242886(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 242872, 242886);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_242939_243078(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                node, Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.SymbolInfoOptions
                options, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoWorker(node, options, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 242939, 243078);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_243223_243266(Microsoft.CodeAnalysis.ISymbol
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243223, 243266);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                f_10919_243223_243282(Microsoft.CodeAnalysis.CSharp.Symbol
                member)
                {
                    var return_v = member.GetParameters();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243223, 243282);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                f_10919_243204_243297(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                parameters, string
                argumentName)
                {
                    var return_v = FindNamedParameter(parameters, argumentName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243204, 243297);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IParameterSymbol?
                f_10919_243380_243403(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243380, 243403);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_243365_243457(Microsoft.CodeAnalysis.IParameterSymbol
                symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                candidateSymbols, Microsoft.CodeAnalysis.CandidateReason
                candidateReason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo((Microsoft.CodeAnalysis.ISymbol)symbol, candidateSymbols, candidateReason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243365, 243457);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                f_10919_243538_243573()
                {
                    var return_v = ArrayBuilder<ISymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243538, 243573);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_243719_243737(Microsoft.CodeAnalysis.ISymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 243719, 243737);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_244123_244148(Microsoft.CodeAnalysis.ISymbol
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244123, 244148);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                f_10919_244123_244164(Microsoft.CodeAnalysis.CSharp.Symbol
                member)
                {
                    var return_v = member.GetParameters();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244123, 244164);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                f_10919_244104_244179(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                parameters, string
                argumentName)
                {
                    var return_v = FindNamedParameter(parameters, argumentName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244104, 244179);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IParameterSymbol?
                f_10919_244289_244312(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244289, 244312);
                    return return_v;
                }


                int
                f_10919_244277_244313(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param, Microsoft.CodeAnalysis.IParameterSymbol
                item)
                {
                    this_param.Add((Microsoft.CodeAnalysis.ISymbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244277, 244313);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_243628_243669_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 243628, 243669);
                    return return_v;
                }


                int
                f_10919_244380_244393(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 244380, 244393);
                    return return_v;
                }


                int
                f_10919_244440_244454(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244440, 244454);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_244610_244638(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.ISymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244610, 244638);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_244589_244681(Microsoft.CodeAnalysis.ISymbol?
                symbol, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                candidateSymbols, Microsoft.CodeAnalysis.CandidateReason
                candidateReason)
                {
                    var return_v = new Microsoft.CodeAnalysis.SymbolInfo(symbol, candidateSymbols, candidateReason);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 244589, 244681);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 240868, 244727);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 240868, 244727);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static ParameterSymbol FindNamedParameter(ImmutableArray<ParameterSymbol> parameters, string argumentName)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 244846, 245183);
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 244985, 245144);
                    foreach (ParameterSymbol param in f_10919_245019_245029_I(parameters))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 244985, 245144);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245063, 245129) || true) && (f_10919_245067_245077(param) == argumentName)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 245063, 245129);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245116, 245129);

                            return param;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 245063, 245129);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 244985, 245144);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 160);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 160);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245160, 245172);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 244846, 245183);

                string
                f_10919_245067_245077(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 245067, 245077);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                f_10919_245019_245029_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 245019, 245029);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 244846, 245183);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 244846, 245183);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static ImmutableArray<MethodSymbol> GetReducedAndFilteredMethodGroupSymbols(Binder binder, BoundMethodGroup node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 245195, 249634);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245342, 245397);

                var
                methods = f_10919_245356_245396()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245411, 245474);

                var
                filteredMethods = f_10919_245433_245473()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245488, 245528);

                var
                resultKind = LookupResultKind.Empty
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245542, 245584);

                var
                typeArguments = f_10919_245562_245583(node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245639, 247327) || true) && (node.Methods.Any())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 245639, 247327);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 245991, 246085);

                    ImmutableArray<MethodSymbol>
                    nonHiddenMethods = f_10919_246039_246084(f_10919_246071_246083(node))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246103, 246140);

                    f_10919_246103_246139(nonHiddenMethods.Any());
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246213, 246680);
                        foreach (var method in f_10919_246236_246252_I(nonHiddenMethods))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 246213, 246680);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246294, 246661);

                            f_10919_246294_246660(methods, filteredMethods, f_10919_246437_246502(f_10919_246460_246475(node), method, f_10919_246485_246501(node)), typeArguments, null, ref resultKind, f_10919_246641_246659(binder));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 246213, 246680);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 468);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 468);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 245639, 247327);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 245639, 247327);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246746, 246785);

                    var
                    otherSymbol = f_10919_246764_246784(node)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246803, 247312) || true) && (((object)otherSymbol != null) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 246807, 246879) && (f_10919_246841_246857(otherSymbol) == SymbolKind.Method)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 246803, 247312);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 246921, 247293);

                        f_10919_246921_247292(methods, filteredMethods, f_10919_247064_247134(f_10919_247087_247102(node), otherSymbol, f_10919_247117_247133(node)), typeArguments, null, ref resultKind, f_10919_247273_247291(binder));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 246803, 247312);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 245639, 247327);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247343, 247375);

                var
                receiver = f_10919_247358_247374(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247389, 247410);

                var
                name = f_10919_247400_247409(node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247473, 249534) || true) && (f_10919_247477_247504(node))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 247473, 249534);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247538, 247569);

                    f_10919_247538_247568(receiver != null);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247587, 247597);

                    int
                    arity
                    = default(int);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247615, 247637);

                    LookupOptions
                    options
                    = default(LookupOptions);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247655, 247986) || true) && (typeArguments.IsDefault)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 247655, 247986);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247724, 247734);

                        arity = 0;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247756, 247802);

                        options = LookupOptions.AllMethodsOnArityZero;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 247655, 247986);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 247655, 247986);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247884, 247913);

                        arity = typeArguments.Length;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 247935, 247967);

                        options = LookupOptions.Default;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 247655, 247986);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248006, 248069);

                    binder = f_10919_248015_248068(binder, BinderFlags.SemanticModel);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248087, 249519);
                        foreach (var scope in f_10919_248109_248142_I(f_10919_248109_248142(binder)))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 248087, 249519);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248184, 248248);

                            var
                            extensionMethods = f_10919_248207_248247()
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248270, 248301);

                            var
                            otherBinder = scope.Binder
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248323, 248770);

                            f_10919_248323_248769(otherBinder, scope.SearchUsingsNotNamespace, extensionMethods, name, arity, options, originalBinder: binder);
                            try
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248794, 249452);
                                foreach (var method in f_10919_248817_248833_I(extensionMethods))
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 248794, 249452);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248883, 248933);

                                    HashSet<DiagnosticInfo>
                                    useSiteDiagnostics = null
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 248959, 249429);

                                    f_10919_248959_249428(methods, filteredMethods, f_10919_249114_249245(binder, method, arity, options, accessThroughType: null, diagnose: false, useSiteDiagnostics: ref useSiteDiagnostics), typeArguments, f_10919_249320_249333(receiver), ref resultKind, f_10919_249409_249427(binder));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 248794, 249452);
                                }
                            }
                            catch (System.Exception)
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 659);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 659);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 249476, 249500);

                            f_10919_249476_249499(
                                                extensionMethods);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 248087, 249519);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 1433);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 1433);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 247473, 249534);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 249550, 249565);

                f_10919_249550_249564(
                            methods);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 249579, 249623);

                return f_10919_249586_249622(filteredMethods);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 245195, 249634);

                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_245356_245396()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 245356, 245396);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_245433_245473()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 245433, 245473);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                f_10919_245562_245583(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.TypeArgumentsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 245562, 245583);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_246071_246083(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.Methods;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246071, 246083);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_246039_246084(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods)
                {
                    var return_v = FilterOverriddenOrHiddenMethods(methods);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246039, 246084);
                    return return_v;
                }


                int
                f_10919_246103_246139(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246103, 246139);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_246460_246475(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246460, 246475);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticInfo?
                f_10919_246485_246501(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.LookupError;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246485, 246501);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                f_10919_246437_246502(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticInfo?
                error)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SingleLookupResult(kind, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol, error);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246437, 246502);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_246641_246659(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246641, 246659);
                    return return_v;
                }


                int
                f_10919_246294_246660(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                filteredMethods, Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                singleResult, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                receiverType, ref Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    MergeReducedAndFilteredMethodGroupSymbol(methods, filteredMethods, singleResult, typeArguments, receiverType, ref resultKind, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246294, 246660);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_246236_246252_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246236, 246252);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_246764_246784(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.LookupSymbolOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246764, 246784);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_246841_246857(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 246841, 246857);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10919_247087_247102(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247087, 247102);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticInfo?
                f_10919_247117_247133(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.LookupError;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247117, 247133);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                f_10919_247064_247134(Microsoft.CodeAnalysis.CSharp.LookupResultKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol, Microsoft.CodeAnalysis.DiagnosticInfo?
                error)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SingleLookupResult(kind, symbol, error);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 247064, 247134);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_247273_247291(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247273, 247291);
                    return return_v;
                }


                int
                f_10919_246921_247292(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                filteredMethods, Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                singleResult, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                receiverType, ref Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    MergeReducedAndFilteredMethodGroupSymbol(methods, filteredMethods, singleResult, typeArguments, receiverType, ref resultKind, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 246921, 247292);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10919_247358_247374(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247358, 247374);
                    return return_v;
                }


                string
                f_10919_247400_247409(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247400, 247409);
                    return return_v;
                }


                bool
                f_10919_247477_247504(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                this_param)
                {
                    var return_v = this_param.SearchExtensionMethods;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 247477, 247504);
                    return return_v;
                }


                int
                f_10919_247538_247568(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 247538, 247568);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_248015_248068(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinderFlags
                flags)
                {
                    var return_v = this_param.WithAdditionalFlags(flags);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248015, 248068);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ExtensionMethodScopes
                f_10919_248109_248142(Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.ExtensionMethodScopes(binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248109, 248142);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_248207_248247()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248207, 248247);
                    return return_v;
                }


                int
                f_10919_248323_248769(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, bool
                searchUsingsNotNamespace, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, string
                name, int
                arity, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    this_param.GetCandidateExtensionMethods(searchUsingsNotNamespace, methods, name, arity, options, originalBinder: originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248323, 248769);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                f_10919_249114_249245(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, int
                arity, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                accessThroughType, bool
                diagnose, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.CheckViability((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, arity, options, accessThroughType: accessThroughType, diagnose: diagnose, useSiteDiagnostics: ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 249114, 249245);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_249320_249333(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 249320, 249333);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_249409_249427(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 249409, 249427);
                    return return_v;
                }


                int
                f_10919_248959_249428(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                filteredMethods, Microsoft.CodeAnalysis.CSharp.SingleLookupResult
                singleResult, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                receiverType, ref Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    MergeReducedAndFilteredMethodGroupSymbol(methods, filteredMethods, singleResult, typeArguments, receiverType, ref resultKind, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248959, 249428);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_248817_248833_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248817, 248833);
                    return return_v;
                }


                int
                f_10919_249476_249499(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 249476, 249499);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.ExtensionMethodScopes
                f_10919_248109_248142_I(Microsoft.CodeAnalysis.CSharp.ExtensionMethodScopes
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 248109, 248142);
                    return return_v;
                }


                int
                f_10919_249550_249564(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 249550, 249564);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_249586_249622(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 249586, 249622);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 245195, 249634);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 245195, 249634);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool AddReducedAndFilteredMethodGroupSymbol(
                    ArrayBuilder<MethodSymbol> methods,
                    ArrayBuilder<MethodSymbol> filteredMethods,
                    MethodSymbol method,
                    ImmutableArray<TypeWithAnnotations> typeArguments,
                    TypeSymbol receiverType,
                    CSharpCompilation compilation)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 249958, 251316);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250328, 250359);

                MethodSymbol
                constructedMethod
                = default(MethodSymbol);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250373, 250708) || true) && (f_10919_250377_250408_M(!typeArguments.IsDefaultOrEmpty) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 250377, 250448) && f_10919_250412_250424(method) == typeArguments.Length))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 250373, 250708);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250482, 250534);

                    constructedMethod = f_10919_250502_250533(method, typeArguments);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250552, 250600);

                    f_10919_250552_250599((object)constructedMethod != null);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 250373, 250708);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 250373, 250708);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250666, 250693);

                    constructedMethod = method;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 250373, 250708);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250724, 251021) || true) && ((object)receiverType != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 250724, 251021);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250790, 250877);

                    constructedMethod = f_10919_250810_250876(constructedMethod, receiverType, compilation);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250895, 251006) || true) && ((object)constructedMethod == null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 250895, 251006);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 250974, 250987);

                        return false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 250895, 251006);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 250724, 251021);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251081, 251190) || true) && (f_10919_251085_251128(filteredMethods, constructedMethod))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 251081, 251190);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251162, 251175);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 251081, 251190);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251206, 251226);

                f_10919_251206_251225(
                            methods, method);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251240, 251279);

                f_10919_251240_251278(filteredMethods, constructedMethod);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251293, 251305);

                return true;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 249958, 251316);

                bool
                f_10919_250377_250408_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 250377, 250408);
                    return return_v;
                }


                int
                f_10919_250412_250424(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.Arity;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 250412, 250424);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_250502_250533(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments)
                {
                    var return_v = this_param.Construct(typeArguments);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 250502, 250533);
                    return return_v;
                }


                int
                f_10919_250552_250599(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 250552, 250599);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_250810_250876(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = this_param.ReduceExtensionMethod(receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 250810, 250876);
                    return return_v;
                }


                bool
                f_10919_251085_251128(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    var return_v = this_param.Contains(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251085, 251128);
                    return return_v;
                }


                int
                f_10919_251206_251225(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251206, 251225);
                    return 0;
                }


                int
                f_10919_251240_251278(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251240, 251278);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 249958, 251316);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 249958, 251316);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void MergeReducedAndFilteredMethodGroupSymbol(
                    ArrayBuilder<MethodSymbol> methods,
                    ArrayBuilder<MethodSymbol> filteredMethods,
                    SingleLookupResult singleResult,
                    ImmutableArray<TypeWithAnnotations> typeArguments,
                    TypeSymbol receiverType,
                    ref LookupResultKind resultKind,
                    CSharpCompilation compilation)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 251328, 252886);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251758, 251816);

                f_10919_251758_251815(singleResult.Kind != LookupResultKind.Empty);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251830, 251880);

                f_10919_251830_251879((object)singleResult.Symbol != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251894, 251954);

                f_10919_251894_251953(f_10919_251907_251931(singleResult.Symbol) == SymbolKind.Method);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 251970, 252005);

                var
                singleKind = singleResult.Kind
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252019, 252309) || true) && (resultKind > singleKind)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 252019, 252309);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252080, 252087);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 252019, 252309);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 252019, 252309);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252121, 252309) || true) && (resultKind < singleKind)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 252121, 252309);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252182, 252198);

                        f_10919_252182_252197(methods);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252216, 252240);

                        f_10919_252216_252239(filteredMethods);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252258, 252294);

                        resultKind = LookupResultKind.Empty;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 252121, 252309);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 252019, 252309);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252325, 252372);

                var
                method = (MethodSymbol)singleResult.Symbol
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252386, 252715) || true) && (f_10919_252390_252504(methods, filteredMethods, method, typeArguments, receiverType, compilation))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 252386, 252715);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252538, 252570);

                    f_10919_252538_252569(f_10919_252551_252564(methods) > 0);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252588, 252700) || true) && (resultKind < singleKind)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 252588, 252700);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252657, 252681);

                        resultKind = singleKind;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 252588, 252700);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 252386, 252715);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252731, 252808);

                f_10919_252731_252807((f_10919_252745_252758(methods) == 0) == (resultKind == LookupResultKind.Empty));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 252822, 252875);

                f_10919_252822_252874(f_10919_252835_252848(methods) == f_10919_252852_252873(filteredMethods));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 251328, 252886);

                int
                f_10919_251758_251815(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251758, 251815);
                    return 0;
                }


                int
                f_10919_251830_251879(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251830, 251879);
                    return 0;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10919_251907_251931(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 251907, 251931);
                    return return_v;
                }


                int
                f_10919_251894_251953(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 251894, 251953);
                    return 0;
                }


                int
                f_10919_252182_252197(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    this_param.Clear();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252182, 252197);
                    return 0;
                }


                int
                f_10919_252216_252239(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    this_param.Clear();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252216, 252239);
                    return 0;
                }


                bool
                f_10919_252390_252504(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                filteredMethods, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = AddReducedAndFilteredMethodGroupSymbol(methods, filteredMethods, method, typeArguments, receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252390, 252504);
                    return return_v;
                }


                int
                f_10919_252551_252564(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 252551, 252564);
                    return return_v;
                }


                int
                f_10919_252538_252569(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252538, 252569);
                    return 0;
                }


                int
                f_10919_252745_252758(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 252745, 252758);
                    return return_v;
                }


                int
                f_10919_252731_252807(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252731, 252807);
                    return 0;
                }


                int
                f_10919_252835_252848(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 252835, 252848);
                    return return_v;
                }


                int
                f_10919_252852_252873(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 252852, 252873);
                    return return_v;
                }


                int
                f_10919_252822_252874(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 252822, 252874);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 251328, 252886);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 251328, 252886);
            }
        }

        private static ImmutableArray<MethodSymbol> CreateReducedExtensionMethodsFromOriginalsIfNecessary(BoundCall call, CSharpCompilation compilation)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 253164, 254614);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253333, 253371);

                var
                methods = f_10919_253347_253370(call)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253385, 253421);

                TypeSymbol
                extensionThisType = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253435, 253468);

                f_10919_253435_253467(f_10919_253448_253466_M(!methods.IsDefault));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253484, 254055) || true) && (f_10919_253488_253517(call))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 253484, 254055);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253716, 253972) || true) && (f_10919_253720_253736(call) != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 253716, 253972);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253786, 253828);

                        extensionThisType = f_10919_253806_253827(f_10919_253806_253822(call));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 253716, 253972);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 253716, 253972);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253910, 253953);

                        extensionThisType = f_10919_253930_253952(f_10919_253930_253944(call)[0]);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 253716, 253972);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 253992, 254040);

                    f_10919_253992_254039((object)extensionThisType != null);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 253484, 254055);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254071, 254132);

                var
                methodBuilder = f_10919_254091_254131()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254146, 254215);

                var
                filteredMethodBuilder = f_10919_254174_254214()
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254229, 254504);
                    foreach (var method in f_10919_254252_254292_I(f_10919_254252_254292(methods)))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 254229, 254504);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254326, 254489);

                        f_10919_254326_254488(methodBuilder, filteredMethodBuilder, method, default(ImmutableArray<TypeWithAnnotations>), extensionThisType, compilation);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 254229, 254504);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10919, 1, 276);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10919, 1, 276);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254518, 254539);

                f_10919_254518_254538(methodBuilder);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 254553, 254603);

                return f_10919_254560_254602(filteredMethodBuilder);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 253164, 254614);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_253347_253370(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.OriginalMethodsOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253347, 253370);
                    return return_v;
                }


                bool
                f_10919_253448_253466_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253448, 253466);
                    return return_v;
                }


                int
                f_10919_253435_253467(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 253435, 253467);
                    return 0;
                }


                bool
                f_10919_253488_253517(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.InvokedAsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253488, 253517);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10919_253720_253736(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253720, 253736);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10919_253806_253822(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253806, 253822);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_253806_253827(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253806, 253827);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10919_253930_253944(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.Arguments;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253930, 253944);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_253930_253952(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 253930, 253952);
                    return return_v;
                }


                int
                f_10919_253992_254039(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 253992, 254039);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_254091_254131()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254091, 254131);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_254174_254214()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254174, 254214);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_254252_254292(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods)
                {
                    var return_v = FilterOverriddenOrHiddenMethods(methods);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254252, 254292);
                    return return_v;
                }


                bool
                f_10919_254326_254488(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                methods, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                filteredMethods, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArguments, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = AddReducedAndFilteredMethodGroupSymbol(methods, filteredMethods, method, typeArguments, receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254326, 254488);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_254252_254292_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254252, 254292);
                    return return_v;
                }


                int
                f_10919_254518_254538(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254518, 254538);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10919_254560_254602(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 254560, 254602);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 253164, 254614);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 253164, 254614);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ImmutableArray<Symbol> CreateReducedExtensionMethodIfPossible(BoundCall call)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 254891, 255735);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255001, 255026);

                var
                method = f_10919_255014_255025(call)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255040, 255077);

                f_10919_255040_255076((object)method != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255093, 255665) || true) && (f_10919_255097_255126(call) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 255097, 255154) && f_10919_255130_255154(method)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 255097, 255206) && f_10919_255158_255175(method) != MethodKind.ReducedExtension))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 255093, 255665);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255240, 255280);

                    f_10919_255240_255279(call.Arguments.Length > 0);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255298, 255343);

                    BoundExpression
                    receiver = f_10919_255325_255339(call)[0]
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255361, 255441);

                    MethodSymbol
                    reduced = f_10919_255384_255440(method, f_10919_255413_255426(receiver), f_10919_255428_255439())
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255623, 255650);

                    method = reduced ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>(10919, 255632, 255649) ?? method);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 255093, 255665);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255679, 255724);

                return f_10919_255686_255723(method);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 254891, 255735);

                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_255014_255025(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.Method;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255014, 255025);
                    return return_v;
                }


                int
                f_10919_255040_255076(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 255040, 255076);
                    return 0;
                }


                bool
                f_10919_255097_255126(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.InvokedAsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255097, 255126);
                    return return_v;
                }


                bool
                f_10919_255130_255154(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255130, 255154);
                    return return_v;
                }


                Microsoft.CodeAnalysis.MethodKind
                f_10919_255158_255175(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.MethodKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255158, 255175);
                    return return_v;
                }


                int
                f_10919_255240_255279(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 255240, 255279);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10919_255325_255339(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.Arguments;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255325, 255339);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_255413_255426(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255413, 255426);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_255428_255439()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255428, 255439);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_255384_255440(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = this_param.ReduceExtensionMethod(receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 255384, 255440);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_255686_255723(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 255686, 255723);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 254891, 255735);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 254891, 255735);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ImmutableArray<Symbol> CreateReducedExtensionMethodIfPossible(BoundDelegateCreationExpression delegateCreation, BoundExpression receiverOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 255747, 256365);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255920, 255960);

                var
                method = f_10919_255933_255959(delegateCreation)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 255974, 256011);

                f_10919_255974_256010((object)method != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 256027, 256295) || true) && (f_10919_256031_256065(delegateCreation) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 256031, 256093) && f_10919_256069_256093(method)) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 256031, 256118) && (receiverOpt != null)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 256027, 256295);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 256152, 256235);

                    MethodSymbol
                    reduced = f_10919_256175_256234(method, f_10919_256204_256220(receiverOpt), f_10919_256222_256233())
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 256253, 256280);

                    method = reduced ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>(10919, 256262, 256279) ?? method);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 256027, 256295);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 256309, 256354);

                return f_10919_256316_256353(method);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 255747, 256365);

                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10919_255933_255959(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.MethodOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 255933, 255959);
                    return return_v;
                }


                int
                f_10919_255974_256010(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 255974, 256010);
                    return 0;
                }


                bool
                f_10919_256031_256065(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 256031, 256065);
                    return return_v;
                }


                bool
                f_10919_256069_256093(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.IsExtensionMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 256069, 256093);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10919_256204_256220(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 256204, 256220);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_256222_256233()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 256222, 256233);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10919_256175_256234(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                receiverType, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = this_param.ReduceExtensionMethod(receiverType, compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 256175, 256234);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10919_256316_256353(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    var return_v = ImmutableArray.Create<Symbol>((Microsoft.CodeAnalysis.CSharp.Symbol)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 256316, 256353);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 255747, 256365);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 255747, 256365);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public abstract ForEachStatementInfo GetForEachStatementInfo(ForEachStatementSyntax node);

        public abstract ForEachStatementInfo GetForEachStatementInfo(CommonForEachStatementSyntax node);

        public abstract DeconstructionInfo GetDeconstructionInfo(AssignmentExpressionSyntax node);

        public abstract DeconstructionInfo GetDeconstructionInfo(ForEachVariableStatementSyntax node);

        public abstract AwaitExpressionInfo GetAwaitExpressionInfo(AwaitExpressionSyntax node);

        public PreprocessingSymbolInfo GetPreprocessingSymbolInfo(IdentifierNameSyntax node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 257839, 258425);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 257948, 257970);

                f_10919_257948_257969(this, node);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 257986, 258362) || true) && (f_10919_257990_258062(f_10919_257990_258006(node), n => SyntaxFacts.IsPreprocessorDirective(n.Kind())))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 257986, 258362);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 258096, 258211);

                    bool
                    isDefined = f_10919_258113_258210(f_10919_258113_258128(this), node.Identifier.ValueText, node.Identifier.SpanStart)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 258229, 258347);

                    return f_10919_258236_258346(f_10919_258264_258334(node.Identifier.ValueText), isDefined);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 257986, 258362);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 258378, 258414);

                return PreprocessingSymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 257839, 258425);

                int
                f_10919_257948_257969(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 257948, 257969);
                    return 0;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                f_10919_257990_258006(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                this_param)
                {
                    var return_v = this_param.Ancestors();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 257990, 258006);
                    return return_v;
                }


                bool
                f_10919_257990_258062(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                source, System.Func<Microsoft.CodeAnalysis.SyntaxNode, bool>
                predicate)
                {
                    var return_v = source.Any<Microsoft.CodeAnalysis.SyntaxNode>(predicate);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 257990, 258062);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_258113_258128(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 258113, 258128);
                    return return_v;
                }


                bool
                f_10919_258113_258210(Microsoft.CodeAnalysis.SyntaxTree
                tree, string
                symbolName, int
                position)
                {
                    var return_v = tree.IsPreprocessorSymbolDefined(symbolName, position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 258113, 258210);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.PreprocessingSymbol
                f_10919_258264_258334(string
                name)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.PreprocessingSymbol(name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 258264, 258334);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PreprocessingSymbolInfo
                f_10919_258236_258346(Microsoft.CodeAnalysis.CSharp.Symbols.PublicModel.PreprocessingSymbol
                symbol, bool
                isDefined)
                {
                    var return_v = new Microsoft.CodeAnalysis.PreprocessingSymbolInfo((Microsoft.CodeAnalysis.IPreprocessingSymbol)symbol, isDefined);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 258236, 258346);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 257839, 258425);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 257839, 258425);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        /// <summary>
        /// Options to control the internal working of GetSymbolInfoWorker. Not currently exposed
        /// to public clients, but could be if desired.
        /// </summary>
        [Flags]
        internal enum SymbolInfoOptions
        {
            /// <summary>
            /// When binding "C" new C(...), return the type C and do not return information about
            /// which constructor was bound to. Bind "new C(...)" to get information about which constructor
            /// was chosen.
            /// </summary>
            PreferTypeToConstructors = 0x1,

            /// <summary>
            /// When binding "C" new C(...), return the constructor of C that was bound to, if C unambiguously
            /// binds to a single type with at least one constructor. 
            /// </summary>
            PreferConstructorsToType = 0x2,

            /// <summary>
            /// When binding a name X that was declared with a "using X=OtherTypeOrNamespace", return OtherTypeOrNamespace.
            /// </summary>
            ResolveAliases = 0x4,

            /// <summary>
            /// When binding a name X that was declared with a "using X=OtherTypeOrNamespace", return the alias symbol X.
            /// </summary>
            PreserveAliases = 0x8,

            // Default Options.
            DefaultOptions = PreferConstructorsToType | ResolveAliases
        }

        internal static void ValidateSymbolInfoOptions(SymbolInfoOptions options)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10919, 259887, 260393);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 259985, 260186);

                f_10919_259985_260185(((options & SymbolInfoOptions.PreferConstructorsToType) != 0) !=
                                         ((options & SymbolInfoOptions.PreferTypeToConstructors) != 0), "Options are mutually exclusive");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 260200, 260382);

                f_10919_260200_260381(((options & SymbolInfoOptions.ResolveAliases) != 0) !=
                                         ((options & SymbolInfoOptions.PreserveAliases) != 0), "Options are mutually exclusive");
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10919, 259887, 260393);

                int
                f_10919_259985_260185(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 259985, 260185);
                    return 0;
                }


                int
                f_10919_260200_260381(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 260200, 260381);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 259887, 260393);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 259887, 260393);
            }
        }

        public new ISymbol GetEnclosingSymbol(
                    int position,
                    CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 260611, 260986);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 260780, 260824);

                position = f_10919_260791_260823(this, position);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 260838, 260880);

                var
                binder = f_10919_260851_260879(this, position)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 260894, 260975);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 260901, 260915) || ((binder == null && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 260918, 260922)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 260925, 260974))) ? null : f_10919_260925_260974(f_10919_260925_260956(binder));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 260611, 260986);

                int
                f_10919_260791_260823(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.CheckAndAdjustPosition(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 260791, 260823);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10919_260851_260879(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position)
                {
                    var return_v = this_param.GetEnclosingBinder(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 260851, 260879);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_260925_260956(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 260925, 260956);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol?
                f_10919_260925_260974(Microsoft.CodeAnalysis.CSharp.Symbol?
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 260925, 260974);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 260611, 260986);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 260611, 260986);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public sealed override string Language
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261102, 261181);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261138, 261166);

                    return LanguageNames.CSharp;
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261102, 261181);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261039, 261192);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261039, 261192);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        protected sealed override Compilation CompilationCore
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261282, 261357);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261318, 261342);

                    return f_10919_261325_261341(this);
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261282, 261357);

                    Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                    f_10919_261325_261341(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                    this_param)
                    {
                        var return_v = this_param.Compilation;
                        DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 261325, 261341);
                        return return_v;
                    }

                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261204, 261368);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261204, 261368);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        protected sealed override SemanticModel ParentModelCore
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261460, 261535);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261496, 261520);

                    return f_10919_261503_261519(this);
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261460, 261535);

                    Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                    f_10919_261503_261519(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                    this_param)
                    {
                        var return_v = this_param.ParentModel;
                        DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 261503, 261519);
                        return return_v;
                    }

                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261380, 261546);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261380, 261546);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        protected sealed override SyntaxTree SyntaxTreeCore
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261634, 261708);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261670, 261693);

                    return f_10919_261677_261692(this);
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261634, 261708);

                    Microsoft.CodeAnalysis.SyntaxTree
                    f_10919_261677_261692(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                    this_param)
                    {
                        var return_v = this_param.SyntaxTree;
                        DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 261677, 261692);
                        return return_v;
                    }

                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261558, 261719);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261558, 261719);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        protected sealed override SyntaxNode RootCore
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261777, 261789);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261780, 261789);
                    return f_10919_261780_261789(this); DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261777, 261789);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261777, 261789);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261777, 261789);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        private SymbolInfo GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 261802, 263205);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261921, 263155);

                switch (node)
                {

                    case null:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 261999, 262045);

                        throw f_10919_262005_262044(nameof(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case ExpressionSyntax expression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262118, 262175);

                        return f_10919_262125_262174(this, expression, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case ConstructorInitializerSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262261, 262319);

                        return f_10919_262268_262318(this, initializer, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case PrimaryConstructorBaseTypeSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262409, 262467);

                        return f_10919_262416_262466(this, initializer, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case AttributeSyntax attribute:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262538, 262594);

                        return f_10919_262545_262593(this, attribute, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case CrefSyntax cref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262655, 262706);

                        return f_10919_262662_262705(this, cref, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case SelectOrGroupClauseSyntax selectOrGroupClause:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262797, 262863);

                        return f_10919_262804_262862(this, selectOrGroupClause, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case OrderingSyntax orderingSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 262938, 262999);

                        return f_10919_262945_262998(this, orderingSyntax, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);

                    case PositionalPatternClauseSyntax ppcSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 261921, 263155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263084, 263140);

                        return f_10919_263091_263139(this, ppcSyntax, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 261921, 263155);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263171, 263194);

                return SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 261802, 263205);

                System.ArgumentNullException
                f_10919_262005_262044(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262005, 262044);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262125_262174(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(expression, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262125, 262174);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262268_262318(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                constructorInitializer, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(constructorInitializer, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262268, 262318);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262416_262466(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                constructorInitializer, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(constructorInitializer, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262416, 262466);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262545_262593(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attributeSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(attributeSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262545, 262593);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262662_262705(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                crefSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(crefSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262662, 262705);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262804_262862(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262804, 262862);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_262945_262998(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 262945, 262998);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_263091_263139(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263091, 263139);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 261802, 263205);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 261802, 263205);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private TypeInfo GetTypeInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 263217, 264194);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263332, 264140);

                switch (node)
                {

                    case null:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263410, 263456);

                        throw f_10919_263416_263455(nameof(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);

                    case ExpressionSyntax expression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263529, 263584);

                        return f_10919_263536_263583(this, expression, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);

                    case ConstructorInitializerSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263670, 263726);

                        return f_10919_263677_263725(this, initializer, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);

                    case AttributeSyntax attribute:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263797, 263851);

                        return f_10919_263804_263850(this, attribute, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);

                    case SelectOrGroupClauseSyntax selectOrGroupClause:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 263942, 264006);

                        return f_10919_263949_264005(this, selectOrGroupClause, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);

                    case PatternSyntax pattern:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 263332, 264140);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264073, 264125);

                        return f_10919_264080_264124(this, pattern, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 263332, 264140);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264156, 264183);

                return CSharpTypeInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 263217, 264194);

                System.ArgumentNullException
                f_10919_263416_263455(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263416, 263455);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeInfo
                f_10919_263536_263583(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfo(expression, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263536, 263583);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeInfo
                f_10919_263677_263725(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                constructorInitializer, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfo(constructorInitializer, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263677, 263725);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeInfo
                f_10919_263804_263850(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attributeSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfo(attributeSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263804, 263850);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeInfo
                f_10919_263949_264005(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfo(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 263949, 264005);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeInfo
                f_10919_264080_264124(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax
                pattern, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfo(pattern, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 264080, 264124);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 263217, 264194);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 263217, 264194);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ImmutableArray<ISymbol> GetMemberGroupFromNode(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 264206, 264946);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264339, 264882);

                switch (node)
                {

                    case null:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 264339, 264882);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264417, 264463);

                        throw f_10919_264423_264462(nameof(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 264339, 264882);

                    case ExpressionSyntax expression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 264339, 264882);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264536, 264594);

                        return f_10919_264543_264593(this, expression, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 264339, 264882);

                    case ConstructorInitializerSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 264339, 264882);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264680, 264739);

                        return f_10919_264687_264738(this, initializer, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 264339, 264882);

                    case AttributeSyntax attribute:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 264339, 264882);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264810, 264867);

                        return f_10919_264817_264866(this, attribute, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 264339, 264882);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 264898, 264935);

                return ImmutableArray<ISymbol>.Empty;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 264206, 264946);

                System.ArgumentNullException
                f_10919_264423_264462(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 264423, 264462);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_264543_264593(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroup(expression, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 264543, 264593);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_264687_264738(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                initializer, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroup(initializer, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 264687, 264738);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_264817_264866(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroup(attribute, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 264817, 264866);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 264206, 264946);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 264206, 264946);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> GetMemberGroupCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 264958, 265246);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265105, 265176);

                var
                methodGroup = f_10919_265123_265175(this, node, cancellationToken)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265190, 265235);

                return f_10919_265197_265234(methodGroup);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 264958, 265246);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_265123_265175(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetMemberGroupFromNode(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265123, 265175);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_265197_265234(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                from)
                {
                    var return_v = StaticCast<ISymbol>.From(from);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265197, 265234);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 264958, 265246);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 264958, 265246);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override SymbolInfo GetSpeculativeSymbolInfoCore(int position, SyntaxNode node, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 265258, 266173);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265419, 266123);

                switch (node)
                {

                    case ExpressionSyntax expression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 265419, 266123);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265520, 265589);

                        return f_10919_265527_265588(this, position, expression, bindingOption);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 265419, 266123);

                    case ConstructorInitializerSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 265419, 266123);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265675, 265730);

                        return f_10919_265682_265729(this, position, initializer);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 265419, 266123);

                    case PrimaryConstructorBaseTypeSyntax initializer:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 265419, 266123);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265820, 265875);

                        return f_10919_265827_265874(this, position, initializer);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 265419, 266123);

                    case AttributeSyntax attribute:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 265419, 266123);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 265946, 265999);

                        return f_10919_265953_265998(this, position, attribute);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 265419, 266123);

                    case CrefSyntax cref:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 265419, 266123);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 266060, 266108);

                        return f_10919_266067_266107(this, position, cref);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 265419, 266123);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 266139, 266162);

                return SymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 265258, 266173);

                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_265527_265588(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeSymbolInfo(position, expression, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265527, 265588);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_265682_265729(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                constructorInitializer)
                {
                    var return_v = this_param.GetSpeculativeSymbolInfo(position, constructorInitializer);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265682, 265729);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_265827_265874(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                constructorInitializer)
                {
                    var return_v = this_param.GetSpeculativeSymbolInfo(position, constructorInitializer);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265827, 265874);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_265953_265998(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax
                attribute)
                {
                    var return_v = this_param.GetSpeculativeSymbolInfo(position, attribute);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 265953, 265998);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_266067_266107(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax
                cref)
                {
                    var return_v = this_param.GetSpeculativeSymbolInfo(position, cref);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 266067, 266107);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 265258, 266173);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 265258, 266173);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override TypeInfo GetSpeculativeTypeInfoCore(int position, SyntaxNode node, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 266185, 266514);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 266342, 266503);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 266349, 266384) || ((node is ExpressionSyntax expression
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 266404, 266463)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 266483, 266502))) ? f_10919_266404_266463(this, position, (ExpressionSyntax)node, bindingOption) : CSharpTypeInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 266185, 266514);

                Microsoft.CodeAnalysis.TypeInfo
                f_10919_266404_266463(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeTypeInfo(position, expression, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 266404, 266463);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 266185, 266514);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 266185, 266514);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override IAliasSymbol GetSpeculativeAliasInfoCore(int position, SyntaxNode nameSyntax, SpeculativeBindingOption bindingOption)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 266526, 266862);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 266694, 266851);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 266701, 266746) || ((nameSyntax is IdentifierNameSyntax identifier
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 266766, 266826)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 266846, 266850))) ? f_10919_266766_266826(this, position, (IdentifierNameSyntax)nameSyntax, bindingOption) : null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 266526, 266862);

                Microsoft.CodeAnalysis.IAliasSymbol
                f_10919_266766_266826(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                nameSyntax, Microsoft.CodeAnalysis.SpeculativeBindingOption
                bindingOption)
                {
                    var return_v = this_param.GetSpeculativeAliasInfo(position, nameSyntax, bindingOption);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 266766, 266826);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 266526, 266862);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 266526, 266862);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override SymbolInfo GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 266874, 267077);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 267007, 267066);

                return f_10919_267014_267065(this, node, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 266874, 267077);

                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_267014_267065(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfoFromNode(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 267014, 267065);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 266874, 267077);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 266874, 267077);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override TypeInfo GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 267089, 267286);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 267218, 267275);

                return f_10919_267225_267274(this, node, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 267089, 267286);

                Microsoft.CodeAnalysis.TypeInfo
                f_10919_267225_267274(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetTypeInfoFromNode(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 267225, 267274);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 267089, 267286);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 267089, 267286);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override IAliasSymbol GetAliasInfoCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 267298, 267543);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 267432, 267532);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 267439, 267478) || ((node is IdentifierNameSyntax nameSyntax && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 267481, 267524)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 267527, 267531))) ? f_10919_267481_267524(this, (IdentifierNameSyntax)node, cancellationToken) : null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 267298, 267543);

                Microsoft.CodeAnalysis.IAliasSymbol
                f_10919_267481_267524(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                nameSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetAliasInfo(nameSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 267481, 267524);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 267298, 267543);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 267298, 267543);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override PreprocessingSymbolInfo GetPreprocessingSymbolInfoCore(SyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 267555, 267841);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 267677, 267830);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 267684, 267723) || ((node is IdentifierNameSyntax nameSyntax
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 267743, 267781)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 267801, 267829))) ? f_10919_267743_267781(this, (IdentifierNameSyntax)node) : PreprocessingSymbolInfo.None;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 267555, 267841);

                Microsoft.CodeAnalysis.PreprocessingSymbolInfo
                f_10919_267743_267781(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax
                node)
                {
                    var return_v = this_param.GetPreprocessingSymbolInfo(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 267743, 267781);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 267555, 267841);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 267555, 267841);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ISymbol GetDeclaredSymbolCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 267853, 271910);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 267987, 268036);

                cancellationToken.ThrowIfCancellationRequested();
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268052, 268625);

                switch (node)
                {

                    case AccessorDeclarationSyntax accessor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268052, 268625);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268160, 268219);

                        return f_10919_268167_268218(this, accessor, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268052, 268625);

                    case BaseTypeDeclarationSyntax type:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268052, 268625);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268295, 268350);

                        return f_10919_268302_268349(this, type, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268052, 268625);

                    case QueryClauseSyntax clause:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268052, 268625);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268420, 268477);

                        return f_10919_268427_268476(this, clause, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268052, 268625);

                    case MemberDeclarationSyntax member:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268052, 268625);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268553, 268610);

                        return f_10919_268560_268609(this, member, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268052, 268625);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268641, 271871);

                switch (f_10919_268649_268660(node))
                {

                    case SyntaxKind.LocalFunctionStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268755, 268840);

                        return f_10919_268762_268839(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.LabeledStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 268913, 268992);

                        return f_10919_268920_268991(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.CaseSwitchLabel:
                    case SyntaxKind.DefaultSwitchLabel:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269117, 269191);

                        return f_10919_269124_269190(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.AnonymousObjectCreationExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269281, 269377);

                        return f_10919_269288_269376(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.AnonymousObjectMemberDeclarator:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269465, 269559);

                        return f_10919_269472_269558(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.TupleExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269631, 269709);

                        return f_10919_269638_269708(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.Argument:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269774, 269845);

                        return f_10919_269781_269844(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.VariableDeclarator:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 269920, 270001);

                        return f_10919_269927_270000(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.SingleVariableDesignation:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270083, 270171);

                        return f_10919_270090_270170(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.TupleElement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270240, 270315);

                        return f_10919_270247_270314(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.NamespaceDeclaration:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270392, 270475);

                        return f_10919_270399_270474(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.Parameter:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270541, 270613);

                        return f_10919_270548_270612(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.TypeParameter:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270683, 270759);

                        return f_10919_270690_270758(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.UsingDirective:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270830, 270878);

                        var
                        usingDirective = (UsingDirectiveSyntax)node
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 270900, 271011) || true) && (f_10919_270904_270924(usingDirective) == null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 270900, 271011);
                            DynAbs.Tracing.TraceSender.TraceBreak(10919, 270982, 270988);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 270900, 271011);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271035, 271100);

                        return f_10919_271042_271099(this, usingDirective, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.ForEachStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271173, 271252);

                        return f_10919_271180_271251(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.CatchDeclaration:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271325, 271404);

                        return f_10919_271332_271403(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.JoinIntoClause:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271475, 271552);

                        return f_10919_271482_271551(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.QueryContinuation:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271626, 271706);

                        return f_10919_271633_271705(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);

                    case SyntaxKind.CompilationUnit:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 268641, 271871);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271778, 271856);

                        return f_10919_271785_271855(this, node, cancellationToken);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 268641, 271871);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 271887, 271899);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 267853, 271910);

                Microsoft.CodeAnalysis.IMethodSymbol
                f_10919_268167_268218(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268167, 268218);
                    return return_v;
                }


                Microsoft.CodeAnalysis.INamedTypeSymbol
                f_10919_268302_268349(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268302, 268349);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IRangeVariableSymbol
                f_10919_268427_268476(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax
                queryClause, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(queryClause, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268427, 268476);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_268560_268609(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268560, 268609);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10919_268649_268660(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268649, 268660);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_268762_268839(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268762, 268839);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILabelSymbol
                f_10919_268920_268991(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 268920, 268991);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILabelSymbol
                f_10919_269124_269190(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269124, 269190);
                    return return_v;
                }


                Microsoft.CodeAnalysis.INamedTypeSymbol
                f_10919_269288_269376(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declaratorSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)declaratorSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269288, 269376);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IPropertySymbol
                f_10919_269472_269558(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declaratorSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)declaratorSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269472, 269558);
                    return return_v;
                }


                Microsoft.CodeAnalysis.INamedTypeSymbol
                f_10919_269638_269708(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declaratorSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)declaratorSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269638, 269708);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_269781_269844(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declaratorSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)declaratorSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269781, 269844);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_269927_270000(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 269927, 270000);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_270090_270170(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 270090, 270170);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_270247_270314(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 270247, 270314);
                    return return_v;
                }


                Microsoft.CodeAnalysis.INamespaceSymbol
                f_10919_270399_270474(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 270399, 270474);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IParameterSymbol
                f_10919_270548_270612(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 270548, 270612);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ITypeParameterSymbol
                f_10919_270690_270758(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                typeParameter, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)typeParameter, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 270690, 270758);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax?
                f_10919_270904_270924(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax
                this_param)
                {
                    var return_v = this_param.Alias;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 270904, 270924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IAliasSymbol
                f_10919_271042_271099(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271042, 271099);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILocalSymbol
                f_10919_271180_271251(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                forEachStatement, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)forEachStatement, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271180, 271251);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ILocalSymbol
                f_10919_271332_271403(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                catchDeclaration, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)catchDeclaration, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271332, 271403);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IRangeVariableSymbol
                f_10919_271482_271551(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271482, 271551);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IRangeVariableSymbol
                f_10919_271633_271705(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271633, 271705);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IMethodSymbol
                f_10919_271785_271855(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbol((Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 271785, 271855);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 267853, 271910);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 267853, 271910);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public ISymbol GetDeclaredSymbol(TupleElementSyntax declarationSyntax, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 272281, 272992);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272442, 272477);

                f_10919_272442_272476(this, declarationSyntax);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272493, 272953) || true) && (f_10919_272497_272521(declarationSyntax) is TupleTypeSyntax tupleTypeSyntax)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 272493, 272953);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272617, 272697);

                    var
                    temp = f_10919_272628_272696(f_10919_272628_272677(this, tupleTypeSyntax, cancellationToken).Symbol)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272715, 272908) || true) && (temp is NamedTypeSymbol namedTypeSymbol)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 272715, 272908);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272781, 272908);

                        return f_10919_272788_272907(namedTypeSymbol.TupleElements.ElementAtOrDefault(tupleTypeSyntax.Elements.IndexOf(declarationSyntax)));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 272715, 272908);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272926, 272938);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 272493, 272953);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 272969, 272981);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 272281, 272992);

                int
                f_10919_272442_272476(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax
                syntax)
                {
                    this_param.CheckSyntaxNode((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 272442, 272476);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10919_272497_272521(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 272497, 272521);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolInfo
                f_10919_272628_272677(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax
                expression, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetSymbolInfo((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)expression, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 272628, 272677);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_272628_272696(Microsoft.CodeAnalysis.ISymbol?
                symbol)
                {
                    var return_v = symbol.GetSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 272628, 272696);
                    return return_v;
                }


                Microsoft.CodeAnalysis.IFieldSymbol?
                f_10919_272788_272907(Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol?
                symbol)
                {
                    var return_v = symbol.GetPublicSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 272788, 272907);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 272281, 272992);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 272281, 272992);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> GetDeclaredSymbolsCore(SyntaxNode declaration, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 273004, 273681);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273191, 273240);

                cancellationToken.ThrowIfCancellationRequested();

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273256, 273413) || true) && (declaration is BaseFieldDeclarationSyntax field)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 273256, 273413);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273341, 273398);

                    return f_10919_273348_273397(this, field, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 273256, 273413);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273429, 273496);

                var
                symbol = f_10919_273442_273495(this, declaration, cancellationToken)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273510, 273614) || true) && (symbol != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 273510, 273614);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273562, 273599);

                    return f_10919_273569_273598(symbol);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 273510, 273614);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273630, 273670);

                return f_10919_273637_273669();
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 273004, 273681);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_273348_273397(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax
                declarationSyntax, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbols(declarationSyntax, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 273348, 273397);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ISymbol
                f_10919_273442_273495(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetDeclaredSymbolCore(node, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 273442, 273495);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_273569_273598(Microsoft.CodeAnalysis.ISymbol
                item)
                {
                    var return_v = ImmutableArray.Create(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 273569, 273598);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_273637_273669()
                {
                    var return_v = ImmutableArray.Create<ISymbol>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 273637, 273669);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 273004, 273681);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 273004, 273681);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal override void ComputeDeclarationsInSpan(TextSpan span, bool getSymbol, ArrayBuilder<DeclarationInfo> builder, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 273693, 273987);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 273873, 273976);

                f_10919_273873_273975(this, span, getSymbol, builder, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 273693, 273987);

                int
                f_10919_273873_273975(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                model, Microsoft.CodeAnalysis.Text.TextSpan
                span, bool
                getSymbol, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.DeclarationInfo>
                builder, System.Threading.CancellationToken
                cancellationToken)
                {
                    CSharpDeclarationComputer.ComputeDeclarationsInSpan((Microsoft.CodeAnalysis.SemanticModel)model, span, getSymbol, builder, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 273873, 273975);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 273693, 273987);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 273693, 273987);
            }
        }

        internal override void ComputeDeclarationsInNode(SyntaxNode node, ISymbol associatedSymbol, bool getSymbol, ArrayBuilder<DeclarationInfo> builder, CancellationToken cancellationToken, int? levelsToCompute = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 273999, 274385);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 274236, 274374);

                f_10919_274236_274373(this, associatedSymbol, node, getSymbol, builder, cancellationToken, levelsToCompute);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 273999, 274385);

                int
                f_10919_274236_274373(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                model, Microsoft.CodeAnalysis.ISymbol
                associatedSymbol, Microsoft.CodeAnalysis.SyntaxNode
                node, bool
                getSymbol, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.DeclarationInfo>
                builder, System.Threading.CancellationToken
                cancellationToken, int?
                levelsToCompute)
                {
                    CSharpDeclarationComputer.ComputeDeclarationsInNode((Microsoft.CodeAnalysis.SemanticModel)model, associatedSymbol, node, getSymbol, builder, cancellationToken, levelsToCompute);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 274236, 274373);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 273999, 274385);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 273999, 274385);
            }
        }

        internal abstract override Func<SyntaxNode, bool> GetSyntaxNodesToAnalyzeFilter(SyntaxNode declaredNode, ISymbol declaredSymbol);

        protected internal override SyntaxNode GetTopmostNodeForDiagnosticAnalysis(ISymbol symbol, SyntaxNode declaringSyntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 274538, 275154);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 274681, 275104);

                switch (f_10919_274689_274700(symbol))
                {

                    case SymbolKind.Event:  // for field-like events
                    case SymbolKind.Field:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 274681, 275104);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 274844, 274926);

                        var
                        fieldDecl = f_10919_274860_274925(declaringSyntax)
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 274948, 275059) || true) && (fieldDecl != null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 274948, 275059);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 275019, 275036);

                            return fieldDecl;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 274948, 275059);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10919, 275083, 275089);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 274681, 275104);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 275120, 275143);

                return declaringSyntax;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 274538, 275154);

                Microsoft.CodeAnalysis.SymbolKind
                f_10919_274689_274700(Microsoft.CodeAnalysis.ISymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 274689, 274700);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax?
                f_10919_274860_274925(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.FirstAncestorOrSelf<Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 274860, 274925);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 274538, 275154);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 274538, 275154);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> LookupSymbolsCore(int position, INamespaceOrTypeSymbol container, string name, bool includeReducedExtensionMethods)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 275166, 275491);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 275356, 275480);

                return f_10919_275363_275479(this, position, f_10919_275387_275440(container, nameof(container)), name, includeReducedExtensionMethods);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 275166, 275491);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                f_10919_275387_275440(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 275387, 275440);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_275363_275479(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, string
                name, bool
                includeReducedExtensionMethods)
                {
                    var return_v = this_param.LookupSymbols(position, container, name, includeReducedExtensionMethods);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 275363, 275479);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 275166, 275491);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 275166, 275491);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> LookupBaseMembersCore(int position, string name)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 275503, 275678);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 275626, 275667);

                return f_10919_275633_275666(this, position, name);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 275503, 275678);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_275633_275666(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, string
                name)
                {
                    var return_v = this_param.LookupBaseMembers(position, name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 275633, 275666);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 275503, 275678);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 275503, 275678);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> LookupStaticMembersCore(int position, INamespaceOrTypeSymbol container, string name)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 275690, 275958);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 275849, 275947);

                return f_10919_275856_275946(this, position, f_10919_275886_275939(container, nameof(container)), name);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 275690, 275958);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                f_10919_275886_275939(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 275886, 275939);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_275856_275946(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, string
                name)
                {
                    var return_v = this_param.LookupStaticMembers(position, container, name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 275856, 275946);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 275690, 275958);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 275690, 275958);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> LookupNamespacesAndTypesCore(int position, INamespaceOrTypeSymbol container, string name)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 275970, 276248);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276134, 276237);

                return f_10919_276141_276236(this, position, f_10919_276176_276229(container, nameof(container)), name);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 275970, 276248);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol?
                f_10919_276176_276229(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276176, 276229);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_276141_276236(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol
                container, string
                name)
                {
                    var return_v = this_param.LookupNamespacesAndTypes(position, container, name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276141, 276236);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 275970, 276248);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 275970, 276248);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ImmutableArray<ISymbol> LookupLabelsCore(int position, string name)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 276260, 276425);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276378, 276414);

                return f_10919_276385_276413(this, position, name);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 276260, 276425);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol>
                f_10919_276385_276413(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, string
                name)
                {
                    var return_v = this_param.LookupLabels(position, name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276385, 276413);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 276260, 276425);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 276260, 276425);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 276437, 277374);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276583, 276714) || true) && (firstStatement == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 276583, 276714);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276643, 276699);

                    throw f_10919_276649_276698(nameof(firstStatement));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 276583, 276714);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276730, 276859) || true) && (lastStatement == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 276730, 276859);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276789, 276844);

                    throw f_10919_276795_276843(nameof(lastStatement));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 276730, 276859);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276875, 277057) || true) && (!(firstStatement is StatementSyntax firstStatementSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 276875, 277057);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 276970, 277042);

                    throw f_10919_276976_277041("firstStatement is not a StatementSyntax.");
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 276875, 277057);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277073, 277273) || true) && (!(lastStatement is StatementSyntax lastStatementSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 277073, 277273);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277166, 277258);

                    throw f_10919_277172_277257("firstStatement is a StatementSyntax but lastStatement isn't.");
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 277073, 277273);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277289, 277363);

                return f_10919_277296_277362(this, firstStatementSyntax, lastStatementSyntax);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 276437, 277374);

                System.ArgumentNullException
                f_10919_276649_276698(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276649, 276698);
                    return return_v;
                }


                System.ArgumentNullException
                f_10919_276795_276843(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276795, 276843);
                    return return_v;
                }


                System.ArgumentException
                f_10919_276976_277041(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 276976, 277041);
                    return return_v;
                }


                System.ArgumentException
                f_10919_277172_277257(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 277172, 277257);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ControlFlowAnalysis
                f_10919_277296_277362(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                firstStatement, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                lastStatement)
                {
                    var return_v = this_param.AnalyzeControlFlow(firstStatement, lastStatement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 277296, 277362);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 276437, 277374);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 276437, 277374);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode statement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 277386, 277880);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277501, 277622) || true) && (statement == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 277501, 277622);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277556, 277607);

                    throw f_10919_277562_277606(nameof(statement));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 277501, 277622);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277638, 277805) || true) && (!(statement is StatementSyntax statementSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 277638, 277805);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277723, 277790);

                    throw f_10919_277729_277789("statement is not a StatementSyntax.");
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 277638, 277805);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 277821, 277869);

                return f_10919_277828_277868(this, statementSyntax);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 277386, 277880);

                System.ArgumentNullException
                f_10919_277562_277606(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 277562, 277606);
                    return return_v;
                }


                System.ArgumentException
                f_10919_277729_277789(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 277729, 277789);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ControlFlowAnalysis
                f_10919_277828_277868(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                statement)
                {
                    var return_v = this_param.AnalyzeControlFlow(statement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 277828, 277868);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 277386, 277880);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 277386, 277880);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 277892, 278799);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278032, 278163) || true) && (firstStatement == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278032, 278163);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278092, 278148);

                    throw f_10919_278098_278147(nameof(firstStatement));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278032, 278163);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278179, 278308) || true) && (lastStatement == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278179, 278308);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278238, 278293);

                    throw f_10919_278244_278292(nameof(lastStatement));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278179, 278308);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278324, 278506) || true) && (!(firstStatement is StatementSyntax firstStatementSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278324, 278506);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278419, 278491);

                    throw f_10919_278425_278490("firstStatement is not a StatementSyntax.");
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278324, 278506);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278522, 278701) || true) && (!(lastStatement is StatementSyntax lastStatementSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278522, 278701);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278615, 278686);

                    throw f_10919_278621_278685("lastStatement is not a StatementSyntax.");
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278522, 278701);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278717, 278788);

                return f_10919_278724_278787(this, firstStatementSyntax, lastStatementSyntax);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 277892, 278799);

                System.ArgumentNullException
                f_10919_278098_278147(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 278098, 278147);
                    return return_v;
                }


                System.ArgumentNullException
                f_10919_278244_278292(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 278244, 278292);
                    return return_v;
                }


                System.ArgumentException
                f_10919_278425_278490(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 278425, 278490);
                    return return_v;
                }


                System.ArgumentException
                f_10919_278621_278685(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 278621, 278685);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DataFlowAnalysis
                f_10919_278724_278787(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                firstStatement, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                lastStatement)
                {
                    var return_v = this_param.AnalyzeDataFlow(firstStatement, lastStatement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 278724, 278787);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 277892, 278799);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 277892, 278799);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode statementOrExpression)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 278811, 279513);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 278932, 279502);

                switch (statementOrExpression)
                {

                    case null:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278932, 279502);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279027, 279090);

                        throw f_10919_279033_279089(nameof(statementOrExpression));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278932, 279502);

                    case StatementSyntax statementSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278932, 279502);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279167, 279212);

                        return f_10919_279174_279211(this, statementSyntax);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278932, 279502);

                    case ExpressionSyntax expressionSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278932, 279502);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279291, 279337);

                        return f_10919_279298_279336(this, expressionSyntax);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278932, 279502);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 278932, 279502);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279385, 279487);

                        throw f_10919_279391_279486("statementOrExpression is not a StatementSyntax or an ExpressionSyntax.");
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 278932, 279502);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 278811, 279513);

                System.ArgumentNullException
                f_10919_279033_279089(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279033, 279089);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DataFlowAnalysis
                f_10919_279174_279211(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                statement)
                {
                    var return_v = this_param.AnalyzeDataFlow(statement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279174, 279211);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DataFlowAnalysis
                f_10919_279298_279336(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression)
                {
                    var return_v = this_param.AnalyzeDataFlow(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279298, 279336);
                    return return_v;
                }


                System.ArgumentException
                f_10919_279391_279486(string
                message)
                {
                    var return_v = new System.ArgumentException(message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279391, 279486);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 278811, 279513);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 278811, 279513);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override Optional<object> GetConstantValueCore(SyntaxNode node, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 279525, 279960);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279667, 279778) || true) && (node == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10919, 279667, 279778);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279717, 279763);

                    throw f_10919_279723_279762(nameof(node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10919, 279667, 279778);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 279794, 279949);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 279801, 279836) || ((node is ExpressionSyntax expression
                && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 279856, 279903)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 279923, 279948))) ? f_10919_279856_279903(this, (ExpressionSyntax)node, cancellationToken) : default(Optional<object>);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 279525, 279960);

                System.ArgumentNullException
                f_10919_279723_279762(string
                paramName)
                {
                    var return_v = new System.ArgumentNullException(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279723, 279762);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Optional<object>
                f_10919_279856_279903(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetConstantValue(expression, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 279856, 279903);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 279525, 279960);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 279525, 279960);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override ISymbol GetEnclosingSymbolCore(int position, CancellationToken cancellationToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 279972, 280175);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280104, 280164);

                return f_10919_280111_280163(this, position, cancellationToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 279972, 280175);

                Microsoft.CodeAnalysis.ISymbol
                f_10919_280111_280163(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.GetEnclosingSymbol(position, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280111, 280163);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 279972, 280175);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 279972, 280175);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override bool IsAccessibleCore(int position, ISymbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 280187, 280384);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280289, 280373);

                return f_10919_280296_280372(this, position, f_10919_280324_280371(symbol, nameof(symbol)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 280187, 280384);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10919_280324_280371(Microsoft.CodeAnalysis.ISymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280324, 280371);
                    return return_v;
                }


                bool
                f_10919_280296_280372(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbol
                symbol)
                {
                    var return_v = this_param.IsAccessible(position, symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280296, 280372);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 280187, 280384);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 280187, 280384);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected sealed override bool IsEventUsableAsFieldCore(int position, IEventSymbol symbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 280396, 280614);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280511, 280603);

                return f_10919_280518_280602(this, position, f_10919_280554_280601(symbol, nameof(symbol)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 280396, 280614);

                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol?
                f_10919_280554_280601(Microsoft.CodeAnalysis.IEventSymbol
                symbol, string
                paramName)
                {
                    var return_v = symbol.EnsureCSharpSymbolOrNull(paramName);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280554, 280601);
                    return return_v;
                }


                bool
                f_10919_280518_280602(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
                this_param, int
                position, Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                symbol)
                {
                    var return_v = this_param.IsEventUsableAsField(position, symbol);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280518, 280602);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 280396, 280614);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 280396, 280614);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public sealed override NullableContext GetNullableContext(int position)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 280626, 282046);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280722, 280773);

                var
                syntaxTree = (CSharpSyntaxTree)f_10919_280757_280772(f_10919_280757_280761())
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280787, 280868);

                NullableContextState
                contextState = f_10919_280823_280867(syntaxTree, position)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 280882, 281111);

                var
                defaultState = (DynAbs.Tracing.TraceSender.Conditional_F1(10919, 280901, 280998) || ((f_10919_280901_280998(syntaxTree, f_10919_280928_280973(f_10919_280928_280947(f_10919_280928_280939())), CancellationToken.None) && DynAbs.Tracing.TraceSender.Conditional_F2(10919, 281018, 281048)) || DynAbs.Tracing.TraceSender.Conditional_F3(10919, 281068, 281110))) ? NullableContextOptions.Disable
                : f_10919_281068_281110(f_10919_281068_281087(f_10919_281068_281079()))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281127, 281308);

                NullableContext
                context = f_10919_281153_281307(contextState.AnnotationsState, f_10919_281192_281225(defaultState), NullableContext.AnnotationsContextInherited, NullableContext.AnnotationsEnabled)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281322, 281476);

                context |= f_10919_281333_281475(contextState.WarningsState, f_10919_281369_281399(defaultState), NullableContext.WarningsContextInherited, NullableContext.WarningsEnabled);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281492, 281507);

                return context;

                static NullableContext getFlag(NullableContextState.State contextState, bool defaultEnableState, NullableContext inheritedFlag, NullableContext enableFlag)
                {
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterMethod(10919, 281679, 282034);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281699, 282034);
                        return contextState switch
                        {
                            NullableContextState.State.Enabled when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281759, 281807) && DynAbs.Tracing.TraceSender.Expression_True(10919, 281759, 281807))
        => enableFlag,
                            NullableContextState.State.Disabled when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281830, 281893) && DynAbs.Tracing.TraceSender.Expression_True(10919, 281830, 281893))
        => NullableContext.Disabled,
                            _ when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281918, 281941) || true) && (defaultEnableState) && (DynAbs.Tracing.TraceSender.Expression_True(10919, 281918, 281941) || true)
        => (inheritedFlag | enableFlag),
                            _ when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10919, 281996, 282014) && DynAbs.Tracing.TraceSender.Expression_True(10919, 281996, 282014))
        => inheritedFlag,
                        }; DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 281679, 282034);
                    }
                    catch
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 281679, 282034);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 281679, 282034);
                    }
                    throw new System.Exception("Slicer error: unreachable code");
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10919, 280626, 282046);

                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10919_280757_280761()
                {
                    var return_v = Root;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 280757, 280761);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10919_280757_280772(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 280757, 280772);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.NullableContextState
                f_10919_280823_280867(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree
                this_param, int
                position)
                {
                    var return_v = this_param.GetNullableContextState(position);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280823, 280867);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_280928_280939()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 280928, 280939);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
                f_10919_280928_280947(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.Options;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 280928, 280947);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider?
                f_10919_280928_280973(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
                this_param)
                {
                    var return_v = this_param.SyntaxTreeOptionsProvider;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 280928, 280973);
                    return return_v;
                }


                bool
                f_10919_280901_280998(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree
                this_param, Microsoft.CodeAnalysis.SyntaxTreeOptionsProvider?
                provider, System.Threading.CancellationToken
                cancellationToken)
                {
                    var return_v = this_param.IsGeneratedCode(provider, cancellationToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 280901, 280998);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10919_281068_281079()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 281068, 281079);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
                f_10919_281068_281087(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.Options;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 281068, 281087);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullableContextOptions
                f_10919_281068_281110(Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
                this_param)
                {
                    var return_v = this_param.NullableContextOptions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 281068, 281110);
                    return return_v;
                }


                bool
                f_10919_281192_281225(Microsoft.CodeAnalysis.NullableContextOptions
                context)
                {
                    var return_v = context.AnnotationsEnabled();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 281192, 281225);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullableContext
                f_10919_281153_281307(Microsoft.CodeAnalysis.CSharp.Syntax.NullableContextState.State
                contextState, bool
                defaultEnableState, Microsoft.CodeAnalysis.NullableContext
                inheritedFlag, Microsoft.CodeAnalysis.NullableContext
                enableFlag)
                {
                    var return_v = getFlag(contextState, defaultEnableState, inheritedFlag, enableFlag);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 281153, 281307);
                    return return_v;
                }


                bool
                f_10919_281369_281399(Microsoft.CodeAnalysis.NullableContextOptions
                context)
                {
                    var return_v = context.WarningsEnabled();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 281369, 281399);
                    return return_v;
                }


                Microsoft.CodeAnalysis.NullableContext
                f_10919_281333_281475(Microsoft.CodeAnalysis.CSharp.Syntax.NullableContextState.State
                contextState, bool
                defaultEnableState, Microsoft.CodeAnalysis.NullableContext
                inheritedFlag, Microsoft.CodeAnalysis.NullableContext
                enableFlag)
                {
                    var return_v = getFlag(contextState, defaultEnableState, inheritedFlag, enableFlag);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10919, 281333, 281475);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10919, 280626, 282046);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 280626, 282046);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public CSharpSemanticModel()
        {
            DynAbs.Tracing.TraceSender.TraceEnterConstructor(10919, 2242, 282075);
            DynAbs.Tracing.TraceSender.TraceExitConstructor(10919, 2242, 282075);

            DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 2242, 282075);
        }


        static CSharpSemanticModel()
        {
            DynAbs.Tracing.TraceSender.TraceEnterStaticConstructor(10919, 2242, 282075);
            DynAbs.Tracing.TraceSender.TraceExitStaticConstructor(10919, 2242, 282075);

            DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10919, 2242, 282075);
        }

        int ___ignore_me___ = DynAbs.Tracing.TraceSender.TraceBeforeConstructor(10919, 2242, 282075);

        Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
        f_10919_261780_261789(Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel
        this_param)
        {
            var return_v = this_param.Root;
            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10919, 261780, 261789);
            return return_v;
        }

    }
}
