// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#nullable disable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using Microsoft.CodeAnalysis.CSharp.Symbols;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.PooledObjects;
using Roslyn.Utilities;

namespace Microsoft.CodeAnalysis.CSharp
{
    internal partial class Binder
    {
        private BoundExpression BindCompoundAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 600, 12268);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 731, 792);

                f_10314_731_791(f_10314_731_740(node), diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 808, 903);

                BoundExpression
                left = f_10314_831_902(this, f_10314_841_850(node), diagnostics, f_10314_865_901(f_10314_889_900(node)))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 917, 962);

                f_10314_917_961(this, left, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 976, 1057);

                BoundExpression
                right = f_10314_1000_1056(this, f_10314_1010_1020(node), diagnostics, BindValueKind.RValue)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1071, 1141);

                BinaryOperatorKind
                kind = f_10314_1097_1140(f_10314_1128_1139(node))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1308, 1900) || true) && (f_10314_1312_1321(left) == BoundKind.EventAccess)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 1308, 1900);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1380, 1430);

                    BinaryOperatorKind
                    kindOperator = f_10314_1414_1429(kind)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1448, 1885);

                    switch (kindOperator)
                    {

                        case BinaryOperatorKind.Addition:
                        case BinaryOperatorKind.Subtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 1448, 1885);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1627, 1718);

                            return f_10314_1634_1717(this, node, left, right, kindOperator, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 1448, 1885);

                            // fall-through for other operators, if RHS is dynamic we produce dynamic operation, otherwise we'll report an error ...
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 1308, 1900);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 1916, 2411) || true) && (f_10314_1920_1937(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 1920, 1959) || f_10314_1941_1959(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 1916, 2411);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2054, 2094);

                    left = f_10314_2061_2093(this, left);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2112, 2154);

                    right = f_10314_2120_2153(this, right);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2172, 2396);

                    return f_10314_2179_2395(node, BinaryOperatorSignature.Error, left, right, Conversion.NoConversion, Conversion.NoConversion, LookupResultKind.Empty, f_10314_2360_2377(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 1916, 2411);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2427, 2477);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2493, 4437) || true) && (f_10314_2497_2518(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 2497, 2544) || f_10314_2522_2544(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 2493, 4437);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2578, 4422) || true) && (f_10314_2582_2610(right) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 2582, 2641) && f_10314_2614_2641(left)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 2578, 4422);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2683, 2727);

                        left = f_10314_2690_2726(this, left, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2749, 2795);

                        right = f_10314_2757_2794(this, right, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2817, 2950);

                        var
                        finalDynamicConversion = f_10314_2846_2949(f_10314_2846_2874(f_10314_2846_2862(this)), right, f_10314_2915_2924(left), ref useSiteDiagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 2972, 3014);

                        f_10314_2972_3013(diagnostics, node, useSiteDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 3038, 3721);

                        return f_10314_3045_3720(node, f_10314_3138_3428(f_10314_3196_3292(f_10314_3196_3237(kind, BinaryOperatorKind.Dynamic), f_10314_3269_3291()), f_10314_3323_3332(left), f_10314_3363_3373(right), f_10314_3404_3427(f_10314_3404_3415())), left, right, Conversion.NoConversion, finalDynamicConversion, LookupResultKind.Viable, f_10314_3667_3676(left), hasErrors: false);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 2578, 4422);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 2578, 4422);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 3803, 3910);

                        f_10314_3803_3909(diagnostics, ErrorCode.ERR_BadBinaryOps, node, node.OperatorToken.Text, f_10314_3881_3893(left), f_10314_3895_3908(right));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4049, 4089);

                        left = f_10314_4056_4088(this, left);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4111, 4153);

                        right = f_10314_4119_4152(this, right);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4175, 4403);

                        return f_10314_4182_4402(node, BinaryOperatorSignature.Error, left, right, Conversion.NoConversion, Conversion.NoConversion, LookupResultKind.Empty, f_10314_4367_4384(this), hasErrors: true);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 2578, 4422);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 2493, 4437);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4453, 5292) || true) && (f_10314_4457_4466(left) == BoundKind.EventAccess && (DynAbs.Tracing.TraceSender.Expression_True(10314, 4457, 4578) && !f_10314_4496_4578(this, left, BindValueKind.Assignable, diagnostics)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 4453, 5292);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4928, 4968);

                    left = f_10314_4935_4967(this, left);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 4986, 5028);

                    right = f_10314_4994_5027(this, right);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 5046, 5277);

                    return f_10314_5053_5276(node, BinaryOperatorSignature.Error, left, right, Conversion.NoConversion, Conversion.NoConversion, LookupResultKind.NotAVariable, f_10314_5241_5258(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 4453, 5292);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6090, 6118);

                LookupResultKind
                resultKind
                = default(LookupResultKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6132, 6190);

                ImmutableArray<MethodSymbol>
                originalUserDefinedOperators
                = default(ImmutableArray<MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6204, 6366);

                BinaryOperatorAnalysisResult
                best = f_10314_6240_6365(this, kind, left, right, node, diagnostics, out resultKind, out originalUserDefinedOperators)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6380, 6899) || true) && (f_10314_6384_6398_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 6380, 6899);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6432, 6506);

                    f_10314_6432_6505(this, node, diagnostics, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6524, 6564);

                    left = f_10314_6531_6563(this, left);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6582, 6624);

                    right = f_10314_6590_6623(this, right);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 6642, 6884);

                    return f_10314_6649_6883(node, BinaryOperatorSignature.Error, left, right, Conversion.NoConversion, Conversion.NoConversion, resultKind, originalUserDefinedOperators, f_10314_6848_6865(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 6380, 6899);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9319, 9341);

                bool
                hasError = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9357, 9412);

                BinaryOperatorSignature
                bestSignature = best.Signature
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9428, 9505);

                f_10314_9428_9504(bestSignature.Kind, node, diagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9521, 9918) || true) && (f_10314_9525_9547())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 9521, 9918);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9581, 9903);

                    bestSignature = f_10314_9597_9902(f_10314_9647_9720(bestSignature.Kind, f_10314_9697_9719()), bestSignature.LeftType, bestSignature.RightType, bestSignature.ReturnType, bestSignature.Method);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 9521, 9918);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 9934, 10051);

                BoundExpression
                rightConverted = f_10314_9967_10050(this, right, best.RightConversion, bestSignature.RightType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10067, 10092);

                var
                leftType = f_10314_10082_10091(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10106, 10244);

                Conversion
                finalConversion = f_10314_10135_10243(f_10314_10135_10146(), bestSignature.ReturnType, leftType, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10260, 10324);

                bool
                isPredefinedOperator = !f_10314_10289_10323(bestSignature.Kind)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10340, 10782) || true) && (f_10314_10344_10368_M(!finalConversion.IsValid) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 10344, 10423) || finalConversion.IsExplicit && (DynAbs.Tracing.TraceSender.Expression_True(10314, 10372, 10423) && !isPredefinedOperator)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 10340, 10782);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10457, 10473);

                    hasError = true;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10491, 10613);

                    f_10314_10491_10612(diagnostics, f_10314_10536_10552(this), node, finalConversion, bestSignature.ReturnType, leftType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 10340, 10782);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 10340, 10782);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10679, 10767);

                    f_10314_10679_10766(this, diagnostics, finalConversion, node, hasBaseReceiver: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 10340, 10782);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10798, 11359) || true) && (finalConversion.IsExplicit && (DynAbs.Tracing.TraceSender.Expression_True(10314, 10802, 10869) && isPredefinedOperator) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 10802, 10905) && !f_10314_10891_10905(kind)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 10798, 11359);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 10939, 11065);

                    Conversion
                    rightToLeftConversion = f_10314_10974_11064(f_10314_10974_10990(this), right, leftType, ref useSiteDiagnostics)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11083, 11344) || true) && (f_10314_11087_11120_M(!rightToLeftConversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 11087, 11154) || f_10314_11124_11154_M(!rightToLeftConversion.IsValid)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 11083, 11344);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11196, 11212);

                        hasError = true;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11234, 11325);

                        f_10314_11234_11324(this, diagnostics, node, rightToLeftConversion, right, leftType);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 11083, 11344);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 10798, 11359);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11375, 11417);

                f_10314_11375_11416(
                            diagnostics, node, useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11433, 11607) || true) && (!hasError && (DynAbs.Tracing.TraceSender.Expression_True(10314, 11437, 11474) && f_10314_11450_11474(leftType)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 11433, 11607);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11508, 11558);

                    f_10314_11508_11557(diagnostics, ErrorCode.ERR_VoidError, node);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11576, 11592);

                    hasError = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 11433, 11607);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11817, 11878);

                f_10314_11817_11877(f_10314_11830_11839(left) != BoundKind.EventAccess || (DynAbs.Tracing.TraceSender.Expression_False(10314, 11830, 11876) || hasError));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11894, 11942);

                Conversion
                leftConversion = best.LeftConversion
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 11956, 12043);

                f_10314_11956_12042(this, diagnostics, leftConversion, node, hasBaseReceiver: false);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 12059, 12257);

                return f_10314_12066_12256(node, bestSignature, left, rightConverted, leftConversion, finalConversion, resultKind, originalUserDefinedOperators, leftType, hasError);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 600, 12268);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_731_740(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 731, 740);
                    return return_v;
                }


                int
                f_10314_731_791(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    expression.CheckDeconstructionCompatibleArgument(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 731, 791);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_841_850(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 841, 850);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_889_900(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 889, 900);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10314_865_901(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = GetBinaryAssignmentKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 865, 901);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_831_902(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 831, 902);
                    return return_v;
                }


                int
                f_10314_917_961(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportSuppressionIfNeeded(expr, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 917, 961);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_1010_1020(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 1010, 1020);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_1000_1056(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 1000, 1056);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_1128_1139(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 1128, 1139);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_1097_1140(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxKindToBinaryOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 1097, 1140);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_1312_1321(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 1312, 1321);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_1414_1429(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 1414, 1429);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_1634_1717(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                opKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEventAssignment(node, (Microsoft.CodeAnalysis.CSharp.BoundEventAccess)left, right, opKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 1634, 1717);
                    return return_v;
                }


                bool
                f_10314_1920_1937(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 1920, 1937);
                    return return_v;
                }


                bool
                f_10314_1941_1959(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 1941, 1959);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_2061_2093(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2061, 2093);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_2120_2153(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2120, 2153);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_2360_2377(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2360, 2377);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_2179_2395(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2179, 2395);
                    return return_v;
                }


                bool
                f_10314_2497_2518(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2497, 2518);
                    return return_v;
                }


                bool
                f_10314_2522_2544(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2522, 2544);
                    return return_v;
                }


                bool
                f_10314_2582_2610(Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand)
                {
                    var return_v = IsLegalDynamicOperand(operand);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2582, 2610);
                    return return_v;
                }


                bool
                f_10314_2614_2641(Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand)
                {
                    var return_v = IsLegalDynamicOperand(operand);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2614, 2641);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_2690_2726(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2690, 2726);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_2757_2794(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2757, 2794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_2846_2862(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 2846, 2862);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_2846_2874(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 2846, 2874);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_2915_2924(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 2915, 2924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_2846_2949(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2846, 2949);
                    return return_v;
                }


                bool
                f_10314_2972_3013(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 2972, 3013);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_3196_3237(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 3196, 3237);
                    return return_v;
                }


                bool
                f_10314_3269_3291()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3269, 3291);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_3196_3292(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 3196, 3292);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_3323_3332(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3323, 3332);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_3363_3373(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3363, 3373);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_3404_3415()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3404, 3415);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_3404_3427(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.DynamicType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3404, 3427);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                f_10314_3138_3428(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature(kind, leftType, rightType, returnType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 3138, 3428);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_3667_3676(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3667, 3676);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_3045_3720(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 3045, 3720);
                    return return_v;
                }


                object
                f_10314_3881_3893(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3881, 3893);
                    return return_v;
                }


                object
                f_10314_3895_3908(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 3895, 3908);
                    return return_v;
                }


                int
                f_10314_3803_3909(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 3803, 3909);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_4056_4088(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4056, 4088);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_4119_4152(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4119, 4152);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_4367_4384(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4367, 4384);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_4182_4402(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4182, 4402);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_4457_4466(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 4457, 4466);
                    return return_v;
                }


                bool
                f_10314_4496_4578(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundEvent, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckEventValueKind((Microsoft.CodeAnalysis.CSharp.BoundEventAccess)boundEvent, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4496, 4578);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_4935_4967(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4935, 4967);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_4994_5027(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 4994, 5027);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_5241_5258(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 5241, 5258);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_5053_5276(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 5053, 5276);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult
                f_10314_6240_6365(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.BinaryOperatorOverloadResolution(kind, left, right, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6240, 6365);
                    return return_v;
                }


                bool
                f_10314_6384_6398_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 6384, 6398);
                    return return_v;
                }


                int
                f_10314_6432_6505(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    this_param.ReportAssignmentOperatorError(node, diagnostics, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6432, 6505);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_6531_6563(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6531, 6563);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_6590_6623(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6590, 6623);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_6848_6865(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6848, 6865);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_6649_6883(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, originalUserDefinedOperatorsOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 6649, 6883);
                    return return_v;
                }


                int
                f_10314_9428_9504(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    CheckNativeIntegerFeatureAvailability(operatorKind, (Microsoft.CodeAnalysis.SyntaxNode)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 9428, 9504);
                    return 0;
                }


                bool
                f_10314_9525_9547()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 9525, 9547);
                    return return_v;
                }


                bool
                f_10314_9697_9719()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 9697, 9719);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_9647_9720(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 9647, 9720);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                f_10314_9597_9902(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature(kind, leftType, rightType, returnType, method);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 9597, 9902);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_9967_10050(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 9967, 10050);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_10082_10091(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 10082, 10091);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_10135_10146()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 10135, 10146);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_10135_10243(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpressionType(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10135, 10243);
                    return return_v;
                }


                bool
                f_10314_10289_10323(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsUserDefined();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10289, 10323);
                    return return_v;
                }


                bool
                f_10314_10344_10368_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 10344, 10368);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_10536_10552(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 10536, 10552);
                    return return_v;
                }


                int
                f_10314_10491_10612(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                sourceType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                targetType)
                {
                    GenerateImplicitConversionError(diagnostics, compilation, (Microsoft.CodeAnalysis.SyntaxNode)syntax, conversion, sourceType, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10491, 10612);
                    return 0;
                }


                int
                f_10314_10679_10766(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.SyntaxNode
                node, bool
                hasBaseReceiver)
                {
                    this_param.ReportDiagnosticsIfObsolete(diagnostics, conversion, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)node, hasBaseReceiver: hasBaseReceiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10679, 10766);
                    return 0;
                }


                bool
                f_10314_10891_10905(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsShift();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10891, 10905);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_10974_10990(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 10974, 10990);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_10974_11064(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 10974, 11064);
                    return return_v;
                }


                bool
                f_10314_11087_11120_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 11087, 11120);
                    return return_v;
                }


                bool
                f_10314_11124_11154_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 11124, 11154);
                    return return_v;
                }


                int
                f_10314_11234_11324(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11234, 11324);
                    return 0;
                }


                bool
                f_10314_11375_11416(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11375, 11416);
                    return return_v;
                }


                bool
                f_10314_11450_11474(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsVoidPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11450, 11474);
                    return return_v;
                }


                int
                f_10314_11508_11557(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11508, 11557);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_11830_11839(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 11830, 11839);
                    return return_v;
                }


                int
                f_10314_11817_11877(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11817, 11877);
                    return 0;
                }


                int
                f_10314_11956_12042(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.SyntaxNode
                node, bool
                hasBaseReceiver)
                {
                    this_param.ReportDiagnosticsIfObsolete(diagnostics, conversion, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)node, hasBaseReceiver: hasBaseReceiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 11956, 12042);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator
                f_10314_12066_12256(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                @operator, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Conversion
                leftConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                finalConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCompoundAssignmentOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, @operator, left, right, leftConversion, finalConversion, resultKind, originalUserDefinedOperatorsOpt, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 12066, 12256);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 600, 12268);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 600, 12268);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindEventAssignment(AssignmentExpressionSyntax node, BoundEventAccess left, BoundExpression right, BinaryOperatorKind opKind, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 12692, 16707);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 12893, 12989);

                f_10314_12893_12988(opKind == BinaryOperatorKind.Addition || (DynAbs.Tracing.TraceSender.Expression_False(10314, 12906, 12987) || opKind == BinaryOperatorKind.Subtraction));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13005, 13028);

                bool
                hasErrors = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13044, 13087);

                EventSymbol
                eventSymbol = f_10314_13070_13086(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13101, 13148);

                BoundExpression
                receiverOpt = f_10314_13131_13147(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13164, 13200);

                TypeSymbol
                delegateType = f_10314_13190_13199(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13216, 13266);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13280, 13407);

                Conversion
                argumentConversion = f_10314_13312_13406(f_10314_13312_13328(this), right, delegateType, ref useSiteDiagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13423, 13855) || true) && (f_10314_13427_13457_M(!argumentConversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 13427, 13488) || f_10314_13461_13488_M(!argumentConversion.IsValid)))
                ) // NOTE: dev10 appears to allow user-defined conversions here.

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 13423, 13855);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13585, 13602);

                    hasErrors = true;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13620, 13840) || true) && (f_10314_13624_13653(delegateType))
                    ) // Otherwise, suppress cascading.

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 13620, 13840);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13729, 13821);

                        f_10314_13729_13820(this, diagnostics, node, argumentConversion, right, delegateType);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 13620, 13840);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 13423, 13855);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13871, 13969);

                BoundExpression
                argument = f_10314_13898_13968(this, right, argumentConversion, delegateType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 13985, 14041);

                bool
                isAddition = opKind == BinaryOperatorKind.Addition
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14055, 14139);

                MethodSymbol
                method = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 14077, 14087) || ((isAddition && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 14090, 14111)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 14114, 14138))) ? f_10314_14090_14111(eventSymbol) : f_10314_14114_14138(eventSymbol)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14155, 14171);

                TypeSymbol
                type
                = default(TypeSymbol);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14185, 16271) || true) && ((object)method == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 14185, 16271);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14245, 14316);

                    type = f_10314_14252_14315(this, SpecialType.System_Void, diagnostics, node);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14471, 14829) || true) && (!f_10314_14476_14542(f_10314_14476_14506(eventSymbol), f_10314_14525_14541(this)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 14471, 14829);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14667, 14810);

                        f_10314_14667_14809(diagnostics, ErrorCode.ERR_MissingPredefinedMember, node, delegateType, f_10314_14745_14808(f_10314_14779_14795(eventSymbol), isAddition));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 14471, 14829);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 14185, 16271);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 14185, 16271);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14895, 14967);

                    f_10314_14895_14966(this, receiverOpt, method, diagnostics);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 14987, 15705) || true) && (!f_10314_14992_15081(this, method, ref useSiteDiagnostics, f_10314_15042_15080(this, receiverOpt)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 14987, 15705);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15259, 15317);

                        f_10314_15259_15316(diagnostics, ErrorCode.ERR_BadAccess, node, method);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15339, 15356);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 14987, 15705);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 14987, 15705);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15398, 15705) || true) && (f_10314_15402_15470(this, node, receiverOpt, method, diagnostics, eventSymbol))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 15398, 15705);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15512, 15529);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 15398, 15705);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 15398, 15705);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15611, 15686);

                            f_10314_15611_15685(this, node, receiverOpt, method, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 15398, 15705);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 14987, 15705);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 15725, 16256) || true) && (f_10314_15729_15762(eventSymbol))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 15725, 16256);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16059, 16130);

                        type = f_10314_16066_16129(this, SpecialType.System_Void, diagnostics, node);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 15725, 16256);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 15725, 16256);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16212, 16237);

                        type = f_10314_16219_16236(method);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 15725, 16256);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 14185, 16271);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16287, 16329);

                f_10314_16287_16328(
                            diagnostics, node, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16345, 16696);

                return f_10314_16352_16695(syntax: node, @event: eventSymbol, isAddition: isAddition, isDynamic: f_10314_16524_16546(right), receiverOpt: receiverOpt, argument: argument, type: type, hasErrors: hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 12692, 16707);

                int
                f_10314_12893_12988(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 12893, 12988);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                f_10314_13070_13086(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.EventSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13070, 13086);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10314_13131_13147(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13131, 13147);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_13190_13199(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13190, 13199);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_13312_13328(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13312, 13328);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_13312_13406(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 13312, 13406);
                    return return_v;
                }


                bool
                f_10314_13427_13457_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13427, 13457);
                    return return_v;
                }


                bool
                f_10314_13461_13488_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 13461, 13488);
                    return return_v;
                }


                bool
                f_10314_13624_13653(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDelegateType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 13624, 13653);
                    return return_v;
                }


                int
                f_10314_13729_13820(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 13729, 13820);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_13898_13968(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 13898, 13968);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10314_14090_14111(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.AddMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 14090, 14111);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                f_10314_14114_14138(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.RemoveMethod;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 14114, 14138);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_14252_14315(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14252, 14315);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                f_10314_14476_14506(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.OriginalDefinition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 14476, 14506);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_14525_14541(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 14525, 14541);
                    return return_v;
                }


                bool
                f_10314_14476_14542(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = this_param.IsFromCompilation(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14476, 14542);
                    return return_v;
                }


                string
                f_10314_14779_14795(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 14779, 14795);
                    return return_v;
                }


                string
                f_10314_14745_14808(string
                eventName, bool
                isAdder)
                {
                    var return_v = SourceEventSymbol.GetAccessorName(eventName, isAdder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14745, 14808);
                    return return_v;
                }


                int
                f_10314_14667_14809(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14667, 14809);
                    return 0;
                }


                bool
                f_10314_14895_14966(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiver, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckImplicitThisCopyInReadOnlyMember(receiver, method, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14895, 14966);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_15042_15080(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiver)
                {
                    var return_v = this_param.GetAccessThroughType(receiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 15042, 15080);
                    return return_v;
                }


                bool
                f_10314_14992_15081(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                accessThroughType)
                {
                    var return_v = this_param.IsAccessible((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, ref useSiteDiagnostics, accessThroughType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 14992, 15081);
                    return return_v;
                }


                int
                f_10314_15259_15316(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 15259, 15316);
                    return 0;
                }


                bool
                f_10314_15402_15470(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiverOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                member, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                propertyOrEventSymbolOpt)
                {
                    var return_v = this_param.IsBadBaseAccess((Microsoft.CodeAnalysis.SyntaxNode)node, receiverOpt, (Microsoft.CodeAnalysis.CSharp.Symbol)member, diagnostics, (Microsoft.CodeAnalysis.CSharp.Symbol)propertyOrEventSymbolOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 15402, 15470);
                    return return_v;
                }


                int
                f_10314_15611_15685(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiverOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.CheckRuntimeSupportForSymbolAccess((Microsoft.CodeAnalysis.SyntaxNode)node, receiverOpt, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 15611, 15685);
                    return 0;
                }


                bool
                f_10314_15729_15762(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.IsWindowsRuntimeEvent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 15729, 15762);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_16066_16129(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 16066, 16129);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_16219_16236(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ReturnType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 16219, 16236);
                    return return_v;
                }


                bool
                f_10314_16287_16328(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 16287, 16328);
                    return return_v;
                }


                bool
                f_10314_16524_16546(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 16524, 16546);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundEventAssignmentOperator
                f_10314_16352_16695(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                @event, bool
                isAddition, bool
                isDynamic, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiverOpt, Microsoft.CodeAnalysis.CSharp.BoundExpression
                argument, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundEventAssignmentOperator(syntax: (Microsoft.CodeAnalysis.SyntaxNode)syntax, @event: @event, isAddition: isAddition, isDynamic: isDynamic, receiverOpt: receiverOpt, argument: argument, type: type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 16352, 16695);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 12692, 16707);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 12692, 16707);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsLegalDynamicOperand(BoundExpression operand)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 16719, 17647);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16810, 16840);

                f_10314_16810_16839(operand != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 16856, 16887);

                TypeSymbol
                type = f_10314_16874_16886(operand)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 17338, 17442) || true) && ((object)type == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 17338, 17442);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 17396, 17427);

                    return f_10314_17403_17426(operand);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 17338, 17442);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 17544, 17636);

                return !f_10314_17552_17585(type) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 17551, 17613) && !f_10314_17590_17613(type)) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 17551, 17635) && !f_10314_17618_17635(type));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 16719, 17647);

                int
                f_10314_16810_16839(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 16810, 16839);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_16874_16886(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 16874, 16886);
                    return return_v;
                }


                bool
                f_10314_17403_17426(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 17403, 17426);
                    return return_v;
                }


                bool
                f_10314_17552_17585(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsPointerOrFunctionPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 17552, 17585);
                    return return_v;
                }


                bool
                f_10314_17590_17613(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsRestrictedType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 17590, 17613);
                    return return_v;
                }


                bool
                f_10314_17618_17635(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 17618, 17635);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 16719, 17647);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 16719, 17647);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindDynamicBinaryOperator(
                    BinaryExpressionSyntax node,
                    BinaryOperatorKind kind,
                    BoundExpression left,
                    BoundExpression right,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 17659, 20582);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18083, 18204);

                f_10314_18083_18203((object)f_10314_18104_18113(left) != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 18096, 18146) && f_10314_18125_18146(f_10314_18125_18134(left))) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 18096, 18202) || (object)f_10314_18158_18168(right) != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 18150, 18202) && f_10314_18180_18202(f_10314_18180_18190(right)))));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18220, 18242);

                bool
                hasError = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18256, 18308);

                bool
                leftValidOperand = f_10314_18280_18307(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18322, 18376);

                bool
                rightValidOperand = f_10314_18347_18375(right)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18392, 18714) || true) && (!leftValidOperand || (DynAbs.Tracing.TraceSender.Expression_False(10314, 18396, 18435) || !rightValidOperand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 18392, 18714);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18558, 18665);

                    f_10314_18558_18664(diagnostics, ErrorCode.ERR_BadBinaryOps, node, node.OperatorToken.Text, f_10314_18636_18648(left), f_10314_18650_18663(right));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18683, 18699);

                    hasError = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 18392, 18714);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18730, 18770);

                MethodSymbol
                userDefinedOperator = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 18786, 19967) || true) && (f_10314_18790_18806(kind) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 18790, 18826) && leftValidOperand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 18786, 19967);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19195, 19245);

                    HashSet<DiagnosticInfo>
                    useSiteDiagnostics = null
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19263, 19892) || true) && (!f_10314_19268_19438(this, left, isNegative: kind == BinaryOperatorKind.LogicalAnd, useSiteDiagnostics: ref useSiteDiagnostics, userDefinedOperator: out userDefinedOperator))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 19263, 19892);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19695, 19833);

                        f_10314_19695_19832(diagnostics, ErrorCode.ERR_InvalidDynamicCondition, f_10314_19753_19762(node), f_10314_19764_19773(left), (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 19775, 19812) || ((kind == BinaryOperatorKind.LogicalAnd && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 19815, 19822)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 19825, 19831))) ? "false" : "true");
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19857, 19873);

                        hasError = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 19263, 19892);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19910, 19952);

                    f_10314_19910_19951(diagnostics, node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 18786, 19967);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 19983, 20571);

                return f_10314_19990_20570(syntax: node, operatorKind: f_10314_20077_20193(((DynAbs.Tracing.TraceSender.Conditional_F1(10314, 20078, 20086) || ((hasError && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 20089, 20093)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 20096, 20137))) ? kind : f_10314_20096_20137(kind, BinaryOperatorKind.Dynamic)), f_10314_20170_20192()), left: f_10314_20218_20254(this, left, diagnostics), right: f_10314_20280_20317(this, right, diagnostics), constantValueOpt: ConstantValue.NotAvailable, methodOpt: userDefinedOperator, resultKind: LookupResultKind.Viable, type: f_10314_20508_20531(f_10314_20508_20519()), hasErrors: hasError);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 17659, 20582);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_18104_18113(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18104, 18113);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_18125_18134(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18125, 18134);
                    return return_v;
                }


                bool
                f_10314_18125_18146(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18125, 18146);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_18158_18168(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18158, 18168);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_18180_18190(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18180, 18190);
                    return return_v;
                }


                bool
                f_10314_18180_18202(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18180, 18202);
                    return return_v;
                }


                int
                f_10314_18083_18203(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18083, 18203);
                    return 0;
                }


                bool
                f_10314_18280_18307(Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand)
                {
                    var return_v = IsLegalDynamicOperand(operand);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18280, 18307);
                    return return_v;
                }


                bool
                f_10314_18347_18375(Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand)
                {
                    var return_v = IsLegalDynamicOperand(operand);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18347, 18375);
                    return return_v;
                }


                object
                f_10314_18636_18648(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18636, 18648);
                    return return_v;
                }


                object
                f_10314_18650_18663(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 18650, 18663);
                    return return_v;
                }


                int
                f_10314_18558_18664(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18558, 18664);
                    return 0;
                }


                bool
                f_10314_18790_18806(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLogical();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 18790, 18806);
                    return return_v;
                }


                bool
                f_10314_19268_19438(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, bool
                isNegative, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                userDefinedOperator)
                {
                    var return_v = this_param.IsValidDynamicCondition(left, isNegative: isNegative, useSiteDiagnostics: ref useSiteDiagnostics, out userDefinedOperator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 19268, 19438);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_19753_19762(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 19753, 19762);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_19764_19773(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 19764, 19773);
                    return return_v;
                }


                int
                f_10314_19695_19832(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 19695, 19832);
                    return 0;
                }


                bool
                f_10314_19910_19951(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 19910, 19951);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_20096_20137(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 20096, 20137);
                    return return_v;
                }


                bool
                f_10314_20170_20192()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 20170, 20192);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_20077_20193(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 20077, 20193);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_20218_20254(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 20218, 20254);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_20280_20317(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 20280, 20317);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_20508_20519()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 20508, 20519);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_20508_20531(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.DynamicType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 20508, 20531);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_19990_20570(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator(syntax: (Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind: operatorKind, left: left, right: right, constantValueOpt: constantValueOpt, methodOpt: methodOpt, resultKind: resultKind, type: type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 19990, 20570);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 17659, 20582);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 17659, 20582);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected static bool IsSimpleBinaryOperator(SyntaxKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 20594, 21719);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 20737, 21681);

                switch (kind)
                {

                    case SyntaxKind.AddExpression:
                    case SyntaxKind.MultiplyExpression:
                    case SyntaxKind.SubtractExpression:
                    case SyntaxKind.DivideExpression:
                    case SyntaxKind.ModuloExpression:
                    case SyntaxKind.EqualsExpression:
                    case SyntaxKind.NotEqualsExpression:
                    case SyntaxKind.GreaterThanExpression:
                    case SyntaxKind.LessThanExpression:
                    case SyntaxKind.GreaterThanOrEqualExpression:
                    case SyntaxKind.LessThanOrEqualExpression:
                    case SyntaxKind.BitwiseAndExpression:
                    case SyntaxKind.BitwiseOrExpression:
                    case SyntaxKind.ExclusiveOrExpression:
                    case SyntaxKind.LeftShiftExpression:
                    case SyntaxKind.RightShiftExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 20737, 21681);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 21654, 21666);

                        return true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 20737, 21681);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 21695, 21708);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 20594, 21719);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 20594, 21719);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 20594, 21719);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindSimpleBinaryOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 21731, 24425);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22275, 22325);

                f_10314_22275_22324(f_10314_22288_22323(f_10314_22311_22322(node)));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22341, 22410);

                var
                syntaxNodes = f_10314_22359_22409()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22426, 22458);

                ExpressionSyntax
                current = node
                ;
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22472, 22691) || true) && (f_10314_22479_22517(f_10314_22502_22516(current)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 22472, 22691);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22551, 22595);

                        var
                        binOp = (BinaryExpressionSyntax)current
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22613, 22637);

                        f_10314_22613_22636(syntaxNodes, binOp);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22655, 22676);

                        current = f_10314_22665_22675(binOp);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 22472, 22691);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 22472, 22691);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 22472, 22691);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22707, 22769);

                BoundExpression
                result = f_10314_22732_22768(this, current, diagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22785, 23778) || true) && (f_10314_22789_22831(node, SyntaxKind.SubtractExpression) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 22789, 22902) && f_10314_22852_22902(current, SyntaxKind.ParenthesizedExpression)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 22785, 23778);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 22936, 23763) || true) && (f_10314_22940_22951(result) == BoundKind.TypeExpression
                    && (DynAbs.Tracing.TraceSender.Expression_True(10314, 22940, 23099) && !f_10314_23005_23099(f_10314_23005_23056(((ParenthesizedExpressionSyntax)current)), SyntaxKind.ParenthesizedExpression)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 22936, 23763);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23141, 23200);

                        f_10314_23141_23199(diagnostics, ErrorCode.ERR_PossibleBadNegCast, node);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 22936, 23763);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 22936, 23763);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23242, 23763) || true) && (f_10314_23246_23257(result) == BoundKind.BadExpression)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 23242, 23763);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23326, 23395);

                            var
                            parenthesizedExpression = (ParenthesizedExpressionSyntax)current
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23419, 23744) || true) && (f_10314_23423_23491(f_10314_23423_23457(parenthesizedExpression), SyntaxKind.IdentifierName) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 23423, 23612) && ((IdentifierNameSyntax)f_10314_23543_23577(parenthesizedExpression)).Identifier.ValueText == "dynamic"))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 23419, 23744);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23662, 23721);

                                f_10314_23662_23720(diagnostics, ErrorCode.ERR_PossibleBadNegCast, node);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 23419, 23744);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 23242, 23763);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 22936, 23763);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 22785, 23778);
                }
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23794, 24351) || true) && (f_10314_23801_23818(syntaxNodes) > 0)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 23794, 24351);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23856, 23910);

                        BinaryExpressionSyntax
                        syntaxNode = f_10314_23892_23909(syntaxNodes)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 23928, 24001);

                        BindValueKind
                        bindValueKind = f_10314_23958_24000(f_10314_23982_23999(syntaxNode))
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24019, 24089);

                        BoundExpression
                        left = f_10314_24042_24088(this, result, bindValueKind, diagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24107, 24194);

                        BoundExpression
                        right = f_10314_24131_24193(this, f_10314_24141_24157(syntaxNode), diagnostics, BindValueKind.RValue)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24212, 24301);

                        BoundExpression
                        boundOp = f_10314_24238_24300(this, syntaxNode, diagnostics, left, right)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24319, 24336);

                        result = boundOp;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 23794, 24351);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 23794, 24351);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 23794, 24351);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24367, 24386);

                f_10314_24367_24385(
                            syntaxNodes);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24400, 24414);

                return result;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 21731, 24425);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_22311_22322(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22311, 22322);
                    return return_v;
                }


                bool
                f_10314_22288_22323(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = IsSimpleBinaryOperator(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22288, 22323);
                    return return_v;
                }


                int
                f_10314_22275_22324(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22275, 22324);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>
                f_10314_22359_22409()
                {
                    var return_v = ArrayBuilder<BinaryExpressionSyntax>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22359, 22409);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_22502_22516(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22502, 22516);
                    return return_v;
                }


                bool
                f_10314_22479_22517(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = IsSimpleBinaryOperator(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22479, 22517);
                    return return_v;
                }


                int
                f_10314_22613_22636(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>
                builder, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                e)
                {
                    builder.Push<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>(e);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22613, 22636);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_22665_22675(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 22665, 22675);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_22732_22768(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22732, 22768);
                    return return_v;
                }


                bool
                f_10314_22789_22831(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22789, 22831);
                    return return_v;
                }


                bool
                f_10314_22852_22902(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 22852, 22902);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_22940_22951(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 22940, 22951);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_23005_23056(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 23005, 23056);
                    return return_v;
                }


                bool
                f_10314_23005_23099(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23005, 23099);
                    return return_v;
                }


                int
                f_10314_23141_23199(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23141, 23199);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_23246_23257(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 23246, 23257);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_23423_23457(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 23423, 23457);
                    return return_v;
                }


                bool
                f_10314_23423_23491(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23423, 23491);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_23543_23577(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 23543, 23577);
                    return return_v;
                }


                int
                f_10314_23662_23720(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23662, 23720);
                    return 0;
                }


                int
                f_10314_23801_23818(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 23801, 23818);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                f_10314_23892_23909(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>
                builder)
                {
                    var return_v = builder.Pop<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23892, 23909);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_23982_23999(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23982, 23999);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10314_23958_24000(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = GetBinaryAssignmentKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 23958, 24000);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_24042_24088(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckValue(expr, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24042, 24088);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_24141_24157(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 24141, 24157);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_24131_24193(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24131, 24193);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_24238_24300(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right)
                {
                    var return_v = this_param.BindSimpleBinaryOperator(node, diagnostics, left, right);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24238, 24300);
                    return return_v;
                }


                int
                f_10314_24367_24385(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax>
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24367, 24385);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 21731, 24425);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 21731, 24425);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindSimpleBinaryOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics,
                    BoundExpression left, BoundExpression right)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 24437, 32593);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24624, 24694);

                BinaryOperatorKind
                kind = f_10314_24650_24693(f_10314_24681_24692(node))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 24862, 25309) || true) && (f_10314_24866_24883(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 24866, 24905) || f_10314_24887_24905(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 24862, 25309);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25003, 25043);

                    left = f_10314_25010_25042(this, left);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25061, 25103);

                    right = f_10314_25069_25102(this, right);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25121, 25294);

                    return f_10314_25128_25293(node, kind, ConstantValue.NotAvailable, null, LookupResultKind.Empty, left, right, f_10314_25235_25286(this, kind, diagnostics, node), true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 24862, 25309);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25325, 25357);

                TypeSymbol
                leftType = f_10314_25347_25356(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25371, 25405);

                TypeSymbol
                rightType = f_10314_25394_25404(right)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25421, 25647) || true) && ((object)leftType != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 25425, 25473) && f_10314_25453_25473(leftType)) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 25425, 25527) || (object)rightType != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 25477, 25527) && f_10314_25506_25527(rightType))))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 25421, 25647);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 25561, 25632);

                    return f_10314_25568_25631(this, node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 25421, 25647);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26398, 26435);

                bool
                leftNull = f_10314_26414_26434(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26449, 26488);

                bool
                rightNull = f_10314_26466_26487(right)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26502, 26592);

                bool
                isEquality = kind == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10314, 26520, 26591) || kind == BinaryOperatorKind.NotEqual)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26606, 26843) || true) && (isEquality && (DynAbs.Tracing.TraceSender.Expression_True(10314, 26610, 26632) && leftNull) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 26610, 26645) && rightNull))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 26606, 26843);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26679, 26828);

                    return f_10314_26686_26827(node, f_10314_26709_26763(kind == BinaryOperatorKind.Equal), f_10314_26765_26826(this, SpecialType.System_Boolean, diagnostics, node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 26606, 26843);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 26859, 27208) || true) && (f_10314_26863_26898(left, right) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 26863, 26992) && (kind == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10314, 26920, 26991) || kind == BinaryOperatorKind.NotEqual))))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 26859, 27208);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 27026, 27106);

                    f_10314_27026_27105(node, MessageID.IDS_FeatureTupleEquality, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 27124, 27193);

                    return f_10314_27131_27192(this, node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 26859, 27208);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28075, 28103);

                LookupResultKind
                resultKind
                = default(LookupResultKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28117, 28175);

                ImmutableArray<MethodSymbol>
                originalUserDefinedOperators
                = default(ImmutableArray<MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28189, 28223);

                BinaryOperatorSignature
                signature
                = default(BinaryOperatorSignature);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28237, 28271);

                BinaryOperatorAnalysisResult
                best
                = default(BinaryOperatorAnalysisResult);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28285, 28466);

                bool
                foundOperator = f_10314_28306_28465(this, node, diagnostics, left, right, kind, out resultKind, out originalUserDefinedOperators, out signature, out best)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28482, 28537);

                BinaryOperatorKind
                resultOperatorKind = signature.Kind
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28551, 28574);

                bool
                hasErrors = false
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28588, 28849) || true) && (!foundOperator)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 28588, 28849);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28640, 28730);

                    f_10314_28640_28729(node, diagnostics, f_10314_28685_28703(node), left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28748, 28799);

                    resultOperatorKind &= ~BinaryOperatorKind.TypeMask;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28817, 28834);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 28588, 28849);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 28865, 30695);

                switch (f_10314_28873_28884(node))
                {

                    case SyntaxKind.EqualsExpression:
                    case SyntaxKind.NotEqualsExpression:
                    case SyntaxKind.LessThanExpression:
                    case SyntaxKind.LessThanOrEqualExpression:
                    case SyntaxKind.GreaterThanExpression:
                    case SyntaxKind.GreaterThanOrEqualExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 28865, 30695);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 29752, 30264) || true) && ((resultOperatorKind & BinaryOperatorKind.Pointer) == BinaryOperatorKind.Pointer && (DynAbs.Tracing.TraceSender.Expression_True(10314, 29756, 29910) && f_10314_29864_29882_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(leftType, 10314, 29864, 29882)?.TypeKind) == TypeKind.FunctionPointer) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 29756, 29961) && f_10314_29914_29933_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(rightType, 10314, 29914, 29933)?.TypeKind) == TypeKind.FunctionPointer))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 29752, 30264);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30158, 30241);

                            f_10314_30158_30240(diagnostics, ErrorCode.WRN_DoNotCompareFunctionPointers, f_10314_30221_30239(node));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 29752, 30264);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 30288, 30294);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 28865, 30695);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 28865, 30695);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30342, 30652) || true) && (f_10314_30346_30370(leftType) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 30346, 30399) || f_10314_30374_30399(rightType)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 30342, 30652);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30536, 30586);

                            f_10314_30536_30585(diagnostics, ErrorCode.ERR_VoidError, node);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30612, 30629);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 30342, 30652);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 30674, 30680);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 28865, 30695);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30711, 30788);

                f_10314_30711_30787(resultOperatorKind, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30804, 30849);

                TypeSymbol
                resultType = signature.ReturnType
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30863, 30897);

                BoundExpression
                resultLeft = left
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30911, 30947);

                BoundExpression
                resultRight = right
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 30961, 30997);

                ConstantValue
                resultConstant = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31013, 32071) || true) && (foundOperator && (DynAbs.Tracing.TraceSender.Expression_True(10314, 31017, 31104) && (f_10314_31035_31068(resultOperatorKind) != BinaryOperatorKind.NullableNull)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 31013, 32071);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31138, 31187);

                    f_10314_31138_31186((object)signature.LeftType != null);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31205, 31255);

                    f_10314_31205_31254((object)signature.RightType != null);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31275, 31365);

                    resultLeft = f_10314_31288_31364(this, left, best.LeftConversion, signature.LeftType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31383, 31477);

                    resultRight = f_10314_31397_31476(this, right, best.RightConversion, signature.RightType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31495, 31619);

                    resultConstant = f_10314_31512_31618(this, node, resultOperatorKind, resultLeft, resultRight, f_10314_31582_31604(resultType), diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 31013, 32071);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 31013, 32071);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31870, 31953);

                    resultLeft = f_10314_31883_31952(this, resultLeft, diagnostics, reportNoTargetType: false);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 31971, 32056);

                    resultRight = f_10314_31985_32055(this, resultRight, diagnostics, reportNoTargetType: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 31013, 32071);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 32087, 32159);

                hasErrors = hasErrors || (DynAbs.Tracing.TraceSender.Expression_False(10314, 32099, 32158) || resultConstant != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 32112, 32158) && f_10314_32138_32158(resultConstant)));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 32175, 32582);

                return f_10314_32182_32581(node, f_10314_32247_32320(resultOperatorKind, f_10314_32297_32319()), resultLeft, resultRight, resultConstant, signature.Method, resultKind, originalUserDefinedOperators, resultType, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 24437, 32593);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_24681_24692(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24681, 24692);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_24650_24693(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxKindToBinaryOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 24650, 24693);
                    return return_v;
                }


                bool
                f_10314_24866_24883(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 24866, 24883);
                    return return_v;
                }


                bool
                f_10314_24887_24905(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 24887, 24905);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_25010_25042(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25010, 25042);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_25069_25102(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25069, 25102);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_25235_25286(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinaryOperatorErrorType(kind, diagnostics, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25235, 25286);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_25128_25293(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, constantValueOpt, methodOpt, resultKind, left, right, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25128, 25293);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_25347_25356(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 25347, 25356);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_25394_25404(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 25394, 25404);
                    return return_v;
                }


                bool
                f_10314_25453_25473(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25453, 25473);
                    return return_v;
                }


                bool
                f_10314_25506_25527(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25506, 25527);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_25568_25631(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDynamicBinaryOperator(node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 25568, 25631);
                    return return_v;
                }


                bool
                f_10314_26414_26434(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26414, 26434);
                    return return_v;
                }


                bool
                f_10314_26466_26487(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26466, 26487);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_26709_26763(bool
                value)
                {
                    var return_v = ConstantValue.Create(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26709, 26763);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_26765_26826(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26765, 26826);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLiteral
                f_10314_26686_26827(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLiteral((Microsoft.CodeAnalysis.SyntaxNode)syntax, constantValueOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26686, 26827);
                    return return_v;
                }


                bool
                f_10314_26863_26898(Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right)
                {
                    var return_v = IsTupleBinaryOperation(left, right);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 26863, 26898);
                    return return_v;
                }


                bool
                f_10314_27026_27105(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.MessageID
                feature, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = CheckFeatureAvailability((Microsoft.CodeAnalysis.SyntaxNode)syntax, feature, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 27026, 27105);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundTupleBinaryOperator
                f_10314_27131_27192(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindTupleBinaryOperator(node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 27131, 27192);
                    return return_v;
                }


                bool
                f_10314_28306_28465(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators, out Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                resultSignature, out Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult
                best)
                {
                    var return_v = this_param.BindSimpleBinaryOperatorParts(node, diagnostics, left, right, kind, out resultKind, out originalUserDefinedOperators, out resultSignature, out best);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 28306, 28465);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_28685_28703(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.OperatorToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 28685, 28703);
                    return return_v;
                }


                int
                f_10314_28640_28729(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxToken
                operatorToken, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportBinaryOperatorError((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)node, diagnostics, operatorToken, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 28640, 28729);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_28873_28884(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 28873, 28884);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeKind?
                f_10314_29864_29882_M(Microsoft.CodeAnalysis.TypeKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 29864, 29882);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeKind?
                f_10314_29914_29933_M(Microsoft.CodeAnalysis.TypeKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 29914, 29933);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_30221_30239(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.OperatorToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 30221, 30239);
                    return return_v;
                }


                int
                f_10314_30158_30240(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 30158, 30240);
                    return 0;
                }


                bool
                f_10314_30346_30370(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsVoidPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 30346, 30370);
                    return return_v;
                }


                bool
                f_10314_30374_30399(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsVoidPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 30374, 30399);
                    return return_v;
                }


                int
                f_10314_30536_30585(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 30536, 30585);
                    return 0;
                }


                int
                f_10314_30711_30787(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    CheckNativeIntegerFeatureAvailability(operatorKind, (Microsoft.CodeAnalysis.SyntaxNode)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 30711, 30787);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_31035_31068(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31035, 31068);
                    return return_v;
                }


                int
                f_10314_31138_31186(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31138, 31186);
                    return 0;
                }


                int
                f_10314_31205_31254(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31205, 31254);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_31288_31364(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31288, 31364);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_31397_31476(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31397, 31476);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_31582_31604(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 31582, 31604);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_31512_31618(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.SpecialType
                resultType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldBinaryOperator((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, kind, left, right, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31512, 31618);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_31883_31952(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                reportNoTargetType)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics, reportNoTargetType: reportNoTargetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31883, 31952);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_31985_32055(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                reportNoTargetType)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics, reportNoTargetType: reportNoTargetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 31985, 32055);
                    return return_v;
                }


                bool
                f_10314_32138_32158(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 32138, 32158);
                    return return_v;
                }


                bool
                f_10314_32297_32319()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 32297, 32319);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_32247_32320(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 32247, 32320);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_32182_32581(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.ConstantValue?
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, left, right, constantValueOpt, methodOpt, resultKind, originalUserDefinedOperatorsOpt, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 32182, 32581);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 24437, 32593);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 24437, 32593);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool BindSimpleBinaryOperatorParts(BinaryExpressionSyntax node, DiagnosticBag diagnostics, BoundExpression left, BoundExpression right, BinaryOperatorKind kind,
                    out LookupResultKind resultKind, out ImmutableArray<MethodSymbol> originalUserDefinedOperators,
                    out BinaryOperatorSignature resultSignature, out BinaryOperatorAnalysisResult best)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 32605, 35764);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33004, 33023);

                bool
                foundOperator
                = default(bool);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33037, 33170);

                best = f_10314_33044_33169(this, kind, left, right, node, diagnostics, out resultKind, out originalUserDefinedOperators);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33699, 35718) || true) && (f_10314_33703_33717_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 33699, 35718);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33751, 33855);

                    resultSignature = f_10314_33769_33854(kind, leftType: null, rightType: null, f_10314_33836_33853(this));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33873, 33895);

                    foundOperator = false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 33699, 35718);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 33699, 35718);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 33961, 33992);

                    var
                    signature = best.Signature
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34012, 34140);

                    bool
                    isObjectEquality = signature.Kind == BinaryOperatorKind.ObjectEqual || (DynAbs.Tracing.TraceSender.Expression_False(10314, 34036, 34139) || signature.Kind == BinaryOperatorKind.ObjectNotEqual)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34160, 34197);

                    bool
                    leftNull = f_10314_34176_34196(left)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34215, 34254);

                    bool
                    rightNull = f_10314_34232_34253(right)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34274, 34306);

                    TypeSymbol
                    leftType = f_10314_34296_34305(left)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34324, 34358);

                    TypeSymbol
                    rightType = f_10314_34347_34357(right)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34378, 34766);

                    bool
                    isNullableEquality = (object)signature.Method == null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34404, 34576) && (f_10314_34462_34487(signature.Kind) == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10314, 34462, 34575) || f_10314_34519_34544(signature.Kind) == BinaryOperatorKind.NotEqual))) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34404, 34765) && (leftNull && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34602, 34639) && (object)rightType != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34602, 34669) && f_10314_34643_34669(rightType)) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 34602, 34764) || rightNull && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34698, 34735) && (object)leftType != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 34698, 34764) && f_10314_34739_34764(leftType)))))
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34786, 35703) || true) && (isNullableEquality)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 34786, 35703);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 34850, 35057);

                        resultSignature = f_10314_34868_35056(kind | BinaryOperatorKind.NullableNull, leftType: null, rightType: null, f_10314_34994_35055(this, SpecialType.System_Boolean, diagnostics, node));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35081, 35102);

                        foundOperator = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 34786, 35703);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 34786, 35703);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35184, 35212);

                        resultSignature = signature;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35234, 35284);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35306, 35349);

                        bool
                        leftDefault = f_10314_35325_35348(left)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35371, 35416);

                        bool
                        rightDefault = f_10314_35391_35415(right)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35438, 35620);

                        foundOperator = !isObjectEquality || (DynAbs.Tracing.TraceSender.Expression_False(10314, 35454, 35619) || f_10314_35475_35619(f_10314_35514_35525(), leftType, leftNull, leftDefault, rightType, rightNull, rightDefault, ref useSiteDiagnostics));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35642, 35684);

                        f_10314_35642_35683(diagnostics, node, useSiteDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 34786, 35703);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 33699, 35718);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35732, 35753);

                return foundOperator;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 32605, 35764);

                Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult
                f_10314_33044_33169(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.BinaryOperatorOverloadResolution(kind, left, right, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 33044, 33169);
                    return return_v;
                }


                bool
                f_10314_33703_33717_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 33703, 33717);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_33836_33853(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 33836, 33853);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                f_10314_33769_33854(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                returnType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature(kind, leftType: leftType, rightType: rightType, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)returnType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 33769, 33854);
                    return return_v;
                }


                bool
                f_10314_34176_34196(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34176, 34196);
                    return return_v;
                }


                bool
                f_10314_34232_34253(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34232, 34253);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_34296_34305(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 34296, 34305);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_34347_34357(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 34347, 34357);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_34462_34487(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34462, 34487);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_34519_34544(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34519, 34544);
                    return return_v;
                }


                bool
                f_10314_34643_34669(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsNullableType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34643, 34669);
                    return return_v;
                }


                bool
                f_10314_34739_34764(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsNullableType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34739, 34764);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_34994_35055(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34994, 35055);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                f_10314_34868_35056(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                leftType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                rightType, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                returnType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature(kind, leftType: leftType, rightType: rightType, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)returnType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 34868, 35056);
                    return return_v;
                }


                bool
                f_10314_35325_35348(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 35325, 35348);
                    return return_v;
                }


                bool
                f_10314_35391_35415(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 35391, 35415);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_35514_35525()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 35514, 35525);
                    return return_v;
                }


                bool
                f_10314_35475_35619(Microsoft.CodeAnalysis.CSharp.Conversions
                Conversions, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                leftType, bool
                leftIsNull, bool
                leftIsDefault, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                rightType, bool
                rightIsNull, bool
                rightIsDefault, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = BuiltInOperators.IsValidObjectEquality(Conversions, leftType, leftIsNull, leftIsDefault, rightType, rightIsNull, rightIsDefault, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 35475, 35619);
                    return return_v;
                }


                bool
                f_10314_35642_35683(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 35642, 35683);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 32605, 35764);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 32605, 35764);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void ReportUnaryOperatorError(CSharpSyntaxNode node, DiagnosticBag diagnostics, string operatorName, BoundExpression operand, LookupResultKind resultKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 35776, 36574);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 35970, 36188) || true) && (f_10314_35974_36000(operand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 35970, 36188);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 36166, 36173);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 35970, 36188);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 36204, 36416);

                ErrorCode
                errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 36226, 36266) || ((resultKind == LookupResultKind.Ambiguous && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 36286, 36312)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 36391, 36415))) ? ErrorCode.ERR_AmbigUnaryOp : ErrorCode.ERR_BadUnaryOp
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 36496, 36563);

                f_10314_36496_36562(diagnostics, errorCode, node, operatorName, f_10314_36546_36561(operand));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 35776, 36574);

                bool
                f_10314_35974_36000(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 35974, 36000);
                    return return_v;
                }


                object
                f_10314_36546_36561(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 36546, 36561);
                    return return_v;
                }


                int
                f_10314_36496_36562(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 36496, 36562);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 35776, 36574);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 35776, 36574);
            }
        }

        private void ReportAssignmentOperatorError(AssignmentExpressionSyntax node, DiagnosticBag diagnostics, BoundExpression left, BoundExpression right, LookupResultKind resultKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 36586, 37717);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 36787, 37706) || true) && (((SyntaxKind)node.OperatorToken.RawKind == SyntaxKind.PlusEqualsToken || (DynAbs.Tracing.TraceSender.Expression_False(10314, 36792, 36933) || (SyntaxKind)node.OperatorToken.RawKind == SyntaxKind.MinusEqualsToken)) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 36791, 36980) && (object)f_10314_36963_36972(left) != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 36791, 37023) && f_10314_36984_37002(f_10314_36984_36993(left)) == TypeKind.Delegate))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 36787, 37706);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37147, 37197);

                    HashSet<DiagnosticInfo>
                    useSiteDiagnostics = null
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37215, 37324);

                    var
                    conversion = f_10314_37232_37323(f_10314_37232_37248(this), right, f_10314_37289_37298(left), ref useSiteDiagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37342, 37379);

                    f_10314_37342_37378(f_10314_37355_37377_M(!conversion.IsImplicit));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37397, 37486);

                    f_10314_37397_37485(this, diagnostics, right.Syntax, conversion, right, f_10314_37475_37484(left));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 36787, 37706);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 36787, 37706);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37601, 37691);

                    f_10314_37601_37690(node, diagnostics, f_10314_37646_37664(node), left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 36787, 37706);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 36586, 37717);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_36963_36972(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 36963, 36972);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_36984_36993(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 36984, 36993);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeKind
                f_10314_36984_37002(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.TypeKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 36984, 37002);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_37232_37248(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 37232, 37248);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_37289_37298(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 37289, 37298);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_37232_37323(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 37232, 37323);
                    return return_v;
                }


                bool
                f_10314_37355_37377_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 37355, 37377);
                    return return_v;
                }


                int
                f_10314_37342_37378(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 37342, 37378);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_37475_37484(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 37475, 37484);
                    return return_v;
                }


                int
                f_10314_37397_37485(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 37397, 37485);
                    return 0;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_37646_37664(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.OperatorToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 37646, 37664);
                    return return_v;
                }


                int
                f_10314_37601_37690(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxToken
                operatorToken, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportBinaryOperatorError((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)node, diagnostics, operatorToken, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 37601, 37690);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 36586, 37717);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 36586, 37717);
            }
        }

        private static void ReportBinaryOperatorError(ExpressionSyntax node, DiagnosticBag diagnostics, SyntaxToken operatorToken, BoundExpression left, BoundExpression right, LookupResultKind resultKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 37729, 40290);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 37950, 38082);

                bool
                isEquality = operatorToken.Kind() == SyntaxKind.EqualsEqualsToken || (DynAbs.Tracing.TraceSender.Expression_False(10314, 37968, 38081) || operatorToken.Kind() == SyntaxKind.ExclamationEqualsToken)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38096, 39863);

                switch (f_10314_38104_38113(left), f_10314_38115_38125(right))
                {

                    case (BoundKind.DefaultLiteral, _) when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38194, 38210) || true) && (!isEquality) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 38194, 38210) || true)
                :
                    case (_, BoundKind.DefaultLiteral) when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38264, 38280) || true) && (!isEquality) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 38264, 38280) || true)
                :
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38402, 38499);

                        f_10314_38402_38498(diagnostics, ErrorCode.ERR_BadOpOnNullOrDefaultOrNew, node, operatorToken.Text, "default");
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38521, 38528);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);

                    case (BoundKind.DefaultLiteral, BoundKind.DefaultLiteral):
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38626, 38739);

                        f_10314_38626_38738(diagnostics, ErrorCode.ERR_AmbigBinaryOpsOnDefault, node, operatorToken.Text, f_10314_38710_38722(left), f_10314_38724_38737(right));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38761, 38768);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);

                    case (BoundKind.DefaultLiteral, _) when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38821, 38859) || true) && (f_10314_38826_38836(right) is TypeParameterSymbol) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 38821, 38859) || true)
                :
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38882, 38924);

                        f_10314_38882_38923(f_10314_38895_38922_M(!f_10314_38896_38906(right).IsReferenceType));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 38946, 39055);

                        f_10314_38946_39054(diagnostics, ErrorCode.ERR_AmbigBinaryOpsOnUnconstrainedDefault, node, operatorToken.Text, f_10314_39043_39053(right));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39077, 39084);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);

                    case (_, BoundKind.DefaultLiteral) when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39137, 39174) || true) && (f_10314_39142_39151(left) is TypeParameterSymbol) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 39137, 39174) || true)
                :
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39197, 39238);

                        f_10314_39197_39237(f_10314_39210_39236_M(!f_10314_39211_39220(left).IsReferenceType));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39260, 39368);

                        f_10314_39260_39367(diagnostics, ErrorCode.ERR_AmbigBinaryOpsOnUnconstrainedDefault, node, operatorToken.Text, f_10314_39357_39366(left));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39390, 39397);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);

                    case (BoundKind.UnconvertedObjectCreationExpression, _):
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39493, 39593);

                        f_10314_39493_39592(diagnostics, ErrorCode.ERR_BadOpOnNullOrDefaultOrNew, node, operatorToken.Text, f_10314_39579_39591(left));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39615, 39622);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);

                    case (_, BoundKind.UnconvertedObjectCreationExpression):
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 38096, 39863);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39718, 39819);

                        f_10314_39718_39818(diagnostics, ErrorCode.ERR_BadOpOnNullOrDefaultOrNew, node, operatorToken.Text, f_10314_39804_39817(right));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39841, 39848);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 38096, 39863);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 39879, 40103);

                ErrorCode
                errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 39901, 39941) || ((resultKind == LookupResultKind.Ambiguous && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 39961, 39989)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 40076, 40102))) ? ErrorCode.ERR_AmbigBinaryOps : ErrorCode.ERR_BadBinaryOps
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40194, 40279);

                f_10314_40194_40278(diagnostics, errorCode, node, operatorToken.Text, f_10314_40250_40262(left), f_10314_40264_40277(right));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 37729, 40290);

                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_38104_38113(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38104, 38113);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_38115_38125(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38115, 38125);
                    return return_v;
                }


                int
                f_10314_38402_38498(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 38402, 38498);
                    return 0;
                }


                object
                f_10314_38710_38722(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38710, 38722);
                    return return_v;
                }


                object
                f_10314_38724_38737(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38724, 38737);
                    return return_v;
                }


                int
                f_10314_38626_38738(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 38626, 38738);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_38826_38836(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38826, 38836);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_38896_38906(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38896, 38906);
                    return return_v;
                }


                bool
                f_10314_38895_38922_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 38895, 38922);
                    return return_v;
                }


                int
                f_10314_38882_38923(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 38882, 38923);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_39043_39053(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39043, 39053);
                    return return_v;
                }


                int
                f_10314_38946_39054(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 38946, 39054);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_39142_39151(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39142, 39151);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_39211_39220(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39211, 39220);
                    return return_v;
                }


                bool
                f_10314_39210_39236_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39210, 39236);
                    return return_v;
                }


                int
                f_10314_39197_39237(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 39197, 39237);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_39357_39366(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39357, 39366);
                    return return_v;
                }


                int
                f_10314_39260_39367(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 39260, 39367);
                    return 0;
                }


                object
                f_10314_39579_39591(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39579, 39591);
                    return return_v;
                }


                int
                f_10314_39493_39592(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 39493, 39592);
                    return 0;
                }


                object
                f_10314_39804_39817(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 39804, 39817);
                    return return_v;
                }


                int
                f_10314_39718_39818(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 39718, 39818);
                    return 0;
                }


                object
                f_10314_40250_40262(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 40250, 40262);
                    return return_v;
                }


                object
                f_10314_40264_40277(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 40264, 40277);
                    return return_v;
                }


                int
                f_10314_40194_40278(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40194, 40278);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 37729, 40290);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 37729, 40290);
            }
        }

        private BoundExpression BindConditionalLogicalOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 40302, 41677);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40437, 40547);

                f_10314_40437_40546(f_10314_40450_40461(node) == SyntaxKind.LogicalOrExpression || (DynAbs.Tracing.TraceSender.Expression_False(10314, 40450, 40545) || f_10314_40499_40510(node) == SyntaxKind.LogicalAndExpression));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40640, 40677);

                BinaryExpressionSyntax
                binary = node
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40691, 40714);

                ExpressionSyntax
                child
                = default(ExpressionSyntax);
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40730, 41175) || true) && (true)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 40730, 41175);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40775, 40795);

                        child = f_10314_40783_40794(binary);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40813, 40865);

                        var
                        childAsBinary = child as BinaryExpressionSyntax
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 40885, 41117) || true) && (childAsBinary == null || (DynAbs.Tracing.TraceSender.Expression_False(10314, 40889, 41050) || (f_10314_40936_40956(childAsBinary) != SyntaxKind.LogicalOrExpression && (DynAbs.Tracing.TraceSender.Expression_True(10314, 40936, 41049) && f_10314_40994_41014(childAsBinary) != SyntaxKind.LogicalAndExpression))))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 40885, 41117);
                            DynAbs.Tracing.TraceSender.TraceBreak(10314, 41092, 41098);

                            break;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 40885, 41117);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41137, 41160);

                        binary = childAsBinary;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 40730, 41175);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 40730, 41175);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 40730, 41175);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41191, 41262);

                BoundExpression
                left = f_10314_41214_41261(this, child, diagnostics)
                ;
                {
                    try
                    {
                        do

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 41278, 41638);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41313, 41359);

                            binary = (BinaryExpressionSyntax)f_10314_41346_41358(child);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41377, 41456);

                            BoundExpression
                            right = f_10314_41401_41455(this, f_10314_41429_41441(binary), diagnostics)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41474, 41546);

                            left = f_10314_41481_41545(this, binary, left, right, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41564, 41579);

                            child = binary;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 41278, 41638);
                        }
                        while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41278, 41638) || true) && ((object)child != node)
                        );
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 41278, 41638);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 41278, 41638);
                    }
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41654, 41666);

                return left;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 40302, 41677);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_40450_40461(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40450, 40461);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_40499_40510(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40499, 40510);
                    return return_v;
                }


                int
                f_10314_40437_40546(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40437, 40546);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_40783_40794(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 40783, 40794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_40936_40956(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40936, 40956);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_40994_41014(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 40994, 41014);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_41214_41261(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindRValueWithoutTargetType(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41214, 41261);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10314_41346_41358(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 41346, 41358);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_41429_41441(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax?
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 41429, 41441);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_41401_41455(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindRValueWithoutTargetType(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41401, 41455);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_41481_41545(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConditionalLogicalOperator(node, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41481, 41545);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 40302, 41677);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 40302, 41677);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindConditionalLogicalOperator(BinaryExpressionSyntax node, BoundExpression left, BoundExpression right, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 41689, 47998);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41869, 41939);

                BinaryOperatorKind
                kind = f_10314_41895_41938(f_10314_41926_41937(node))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 41955, 42047);

                f_10314_41955_42046(kind == BinaryOperatorKind.LogicalAnd || (DynAbs.Tracing.TraceSender.Expression_False(10314, 41968, 42045) || kind == BinaryOperatorKind.LogicalOr));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 42318, 43014) || true) && ((object)f_10314_42330_42339(left) != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 42322, 42402) && f_10314_42351_42372(f_10314_42351_42360(left)) == SpecialType.System_Boolean) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 42322, 42449) && (object)f_10314_42431_42441(right) != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 42322, 42505) && f_10314_42453_42475(f_10314_42453_42463(right)) == SpecialType.System_Boolean))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 42318, 43014);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 42539, 42670);

                    var
                    constantValue = f_10314_42559_42669(this, node, kind | BinaryOperatorKind.Bool, left, right, SpecialType.System_Boolean, diagnostics)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 42753, 42999);

                    return f_10314_42760_42998(node, kind | BinaryOperatorKind.Bool, constantValue, methodOpt: null, resultKind: LookupResultKind.Viable, left, right, type: f_10314_42931_42940(left), hasErrors: constantValue != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 42953, 42997) && f_10314_42978_42997(constantValue)));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 42318, 43014);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43181, 43570) || true) && (f_10314_43185_43202(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 43185, 43224) || f_10314_43206_43224(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 43181, 43570);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43321, 43555);

                    return f_10314_43328_43554(node, kind, ConstantValue.NotAvailable, methodOpt: null, resultKind: LookupResultKind.Empty, left, right, type: f_10314_43485_43536(this, kind, diagnostics, node), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 43181, 43570);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43586, 43883) || true) && (f_10314_43590_43611(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 43590, 43637) || f_10314_43615_43637(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 43586, 43883);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43671, 43715);

                    left = f_10314_43678_43714(this, left, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43733, 43779);

                    right = f_10314_43741_43778(this, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43797, 43868);

                    return f_10314_43804_43867(this, node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 43586, 43883);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43899, 43929);

                LookupResultKind
                lookupResult
                = default(LookupResultKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 43943, 44001);

                ImmutableArray<MethodSymbol>
                originalUserDefinedOperators
                = default(ImmutableArray<MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 44015, 44154);

                var
                best = f_10314_44026_44153(this, kind, left, right, node, diagnostics, out lookupResult, out originalUserDefinedOperators)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 44845, 47762) || true) && (f_10314_44849_44863_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 44845, 47762);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 44897, 44989);

                    f_10314_44897_44988(node, diagnostics, f_10314_44942_44960(node), left, right, lookupResult);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 44845, 47762);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 44845, 47762);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45235, 45286);

                    BinaryOperatorSignature
                    signature = best.Signature
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45306, 45473);

                    bool
                    bothBool = f_10314_45322_45352(signature.LeftType) == SpecialType.System_Boolean && (DynAbs.Tracing.TraceSender.Expression_True(10314, 45322, 45472) && f_10314_45411_45442(signature.RightType) == SpecialType.System_Boolean)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45493, 45548);

                    MethodSymbol
                    trueOperator = null
                    ,
                    falseOperator = null
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45568, 47747) || true) && (!bothBool && (DynAbs.Tracing.TraceSender.Expression_True(10314, 45572, 45616) && !f_10314_45586_45616(signature.Kind)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 45568, 47747);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45658, 45750);

                        f_10314_45658_45749(node, diagnostics, f_10314_45703_45721(node), left, right, lookupResult);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 45568, 47747);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 45568, 47747);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45792, 47747) || true) && (bothBool || (DynAbs.Tracing.TraceSender.Expression_False(10314, 45796, 45919) || f_10314_45808_45919(this, node, signature, diagnostics, out trueOperator, out falseOperator)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 45792, 47747);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 45961, 46055);

                            var
                            resultLeft = f_10314_45978_46054(this, left, best.LeftConversion, signature.LeftType, diagnostics)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46077, 46175);

                            var
                            resultRight = f_10314_46095_46174(this, right, best.RightConversion, signature.RightType, diagnostics)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46197, 46251);

                            var
                            resultKind = kind | f_10314_46221_46250(signature.Kind)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46273, 46415) || true) && (f_10314_46277_46302(signature.Kind))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 46273, 46415);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46352, 46392);

                                resultKind |= BinaryOperatorKind.Lifted;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 46273, 46415);
                            }

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46439, 47728) || true) && (f_10314_46443_46469(resultKind))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 46439, 47728);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46519, 46579);

                                f_10314_46519_46578(trueOperator != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 46532, 46577) && falseOperator != null));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 46607, 47108);

                                return f_10314_46614_47107(node, resultKind, resultLeft, resultRight, signature.Method, trueOperator, falseOperator, lookupResult, originalUserDefinedOperators, signature.ReturnType);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 46439, 47728);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 46439, 47728);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 47206, 47229);

                                f_10314_47206_47228(bothBool);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 47257, 47705);

                                return f_10314_47264_47704(node, resultKind, resultLeft, resultRight, ConstantValue.NotAvailable, signature.Method, lookupResult, originalUserDefinedOperators, signature.ReturnType);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 46439, 47728);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 45792, 47747);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 45568, 47747);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 44845, 47762);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 47828, 47987);

                return f_10314_47835_47986(node, kind, left, right, ConstantValue.NotAvailable, null, lookupResult, originalUserDefinedOperators, f_10314_47962_47979(this), true);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 41689, 47998);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_41926_41937(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41926, 41937);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_41895_41938(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxKindToBinaryOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41895, 41938);
                    return return_v;
                }


                int
                f_10314_41955_42046(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 41955, 42046);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_42330_42339(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42330, 42339);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_42351_42360(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42351, 42360);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_42351_42372(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42351, 42372);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_42431_42441(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42431, 42441);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_42453_42463(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42453, 42463);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_42453_42475(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42453, 42475);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_42559_42669(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.SpecialType
                resultType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldBinaryOperator((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, kind, left, right, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 42559, 42669);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_42931_42940(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42931, 42940);
                    return return_v;
                }


                bool
                f_10314_42978_42997(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 42978, 42997);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_42760_42998(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.ConstantValue?
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, constantValueOpt, methodOpt: methodOpt, resultKind: resultKind, left, right, type: type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 42760, 42998);
                    return return_v;
                }


                bool
                f_10314_43185_43202(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 43185, 43202);
                    return return_v;
                }


                bool
                f_10314_43206_43224(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 43206, 43224);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_43485_43536(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinaryOperatorErrorType(kind, diagnostics, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43485, 43536);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_43328_43554(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, constantValueOpt, methodOpt: methodOpt, resultKind: resultKind, left, right, type: type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43328, 43554);
                    return return_v;
                }


                bool
                f_10314_43590_43611(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43590, 43611);
                    return return_v;
                }


                bool
                f_10314_43615_43637(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43615, 43637);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_43678_43714(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43678, 43714);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_43741_43778(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43741, 43778);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_43804_43867(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDynamicBinaryOperator(node, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 43804, 43867);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult
                f_10314_44026_44153(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.BinaryOperatorOverloadResolution(kind, left, right, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 44026, 44153);
                    return return_v;
                }


                bool
                f_10314_44849_44863_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 44849, 44863);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_44942_44960(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.OperatorToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 44942, 44960);
                    return return_v;
                }


                int
                f_10314_44897_44988(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxToken
                operatorToken, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportBinaryOperatorError((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)node, diagnostics, operatorToken, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 44897, 44988);
                    return 0;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_45322_45352(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 45322, 45352);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_45411_45442(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 45411, 45442);
                    return return_v;
                }


                bool
                f_10314_45586_45616(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsUserDefined();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 45586, 45616);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_45703_45721(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.OperatorToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 45703, 45721);
                    return return_v;
                }


                int
                f_10314_45658_45749(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxToken
                operatorToken, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportBinaryOperatorError((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)node, diagnostics, operatorToken, left, right, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 45658, 45749);
                    return 0;
                }


                bool
                f_10314_45808_45919(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorSignature
                signature, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                trueOperator, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                falseOperator)
                {
                    var return_v = this_param.IsValidUserDefinedConditionalLogicalOperator((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, signature, diagnostics, out trueOperator, out falseOperator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 45808, 45919);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_45978_46054(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 45978, 46054);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_46095_46174(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, conversion, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46095, 46174);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_46221_46250(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46221, 46250);
                    return return_v;
                }


                bool
                f_10314_46277_46302(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLifted();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46277, 46302);
                    return return_v;
                }


                bool
                f_10314_46443_46469(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsUserDefined();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46443, 46469);
                    return return_v;
                }


                int
                f_10314_46519_46578(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46519, 46578);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator
                f_10314_46614_47107(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                logicalOperator, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                trueOperator, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                falseOperator, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUserDefinedConditionalLogicalOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, left, right, logicalOperator, trueOperator, falseOperator, resultKind, originalUserDefinedOperatorsOpt, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 46614, 47107);
                    return return_v;
                }


                int
                f_10314_47206_47228(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 47206, 47228);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_47264_47704(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, left, right, constantValueOpt, methodOpt, resultKind, originalUserDefinedOperatorsOpt, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 47264, 47704);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_47962_47979(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 47962, 47979);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator
                f_10314_47835_47986(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBinaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, left, right, constantValueOpt, methodOpt, resultKind, originalUserDefinedOperatorsOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 47835, 47986);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 41689, 47998);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 41689, 47998);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsValidDynamicCondition(BoundExpression left, bool isNegative, ref HashSet<DiagnosticInfo> useSiteDiagnostics, out MethodSymbol userDefinedOperator)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 48010, 49132);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48196, 48223);

                userDefinedOperator = null;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48239, 48260);

                var
                type = f_10314_48250_48259(left)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48274, 48360) || true) && ((object)type == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 48274, 48360);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48332, 48345);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 48274, 48360);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48376, 48457) || true) && (f_10314_48380_48396(type))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 48376, 48457);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48430, 48442);

                    return true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 48376, 48457);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48473, 48637);

                var
                implicitConversion = f_10314_48498_48636(f_10314_48498_48509(), left, f_10314_48557_48611(f_10314_48557_48568(), SpecialType.System_Boolean), ref useSiteDiagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48651, 48741) || true) && (implicitConversion.Exists)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 48651, 48741);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48714, 48726);

                    return true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 48651, 48741);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48757, 48856) || true) && (f_10314_48761_48770(type) != SymbolKind.NamedType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 48757, 48856);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48828, 48841);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 48757, 48856);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48872, 48912);

                var
                namedType = type as NamedTypeSymbol
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 48926, 49121);

                return f_10314_48933_49120(this, namedType, (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 48973, 48983) || ((isNegative && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 48986, 49024)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 49027, 49064))) ? WellKnownMemberNames.FalseOperatorName : WellKnownMemberNames.TrueOperatorName, type, ref useSiteDiagnostics, out userDefinedOperator);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 48010, 49132);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_48250_48259(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 48250, 48259);
                    return return_v;
                }


                bool
                f_10314_48380_48396(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 48380, 48396);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_48498_48509()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 48498, 48509);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_48557_48568()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 48557, 48568);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_48557_48611(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param, Microsoft.CodeAnalysis.SpecialType
                specialType)
                {
                    var return_v = this_param.GetSpecialType(specialType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 48557, 48611);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_48498_48636(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyImplicitConversionFromExpression(sourceExpression, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 48498, 48636);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10314_48761_48770(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 48761, 48770);
                    return return_v;
                }


                bool
                f_10314_48933_49120(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                containingType, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                argumentType, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                @operator)
                {
                    var return_v = this_param.HasApplicableBooleanOperator(containingType, name, argumentType, ref useSiteDiagnostics, out @operator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 48933, 49120);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 48010, 49132);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 48010, 49132);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsValidUserDefinedConditionalLogicalOperator(
                    CSharpSyntaxNode syntax,
                    BinaryOperatorSignature signature,
                    DiagnosticBag diagnostics,
                    out MethodSymbol trueOperator,
                    out MethodSymbol falseOperator)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 49144, 57981);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 49442, 49520);

                f_10314_49442_49519(f_10314_49455_49484(signature.Kind) == BinaryOperatorKind.UserDefined);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 51994, 52063);

                NamedTypeSymbol
                t = (NamedTypeSymbol)f_10314_52031_52062(signature.Method)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 52305, 52521);

                bool
                typesAreSame = f_10314_52325_52420(signature.LeftType, signature.RightType, TypeCompareKind.ConsiderEverything2) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 52325, 52520) && f_10314_52424_52520(signature.LeftType, signature.ReturnType, TypeCompareKind.ConsiderEverything2))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 52535, 52812);

                bool
                typeMatchesContainer = f_10314_52563_52642(signature.ReturnType, t, TypeCompareKind.ConsiderEverything2) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 52563, 52811) || f_10314_52663_52700(signature.ReturnType) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 52663, 52811) && f_10314_52704_52811(f_10314_52722_52770(signature.ReturnType), t, TypeCompareKind.ConsiderEverything2)))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 52828, 53294) || true) && (!typesAreSame || (DynAbs.Tracing.TraceSender.Expression_False(10314, 52832, 52870) || !typeMatchesContainer))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 52828, 53294);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53099, 53169);

                    f_10314_53099_53168(diagnostics, ErrorCode.ERR_BadBoolOp, syntax, signature.Method);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53189, 53209);

                    trueOperator = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53227, 53248);

                    falseOperator = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53266, 53279);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 52828, 53294);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53567, 53617);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 53631, 54680) || true) && (!f_10314_53636_53768(this, t, WellKnownMemberNames.TrueOperatorName, signature.LeftType, ref useSiteDiagnostics, out trueOperator) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 53635, 53924) || !f_10314_53790_53924(this, t, WellKnownMemberNames.FalseOperatorName, signature.LeftType, ref useSiteDiagnostics, out falseOperator)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 53631, 54680);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54417, 54493);

                    f_10314_54417_54492(diagnostics, ErrorCode.ERR_MustHaveOpTF, syntax, signature.Method, t);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54511, 54555);

                    f_10314_54511_54554(diagnostics, syntax, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54575, 54595);

                    trueOperator = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54613, 54634);

                    falseOperator = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54652, 54665);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 53631, 54680);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 54696, 54740);

                f_10314_54696_54739(
                            diagnostics, syntax, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 57958, 57970);

                return true;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 49144, 57981);

                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_49455_49484(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.OperandTypes();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 49455, 49484);
                    return return_v;
                }


                int
                f_10314_49442_49519(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 49442, 49519);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_52031_52062(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 52031, 52062);
                    return return_v;
                }


                bool
                f_10314_52325_52420(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52325, 52420);
                    return return_v;
                }


                bool
                f_10314_52424_52520(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52424, 52520);
                    return return_v;
                }


                bool
                f_10314_52563_52642(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52563, 52642);
                    return return_v;
                }


                bool
                f_10314_52663_52700(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsNullableType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52663, 52700);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_52722_52770(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.GetNullableUnderlyingType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52722, 52770);
                    return return_v;
                }


                bool
                f_10314_52704_52811(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 52704, 52811);
                    return return_v;
                }


                int
                f_10314_53099_53168(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 53099, 53168);
                    return 0;
                }


                bool
                f_10314_53636_53768(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                containingType, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                argumentType, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                @operator)
                {
                    var return_v = this_param.HasApplicableBooleanOperator(containingType, name, argumentType, ref useSiteDiagnostics, out @operator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 53636, 53768);
                    return return_v;
                }


                bool
                f_10314_53790_53924(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                containingType, string
                name, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                argumentType, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                @operator)
                {
                    var return_v = this_param.HasApplicableBooleanOperator(containingType, name, argumentType, ref useSiteDiagnostics, out @operator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 53790, 53924);
                    return return_v;
                }


                int
                f_10314_54417_54492(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 54417, 54492);
                    return 0;
                }


                bool
                f_10314_54511_54554(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 54511, 54554);
                    return return_v;
                }


                bool
                f_10314_54696_54739(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 54696, 54739);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 49144, 57981);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 49144, 57981);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool HasApplicableBooleanOperator(NamedTypeSymbol containingType, string name, TypeSymbol argumentType, ref HashSet<DiagnosticInfo> useSiteDiagnostics, out MethodSymbol @operator)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 57993, 59126);
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58214, 58235);
                    for (var
        type = containingType
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58205, 59055) || true) && ((object)type != null)
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58259, 58335)
        , type = f_10314_58266_58335(type, ref useSiteDiagnostics), DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 58205, 59055))

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 58205, 59055);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58369, 58409);

                        var
                        operators = f_10314_58385_58408(type, name)
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58436, 58441);
                            for (var
            i = 0
            ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58427, 59040) || true) && (i < operators.Length)
            ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58465, 58468)
            , i++, DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 58427, 59040))

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 58427, 59040);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58510, 58532);

                                var
                                op = operators[i]
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58554, 59021) || true) && (f_10314_58558_58575(op) == 1 && (DynAbs.Tracing.TraceSender.Expression_True(10314, 58558, 58632) && f_10314_58584_58608(op) == Accessibility.Public))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 58554, 59021);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58682, 58805);

                                    var
                                    conversion = f_10314_58699_58804(f_10314_58699_58715(this), argumentType, f_10314_58757_58779(op, 0), ref useSiteDiagnostics)
                                    ;

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58831, 58998) || true) && (conversion.IsImplicit)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 58831, 58998);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58914, 58929);

                                        @operator = op;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 58959, 58971);

                                        return true;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 58831, 58998);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 58554, 59021);
                                }
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 1, 614);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 1, 614);
                        }
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 1, 851);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 1, 851);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 59071, 59088);

                @operator = null;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 59102, 59115);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 57993, 59126);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_58266_58335(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.BaseTypeWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 58266, 58335);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10314_58385_58408(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param, string
                name)
                {
                    var return_v = this_param.GetOperators(name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 58385, 58408);
                    return return_v;
                }


                int
                f_10314_58558_58575(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 58558, 58575);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Accessibility
                f_10314_58584_58608(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.DeclaredAccessibility;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 58584, 58608);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_58699_58715(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 58699, 58715);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_58757_58779(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param, int
                index)
                {
                    var return_v = this_param.GetParameterType(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 58757, 58779);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_58699_58804(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromType(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 58699, 58804);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 57993, 59126);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 57993, 59126);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private TypeSymbol GetBinaryOperatorErrorType(BinaryOperatorKind kind, DiagnosticBag diagnostics, CSharpSyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 59138, 59824);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 59283, 59813);

                switch (kind)
                {

                    case BinaryOperatorKind.Equal:
                    case BinaryOperatorKind.NotEqual:
                    case BinaryOperatorKind.GreaterThan:
                    case BinaryOperatorKind.LessThan:
                    case BinaryOperatorKind.GreaterThanOrEqual:
                    case BinaryOperatorKind.LessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 59283, 59813);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 59656, 59725);

                        return f_10314_59663_59724(this, SpecialType.System_Boolean, diagnostics, node);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 59283, 59813);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 59283, 59813);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 59773, 59798);

                        return f_10314_59780_59797(this);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 59283, 59813);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 59138, 59824);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_59663_59724(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 59663, 59724);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_59780_59797(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 59780, 59797);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 59138, 59824);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 59138, 59824);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BinaryOperatorAnalysisResult BinaryOperatorOverloadResolution(BinaryOperatorKind kind, BoundExpression left, BoundExpression right, CSharpSyntaxNode node, DiagnosticBag diagnostics, out LookupResultKind resultKind, out ImmutableArray<MethodSymbol> originalUserDefinedOperators)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 59836, 62412);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60146, 60468) || true) && (!f_10314_60151_60213(this, kind, left, right))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 60146, 60468);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60247, 60303);

                    resultKind = LookupResultKind.OverloadResolutionFailure;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60321, 60390);

                    originalUserDefinedOperators = default(ImmutableArray<MethodSymbol>);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60408, 60453);

                    return default(BinaryOperatorAnalysisResult);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 60146, 60468);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60484, 60550);

                var
                result = f_10314_60497_60549()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60564, 60614);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60628, 60736);

                f_10314_60628_60735(f_10314_60628_60651(this), kind, left, right, result, ref useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60750, 60792);

                f_10314_60750_60791(diagnostics, node, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60808, 60839);

                var
                possiblyBest = f_10314_60827_60838(result)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60855, 62042) || true) && (f_10314_60859_60879(result.Results))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 60855, 62042);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60913, 60968);

                    var
                    builder = f_10314_60927_60967()
                    ;
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 60986, 61287);
                        foreach (var analysisResult in f_10314_61017_61031_I(result.Results))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 60986, 61287);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61073, 61127);

                            MethodSymbol
                            method = analysisResult.Signature.Method
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61149, 61268) || true) && ((object)method != null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 61149, 61268);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61225, 61245);

                                f_10314_61225_61244(builder, method);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 61149, 61268);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 60986, 61287);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 1, 302);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 1, 302);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61305, 61365);

                    originalUserDefinedOperators = f_10314_61336_61364(builder);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61385, 61791) || true) && (possiblyBest.HasValue)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 61385, 61791);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61452, 61489);

                        resultKind = LookupResultKind.Viable;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 61385, 61791);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 61385, 61791);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61531, 61791) || true) && (f_10314_61535_61552(result))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 61531, 61791);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61594, 61634);

                            resultKind = LookupResultKind.Ambiguous;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 61531, 61791);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 61531, 61791);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61716, 61772);

                            resultKind = LookupResultKind.OverloadResolutionFailure;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 61531, 61791);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 61385, 61791);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 60855, 62042);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 60855, 62042);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61857, 61923);

                    originalUserDefinedOperators = ImmutableArray<MethodSymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 61941, 62027);

                    resultKind = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 61954, 61975) || ((possiblyBest.HasValue && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 61978, 62001)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 62004, 62026))) ? LookupResultKind.Viable : LookupResultKind.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 60855, 62042);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62058, 62337) || true) && (possiblyBest is { HasValue: true, Signature: { Method: { } bestMethod } })
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 62058, 62337);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62169, 62248);

                    f_10314_62169_62247(this, bestMethod, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62266, 62322);

                    f_10314_62266_62321(bestMethod, diagnostics, node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 62058, 62337);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62353, 62367);

                f_10314_62353_62366(
                            result);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62381, 62401);

                return possiblyBest;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 59836, 62412);

                bool
                f_10314_60151_60213(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right)
                {
                    var return_v = this_param.IsTypelessExpressionAllowedInBinaryOperator(kind, left, right);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60151, 60213);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorOverloadResolutionResult
                f_10314_60497_60549()
                {
                    var return_v = BinaryOperatorOverloadResolutionResult.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60497, 60549);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.OverloadResolution
                f_10314_60628_60651(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.OverloadResolution;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 60628, 60651);
                    return return_v;
                }


                int
                f_10314_60628_60735(Microsoft.CodeAnalysis.CSharp.OverloadResolution
                this_param, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.CSharp.BinaryOperatorOverloadResolutionResult
                result, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    this_param.BinaryOperatorOverloadResolution(kind, left, right, result, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60628, 60735);
                    return 0;
                }


                bool
                f_10314_60750_60791(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60750, 60791);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult
                f_10314_60827_60838(Microsoft.CodeAnalysis.CSharp.BinaryOperatorOverloadResolutionResult
                this_param)
                {
                    var return_v = this_param.Best;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 60827, 60838);
                    return return_v;
                }


                bool
                f_10314_60859_60879(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult>
                this_param)
                {
                    var return_v = this_param.Any();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60859, 60879);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10314_60927_60967()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 60927, 60967);
                    return return_v;
                }


                int
                f_10314_61225_61244(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 61225, 61244);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult>
                f_10314_61017_61031_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BinaryOperatorAnalysisResult>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 61017, 61031);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10314_61336_61364(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 61336, 61364);
                    return return_v;
                }


                bool
                f_10314_61535_61552(Microsoft.CodeAnalysis.CSharp.BinaryOperatorOverloadResolutionResult
                this_param)
                {
                    var return_v = this_param.AnyValid();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 61535, 61552);
                    return return_v;
                }


                int
                f_10314_62169_62247(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                operatorMethod, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportObsoleteAndFeatureAvailabilityDiagnostics(operatorMethod, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 62169, 62247);
                    return 0;
                }


                bool
                f_10314_62266_62321(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = ReportUseSiteDiagnostics((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 62266, 62321);
                    return return_v;
                }


                int
                f_10314_62353_62366(Microsoft.CodeAnalysis.CSharp.BinaryOperatorOverloadResolutionResult
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 62353, 62366);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 59836, 62412);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 59836, 62412);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void ReportObsoleteAndFeatureAvailabilityDiagnostics(MethodSymbol operatorMethod, CSharpSyntaxNode node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 62424, 63076);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62588, 63065) || true) && ((object)operatorMethod != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 62588, 63065);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62656, 62743);

                    f_10314_62656_62742(this, diagnostics, operatorMethod, node, hasBaseReceiver: false);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62763, 63050) || true) && (f_10314_62767_62808(f_10314_62767_62796(operatorMethod)) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 62767, 62892) && f_10314_62833_62864(operatorMethod) != f_10314_62868_62892(f_10314_62868_62879())))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 62763, 63050);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 62934, 63031);

                        f_10314_62934_63030(node, MessageID.IDS_DefaultInterfaceImplementation, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 62763, 63050);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 62588, 63065);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 62424, 63076);

                int
                f_10314_62656_62742(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, bool
                hasBaseReceiver)
                {
                    this_param.ReportDiagnosticsIfObsolete(diagnostics, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol, (Microsoft.CodeAnalysis.SyntaxNode)node, hasBaseReceiver: hasBaseReceiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 62656, 62742);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_62767_62796(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 62767, 62796);
                    return return_v;
                }


                bool
                f_10314_62767_62808(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.IsInterface;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 62767, 62808);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ModuleSymbol
                f_10314_62833_62864(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ContainingModule;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 62833, 62864);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_62868_62879()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 62868, 62879);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ModuleSymbol
                f_10314_62868_62892(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.SourceModule;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 62868, 62892);
                    return return_v;
                }


                bool
                f_10314_62934_63030(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.MessageID
                feature, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = Binder.CheckFeatureAvailability((Microsoft.CodeAnalysis.SyntaxNode)syntax, feature, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 62934, 63030);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 62424, 63076);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 62424, 63076);
            }
        }

        private bool IsTypelessExpressionAllowedInBinaryOperator(BinaryOperatorKind kind, BoundExpression left, BoundExpression right)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 63088, 64051);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63519, 63669) || true) && (f_10314_63523_63554(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 63523, 63607) || f_10314_63575_63607(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 63519, 63669);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63641, 63654);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 63519, 63669);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63685, 63775);

                bool
                isEquality = kind == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10314, 63703, 63774) || kind == BinaryOperatorKind.NotEqual)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63789, 64040) || true) && (isEquality)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 63789, 64040);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63837, 63898);

                    return !f_10314_63845_63868(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 63844, 63897) || !f_10314_63873_63897(right));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 63789, 64040);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 63789, 64040);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 63964, 64025);

                    return !f_10314_63972_63995(left) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 63971, 64024) && !f_10314_64000_64024(right));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 63789, 64040);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 63088, 64051);

                bool
                f_10314_63523_63554(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsImplicitObjectCreation();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 63523, 63554);
                    return return_v;
                }


                bool
                f_10314_63575_63607(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsImplicitObjectCreation();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 63575, 63607);
                    return return_v;
                }


                bool
                f_10314_63845_63868(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 63845, 63868);
                    return return_v;
                }


                bool
                f_10314_63873_63897(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 63873, 63897);
                    return return_v;
                }


                bool
                f_10314_63972_63995(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 63972, 63995);
                    return return_v;
                }


                bool
                f_10314_64000_64024(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralDefault();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64000, 64024);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 63088, 64051);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 63088, 64051);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private UnaryOperatorAnalysisResult UnaryOperatorOverloadResolution(
                    UnaryOperatorKind kind,
                    BoundExpression operand,
                    CSharpSyntaxNode node,
                    DiagnosticBag diagnostics,
                    out LookupResultKind resultKind,
                    out ImmutableArray<MethodSymbol> originalUserDefinedOperators)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 64063, 67528);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64429, 64494);

                var
                result = f_10314_64442_64493()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64508, 64558);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64572, 64675);

                f_10314_64572_64674(f_10314_64572_64595(this), kind, operand, result, ref useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64689, 64731);

                f_10314_64689_64730(diagnostics, node, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64747, 64778);

                var
                possiblyBest = f_10314_64766_64777(result)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64794, 67158) || true) && (f_10314_64798_64818(result.Results))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 64794, 67158);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64852, 64907);

                    var
                    builder = f_10314_64866_64906()
                    ;
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 64925, 65226);
                        foreach (var analysisResult in f_10314_64956_64970_I(result.Results))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 64925, 65226);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65012, 65066);

                            MethodSymbol
                            method = analysisResult.Signature.Method
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65088, 65207) || true) && ((object)method != null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 65088, 65207);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65164, 65184);

                                f_10314_65164_65183(builder, method);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 65088, 65207);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 64925, 65226);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 1, 302);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 1, 302);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65244, 65304);

                    originalUserDefinedOperators = f_10314_65275_65303(builder);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65324, 66907) || true) && (possiblyBest.HasValue)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 65324, 66907);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65391, 65428);

                        resultKind = LookupResultKind.Viable;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 65324, 66907);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 65324, 66907);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 65470, 66907) || true) && (f_10314_65474_65491(result))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 65470, 66907);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 66206, 66750) || true) && (kind == UnaryOperatorKind.UnaryMinus && (DynAbs.Tracing.TraceSender.Expression_True(10314, 66210, 66303) && (object)f_10314_66283_66295(operand) != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 66210, 66483) && (f_10314_66333_66357(f_10314_66333_66345(operand)) == SpecialType.System_UInt64 || (DynAbs.Tracing.TraceSender.Expression_False(10314, 66333, 66482) || (f_10314_66391_66415(f_10314_66391_66403(operand)) == SpecialType.System_UIntPtr && (DynAbs.Tracing.TraceSender.Expression_True(10314, 66391, 66481) && f_10314_66449_66481(f_10314_66449_66461(operand))))))))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 66206, 66750);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 66533, 66589);

                                resultKind = LookupResultKind.OverloadResolutionFailure;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 66206, 66750);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 66206, 66750);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 66687, 66727);

                                resultKind = LookupResultKind.Ambiguous;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 66206, 66750);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 65470, 66907);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 65470, 66907);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 66832, 66888);

                            resultKind = LookupResultKind.OverloadResolutionFailure;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 65470, 66907);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 65324, 66907);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 64794, 67158);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 64794, 67158);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 66973, 67039);

                    originalUserDefinedOperators = ImmutableArray<MethodSymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67057, 67143);

                    resultKind = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 67070, 67091) || ((possiblyBest.HasValue && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 67094, 67117)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 67120, 67142))) ? LookupResultKind.Viable : LookupResultKind.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 64794, 67158);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67174, 67453) || true) && (possiblyBest is { HasValue: true, Signature: { Method: { } bestMethod } })
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 67174, 67453);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67285, 67364);

                    f_10314_67285_67363(this, bestMethod, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67382, 67438);

                    f_10314_67382_67437(bestMethod, diagnostics, node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 67174, 67453);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67469, 67483);

                f_10314_67469_67482(
                            result);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67497, 67517);

                return possiblyBest;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 64063, 67528);

                Microsoft.CodeAnalysis.CSharp.UnaryOperatorOverloadResolutionResult
                f_10314_64442_64493()
                {
                    var return_v = UnaryOperatorOverloadResolutionResult.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64442, 64493);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.OverloadResolution
                f_10314_64572_64595(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.OverloadResolution;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 64572, 64595);
                    return return_v;
                }


                int
                f_10314_64572_64674(Microsoft.CodeAnalysis.CSharp.OverloadResolution
                this_param, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.UnaryOperatorOverloadResolutionResult
                result, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    this_param.UnaryOperatorOverloadResolution(kind, operand, result, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64572, 64674);
                    return 0;
                }


                bool
                f_10314_64689_64730(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64689, 64730);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult
                f_10314_64766_64777(Microsoft.CodeAnalysis.CSharp.UnaryOperatorOverloadResolutionResult
                this_param)
                {
                    var return_v = this_param.Best;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 64766, 64777);
                    return return_v;
                }


                bool
                f_10314_64798_64818(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult>
                this_param)
                {
                    var return_v = this_param.Any();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64798, 64818);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10314_64866_64906()
                {
                    var return_v = ArrayBuilder<MethodSymbol>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64866, 64906);
                    return return_v;
                }


                int
                f_10314_65164_65183(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 65164, 65183);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult>
                f_10314_64956_64970_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 64956, 64970);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                f_10314_65275_65303(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 65275, 65303);
                    return return_v;
                }


                bool
                f_10314_65474_65491(Microsoft.CodeAnalysis.CSharp.UnaryOperatorOverloadResolutionResult
                this_param)
                {
                    var return_v = this_param.AnyValid();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 65474, 65491);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_66283_66295(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66283, 66295);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_66333_66345(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66333, 66345);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_66333_66357(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66333, 66357);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_66391_66403(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66391, 66403);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_66391_66415(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66391, 66415);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_66449_66461(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66449, 66461);
                    return return_v;
                }


                bool
                f_10314_66449_66481(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.IsNativeIntegerType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 66449, 66481);
                    return return_v;
                }


                int
                f_10314_67285_67363(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                operatorMethod, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportObsoleteAndFeatureAvailabilityDiagnostics(operatorMethod, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 67285, 67363);
                    return 0;
                }


                bool
                f_10314_67382_67437(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = ReportUseSiteDiagnostics((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 67382, 67437);
                    return return_v;
                }


                int
                f_10314_67469_67482(Microsoft.CodeAnalysis.CSharp.UnaryOperatorOverloadResolutionResult
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 67469, 67482);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 64063, 67528);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 64063, 67528);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object FoldDecimalBinaryOperators(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 67540, 69296);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67689, 67721);

                f_10314_67689_67720(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 67735, 67768);

                f_10314_67735_67767(valueRight != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 68524, 69257);

                switch (kind)
                {

                    case BinaryOperatorKind.DecimalAddition:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 68524, 69257);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 68632, 68688);

                        return f_10314_68639_68661(valueLeft) + f_10314_68664_68687(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 68524, 69257);

                    case BinaryOperatorKind.DecimalSubtraction:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 68524, 69257);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 68771, 68827);

                        return f_10314_68778_68800(valueLeft) - f_10314_68803_68826(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 68524, 69257);

                    case BinaryOperatorKind.DecimalMultiplication:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 68524, 69257);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 68913, 68969);

                        return f_10314_68920_68942(valueLeft) * f_10314_68945_68968(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 68524, 69257);

                    case BinaryOperatorKind.DecimalDivision:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 68524, 69257);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69049, 69105);

                        return f_10314_69056_69078(valueLeft) / f_10314_69081_69104(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 68524, 69257);

                    case BinaryOperatorKind.DecimalRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 68524, 69257);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69186, 69242);

                        return f_10314_69193_69215(valueLeft) % f_10314_69218_69241(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 68524, 69257);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69273, 69285);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 67540, 69296);

                int
                f_10314_67689_67720(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 67689, 67720);
                    return 0;
                }


                int
                f_10314_67735_67767(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 67735, 67767);
                    return 0;
                }


                decimal
                f_10314_68639_68661(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68639, 68661);
                    return return_v;
                }


                decimal
                f_10314_68664_68687(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68664, 68687);
                    return return_v;
                }


                decimal
                f_10314_68778_68800(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68778, 68800);
                    return return_v;
                }


                decimal
                f_10314_68803_68826(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68803, 68826);
                    return return_v;
                }


                decimal
                f_10314_68920_68942(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68920, 68942);
                    return return_v;
                }


                decimal
                f_10314_68945_68968(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 68945, 68968);
                    return return_v;
                }


                decimal
                f_10314_69056_69078(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69056, 69078);
                    return return_v;
                }


                decimal
                f_10314_69081_69104(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69081, 69104);
                    return return_v;
                }


                decimal
                f_10314_69193_69215(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69193, 69215);
                    return return_v;
                }


                decimal
                f_10314_69218_69241(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69218, 69241);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 67540, 69296);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 67540, 69296);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object FoldNativeIntegerOverflowingBinaryOperator(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 69308, 71617);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69473, 69505);

                f_10314_69473_69504(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69519, 69552);

                f_10314_69519_69551(valueRight != null);

                checked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69608, 71559);

                    switch (kind)
                    {

                        case BinaryOperatorKind.NIntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69725, 69777);

                            return f_10314_69732_69752(valueLeft) + f_10314_69755_69776(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NUIntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 69863, 69917);

                            return f_10314_69870_69891(valueLeft) + f_10314_69894_69916(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NIntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70005, 70057);

                            return f_10314_70012_70032(valueLeft) - f_10314_70035_70056(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NUIntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70146, 70200);

                            return f_10314_70153_70174(valueLeft) - f_10314_70177_70199(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NIntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70291, 70343);

                            return f_10314_70298_70318(valueLeft) * f_10314_70321_70342(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NUIntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70435, 70489);

                            return f_10314_70442_70463(valueLeft) * f_10314_70466_70488(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NIntDivision:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70574, 70626);

                            return f_10314_70581_70601(valueLeft) / f_10314_70604_70625(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NIntRemainder:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70712, 70764);

                            return f_10314_70719_70739(valueLeft) % f_10314_70742_70763(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NIntLeftShift:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70881, 70944);

                                var
                                int32Value = f_10314_70898_70918(valueLeft) << f_10314_70922_70943(valueRight)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 70974, 71037);

                                var
                                int64Value = f_10314_70991_71011(valueLeft) << f_10314_71015_71036(valueRight)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71067, 71121);

                                return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 71074, 71100) || (((int32Value == int64Value) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 71103, 71113)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 71116, 71120))) ? int32Value : null;
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);

                        case BinaryOperatorKind.NUIntLeftShift:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 69608, 71559);
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71266, 71331);

                                var
                                uint32Value = f_10314_71284_71305(valueLeft) << f_10314_71309_71330(valueRight)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71361, 71426);

                                var
                                uint64Value = f_10314_71379_71400(valueLeft) << f_10314_71404_71425(valueRight)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71456, 71513);

                                return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 71463, 71491) || (((uint32Value == uint64Value) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 71494, 71505)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 71508, 71512))) ? uint32Value : null;
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 69608, 71559);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71579, 71591);

                    return null;
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 69308, 71617);

                int
                f_10314_69473_69504(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 69473, 69504);
                    return 0;
                }


                int
                f_10314_69519_69551(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 69519, 69551);
                    return 0;
                }


                int
                f_10314_69732_69752(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69732, 69752);
                    return return_v;
                }


                int
                f_10314_69755_69776(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69755, 69776);
                    return return_v;
                }


                uint
                f_10314_69870_69891(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69870, 69891);
                    return return_v;
                }


                uint
                f_10314_69894_69916(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 69894, 69916);
                    return return_v;
                }


                int
                f_10314_70012_70032(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70012, 70032);
                    return return_v;
                }


                int
                f_10314_70035_70056(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70035, 70056);
                    return return_v;
                }


                uint
                f_10314_70153_70174(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70153, 70174);
                    return return_v;
                }


                uint
                f_10314_70177_70199(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70177, 70199);
                    return return_v;
                }


                int
                f_10314_70298_70318(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70298, 70318);
                    return return_v;
                }


                int
                f_10314_70321_70342(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70321, 70342);
                    return return_v;
                }


                uint
                f_10314_70442_70463(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70442, 70463);
                    return return_v;
                }


                uint
                f_10314_70466_70488(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70466, 70488);
                    return return_v;
                }


                int
                f_10314_70581_70601(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70581, 70601);
                    return return_v;
                }


                int
                f_10314_70604_70625(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70604, 70625);
                    return return_v;
                }


                int
                f_10314_70719_70739(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70719, 70739);
                    return return_v;
                }


                int
                f_10314_70742_70763(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70742, 70763);
                    return return_v;
                }


                int
                f_10314_70898_70918(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70898, 70918);
                    return return_v;
                }


                int
                f_10314_70922_70943(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70922, 70943);
                    return return_v;
                }


                long
                f_10314_70991_71011(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 70991, 71011);
                    return return_v;
                }


                int
                f_10314_71015_71036(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 71015, 71036);
                    return return_v;
                }


                uint
                f_10314_71284_71305(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 71284, 71305);
                    return return_v;
                }


                int
                f_10314_71309_71330(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 71309, 71330);
                    return return_v;
                }


                ulong
                f_10314_71379_71400(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 71379, 71400);
                    return return_v;
                }


                int
                f_10314_71404_71425(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 71404, 71425);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 69308, 71617);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 69308, 71617);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object FoldUncheckedIntegralBinaryOperator(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 71629, 74485);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71787, 71819);

                f_10314_71787_71818(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71833, 71866);

                f_10314_71833_71865(valueRight != null);

                unchecked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 71924, 74427);

                    switch (kind)
                    {

                        case BinaryOperatorKind.IntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72040, 72092);

                            return f_10314_72047_72067(valueLeft) + f_10314_72070_72091(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.LongAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72177, 72229);

                            return f_10314_72184_72204(valueLeft) + f_10314_72207_72228(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.UIntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72314, 72368);

                            return f_10314_72321_72342(valueLeft) + f_10314_72345_72367(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.ULongAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72454, 72508);

                            return f_10314_72461_72482(valueLeft) + f_10314_72485_72507(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.IntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72595, 72647);

                            return f_10314_72602_72622(valueLeft) - f_10314_72625_72646(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.LongSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72735, 72787);

                            return f_10314_72742_72762(valueLeft) - f_10314_72765_72786(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.UIntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 72875, 72929);

                            return f_10314_72882_72903(valueLeft) - f_10314_72906_72928(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.ULongSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73018, 73072);

                            return f_10314_73025_73046(valueLeft) - f_10314_73049_73071(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.IntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73162, 73214);

                            return f_10314_73169_73189(valueLeft) * f_10314_73192_73213(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.LongMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73305, 73357);

                            return f_10314_73312_73332(valueLeft) * f_10314_73335_73356(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.UIntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73448, 73502);

                            return f_10314_73455_73476(valueLeft) * f_10314_73479_73501(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.ULongMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73594, 73648);

                            return f_10314_73601_73622(valueLeft) * f_10314_73625_73647(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.IntDivision:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73807, 73983) || true) && (f_10314_73811_73831(valueLeft) == int.MinValue && (DynAbs.Tracing.TraceSender.Expression_True(10314, 73811, 73878) && f_10314_73851_73872(valueRight) == -1))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 73807, 73983);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 73936, 73956);

                                return int.MinValue;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 73807, 73983);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74011, 74063);

                            return f_10314_74018_74038(valueLeft) / f_10314_74041_74062(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);

                        case BinaryOperatorKind.LongDivision:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 71924, 74427);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74150, 74328) || true) && (f_10314_74154_74174(valueLeft) == long.MinValue && (DynAbs.Tracing.TraceSender.Expression_True(10314, 74154, 74222) && f_10314_74195_74216(valueRight) == -1))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74150, 74328);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74280, 74301);

                                return long.MinValue;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74150, 74328);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74356, 74408);

                            return f_10314_74363_74383(valueLeft) / f_10314_74386_74407(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 71924, 74427);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74447, 74459);

                    return null;
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 71629, 74485);

                int
                f_10314_71787_71818(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 71787, 71818);
                    return 0;
                }


                int
                f_10314_71833_71865(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 71833, 71865);
                    return 0;
                }


                int
                f_10314_72047_72067(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72047, 72067);
                    return return_v;
                }


                int
                f_10314_72070_72091(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72070, 72091);
                    return return_v;
                }


                long
                f_10314_72184_72204(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72184, 72204);
                    return return_v;
                }


                long
                f_10314_72207_72228(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72207, 72228);
                    return return_v;
                }


                uint
                f_10314_72321_72342(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72321, 72342);
                    return return_v;
                }


                uint
                f_10314_72345_72367(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72345, 72367);
                    return return_v;
                }


                ulong
                f_10314_72461_72482(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72461, 72482);
                    return return_v;
                }


                ulong
                f_10314_72485_72507(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72485, 72507);
                    return return_v;
                }


                int
                f_10314_72602_72622(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72602, 72622);
                    return return_v;
                }


                int
                f_10314_72625_72646(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72625, 72646);
                    return return_v;
                }


                long
                f_10314_72742_72762(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72742, 72762);
                    return return_v;
                }


                long
                f_10314_72765_72786(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72765, 72786);
                    return return_v;
                }


                uint
                f_10314_72882_72903(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72882, 72903);
                    return return_v;
                }


                uint
                f_10314_72906_72928(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 72906, 72928);
                    return return_v;
                }


                ulong
                f_10314_73025_73046(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73025, 73046);
                    return return_v;
                }


                ulong
                f_10314_73049_73071(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73049, 73071);
                    return return_v;
                }


                int
                f_10314_73169_73189(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73169, 73189);
                    return return_v;
                }


                int
                f_10314_73192_73213(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73192, 73213);
                    return return_v;
                }


                long
                f_10314_73312_73332(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73312, 73332);
                    return return_v;
                }


                long
                f_10314_73335_73356(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73335, 73356);
                    return return_v;
                }


                uint
                f_10314_73455_73476(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73455, 73476);
                    return return_v;
                }


                uint
                f_10314_73479_73501(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73479, 73501);
                    return return_v;
                }


                ulong
                f_10314_73601_73622(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73601, 73622);
                    return return_v;
                }


                ulong
                f_10314_73625_73647(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73625, 73647);
                    return return_v;
                }


                int
                f_10314_73811_73831(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73811, 73831);
                    return return_v;
                }


                int
                f_10314_73851_73872(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 73851, 73872);
                    return return_v;
                }


                int
                f_10314_74018_74038(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74018, 74038);
                    return return_v;
                }


                int
                f_10314_74041_74062(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74041, 74062);
                    return return_v;
                }


                long
                f_10314_74154_74174(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74154, 74174);
                    return return_v;
                }


                long
                f_10314_74195_74216(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74195, 74216);
                    return return_v;
                }


                long
                f_10314_74363_74383(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74363, 74383);
                    return return_v;
                }


                long
                f_10314_74386_74407(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74386, 74407);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 71629, 74485);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 71629, 74485);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object FoldCheckedIntegralBinaryOperator(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 74497, 76862);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74653, 74685);

                f_10314_74653_74684(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74699, 74732);

                f_10314_74699_74731(valueRight != null);

                checked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74788, 76804);

                    switch (kind)
                    {

                        case BinaryOperatorKind.IntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 74904, 74956);

                            return f_10314_74911_74931(valueLeft) + f_10314_74934_74955(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.LongAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75041, 75093);

                            return f_10314_75048_75068(valueLeft) + f_10314_75071_75092(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.UIntAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75178, 75232);

                            return f_10314_75185_75206(valueLeft) + f_10314_75209_75231(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.ULongAddition:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75318, 75372);

                            return f_10314_75325_75346(valueLeft) + f_10314_75349_75371(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.IntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75459, 75511);

                            return f_10314_75466_75486(valueLeft) - f_10314_75489_75510(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.LongSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75599, 75651);

                            return f_10314_75606_75626(valueLeft) - f_10314_75629_75650(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.UIntSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75739, 75793);

                            return f_10314_75746_75767(valueLeft) - f_10314_75770_75792(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.ULongSubtraction:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 75882, 75936);

                            return f_10314_75889_75910(valueLeft) - f_10314_75913_75935(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.IntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76026, 76078);

                            return f_10314_76033_76053(valueLeft) * f_10314_76056_76077(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.LongMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76169, 76221);

                            return f_10314_76176_76196(valueLeft) * f_10314_76199_76220(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.UIntMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76312, 76366);

                            return f_10314_76319_76340(valueLeft) * f_10314_76343_76365(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.ULongMultiplication:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76458, 76512);

                            return f_10314_76465_76486(valueLeft) * f_10314_76489_76511(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.IntDivision:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76596, 76648);

                            return f_10314_76603_76623(valueLeft) / f_10314_76626_76647(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);

                        case BinaryOperatorKind.LongDivision:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 74788, 76804);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76733, 76785);

                            return f_10314_76740_76760(valueLeft) / f_10314_76763_76784(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 74788, 76804);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 76824, 76836);

                    return null;
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 74497, 76862);

                int
                f_10314_74653_74684(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 74653, 74684);
                    return 0;
                }


                int
                f_10314_74699_74731(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 74699, 74731);
                    return 0;
                }


                int
                f_10314_74911_74931(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74911, 74931);
                    return return_v;
                }


                int
                f_10314_74934_74955(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 74934, 74955);
                    return return_v;
                }


                long
                f_10314_75048_75068(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75048, 75068);
                    return return_v;
                }


                long
                f_10314_75071_75092(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75071, 75092);
                    return return_v;
                }


                uint
                f_10314_75185_75206(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75185, 75206);
                    return return_v;
                }


                uint
                f_10314_75209_75231(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75209, 75231);
                    return return_v;
                }


                ulong
                f_10314_75325_75346(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75325, 75346);
                    return return_v;
                }


                ulong
                f_10314_75349_75371(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75349, 75371);
                    return return_v;
                }


                int
                f_10314_75466_75486(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75466, 75486);
                    return return_v;
                }


                int
                f_10314_75489_75510(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75489, 75510);
                    return return_v;
                }


                long
                f_10314_75606_75626(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75606, 75626);
                    return return_v;
                }


                long
                f_10314_75629_75650(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75629, 75650);
                    return return_v;
                }


                uint
                f_10314_75746_75767(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75746, 75767);
                    return return_v;
                }


                uint
                f_10314_75770_75792(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75770, 75792);
                    return return_v;
                }


                ulong
                f_10314_75889_75910(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75889, 75910);
                    return return_v;
                }


                ulong
                f_10314_75913_75935(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 75913, 75935);
                    return return_v;
                }


                int
                f_10314_76033_76053(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76033, 76053);
                    return return_v;
                }


                int
                f_10314_76056_76077(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76056, 76077);
                    return return_v;
                }


                long
                f_10314_76176_76196(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76176, 76196);
                    return return_v;
                }


                long
                f_10314_76199_76220(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76199, 76220);
                    return return_v;
                }


                uint
                f_10314_76319_76340(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76319, 76340);
                    return return_v;
                }


                uint
                f_10314_76343_76365(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76343, 76365);
                    return return_v;
                }


                ulong
                f_10314_76465_76486(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76465, 76486);
                    return return_v;
                }


                ulong
                f_10314_76489_76511(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76489, 76511);
                    return return_v;
                }


                int
                f_10314_76603_76623(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76603, 76623);
                    return return_v;
                }


                int
                f_10314_76626_76647(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76626, 76647);
                    return return_v;
                }


                long
                f_10314_76740_76760(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76740, 76760);
                    return return_v;
                }


                long
                f_10314_76763_76784(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 76763, 76784);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 74497, 76862);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 74497, 76862);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static TypeSymbol GetEnumType(BinaryOperatorKind kind, BoundExpression left, BoundExpression right)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 76874, 78067);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 77007, 78056);

                switch (kind)
                {

                    case BinaryOperatorKind.EnumAndUnderlyingAddition:
                    case BinaryOperatorKind.EnumAndUnderlyingSubtraction:
                    case BinaryOperatorKind.EnumAnd:
                    case BinaryOperatorKind.EnumOr:
                    case BinaryOperatorKind.EnumXor:
                    case BinaryOperatorKind.EnumEqual:
                    case BinaryOperatorKind.EnumGreaterThan:
                    case BinaryOperatorKind.EnumGreaterThanOrEqual:
                    case BinaryOperatorKind.EnumLessThan:
                    case BinaryOperatorKind.EnumLessThanOrEqual:
                    case BinaryOperatorKind.EnumNotEqual:
                    case BinaryOperatorKind.EnumSubtraction:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 77007, 78056);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 77750, 77767);

                        return f_10314_77757_77766(left);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 77007, 78056);

                    case BinaryOperatorKind.UnderlyingAndEnumAddition:
                    case BinaryOperatorKind.UnderlyingAndEnumSubtraction:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 77007, 78056);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 77928, 77946);

                        return f_10314_77935_77945(right);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 77007, 78056);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 77007, 78056);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 77994, 78041);

                        throw f_10314_78000_78040(kind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 77007, 78056);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 76874, 78067);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_77757_77766(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 77757, 77766);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_77935_77945(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 77935, 77945);
                    return return_v;
                }


                System.Exception
                f_10314_78000_78040(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 78000, 78040);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 76874, 78067);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 76874, 78067);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static SpecialType GetEnumPromotedType(SpecialType underlyingType)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 78079, 78836);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 78179, 78825);

                switch (underlyingType)
                {

                    case SpecialType.System_Byte:
                    case SpecialType.System_SByte:
                    case SpecialType.System_Int16:
                    case SpecialType.System_UInt16:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 78179, 78825);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 78431, 78463);

                        return SpecialType.System_Int32;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 78179, 78825);

                    case SpecialType.System_Int32:
                    case SpecialType.System_UInt32:
                    case SpecialType.System_Int64:
                    case SpecialType.System_UInt64:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 78179, 78825);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 78681, 78703);

                        return underlyingType;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 78179, 78825);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 78179, 78825);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 78753, 78810);

                        throw f_10314_78759_78809(underlyingType);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 78179, 78825);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 78079, 78836);

                System.Exception
                f_10314_78759_78809(Microsoft.CodeAnalysis.SpecialType
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 78759, 78809);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 78079, 78836);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 78079, 78836);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ConstantValue? FoldEnumBinaryOperator(
                    CSharpSyntaxNode syntax,
                    BinaryOperatorKind kind,
                    BoundExpression left,
                    BoundExpression right,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 78866, 82455);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79124, 79151);

                f_10314_79124_79150(left != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79165, 79193);

                f_10314_79165_79192(right != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79207, 79235);

                f_10314_79207_79234(f_10314_79220_79233(kind));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79249, 79280);

                f_10314_79249_79279(!f_10314_79263_79278(kind));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79644, 79697);

                TypeSymbol
                enumType = f_10314_79666_79696(kind, left, right)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79711, 79773);

                TypeSymbol
                underlyingType = f_10314_79739_79771(enumType)!
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79789, 79874);

                BoundExpression
                newLeftOperand = f_10314_79822_79873(this, left, underlyingType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 79888, 79975);

                BoundExpression
                newRightOperand = f_10314_79922_79974(this, right, underlyingType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80281, 80362);

                SpecialType
                operandSpecialType = f_10314_80314_80361(f_10314_80334_80360(underlyingType))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80376, 80561);

                TypeSymbol
                operandType = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 80401, 80451) || (((operandSpecialType == f_10314_80424_80450(underlyingType)) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 80471, 80485)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 80505, 80560))) ? underlyingType : f_10314_80505_80560(this, operandSpecialType, diagnostics, syntax)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80577, 80653);

                newLeftOperand = f_10314_80594_80652(this, newLeftOperand, operandType, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80667, 80745);

                newRightOperand = f_10314_80685_80744(this, newRightOperand, operandType, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80761, 80849);

                BinaryOperatorKind
                newKind = f_10314_80790_80848(f_10314_80790_80805(kind), f_10314_80815_80847(newLeftOperand.Type!))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80865, 80909);

                SpecialType
                operatorType = SpecialType.None
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 80925, 81841);

                switch (f_10314_80933_80951(newKind))
                {

                    case BinaryOperatorKind.Addition:
                    case BinaryOperatorKind.Subtraction:
                    case BinaryOperatorKind.And:
                    case BinaryOperatorKind.Or:
                    case BinaryOperatorKind.Xor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 80925, 81841);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 81231, 81270);

                        operatorType = f_10314_81246_81269(operandType);
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 81292, 81298);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 80925, 81841);

                    case BinaryOperatorKind.LessThan:
                    case BinaryOperatorKind.LessThanOrEqual:
                    case BinaryOperatorKind.GreaterThan:
                    case BinaryOperatorKind.GreaterThanOrEqual:
                    case BinaryOperatorKind.Equal:
                    case BinaryOperatorKind.NotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 80925, 81841);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 81645, 81687);

                        operatorType = SpecialType.System_Boolean;
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 81709, 81715);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 80925, 81841);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 80925, 81841);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 81765, 81826);

                        throw f_10314_81771_81825(f_10314_81806_81824(newKind));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 80925, 81841);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 81857, 81973);

                var
                constantValue = f_10314_81877_81972(this, syntax, newKind, newLeftOperand, newRightOperand, operatorType, diagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 81989, 82407) || true) && (operatorType != SpecialType.System_Boolean && (DynAbs.Tracing.TraceSender.Expression_True(10314, 81993, 82060) && constantValue != null) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 81993, 82084) && f_10314_82064_82084_M(!constantValue.IsBad)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 81989, 82407);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82118, 82213);

                    TypeSymbol
                    resultType = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 82142, 82184) || ((kind == BinaryOperatorKind.EnumSubtraction && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 82187, 82201)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 82204, 82212))) ? underlyingType : enumType
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82307, 82392);

                    return f_10314_82314_82391(this, syntax, constantValue, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 81989, 82407);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82423, 82444);

                return constantValue;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 78866, 82455);

                int
                f_10314_79124_79150(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79124, 79150);
                    return 0;
                }


                int
                f_10314_79165_79192(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79165, 79192);
                    return 0;
                }


                bool
                f_10314_79220_79233(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsEnum();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79220, 79233);
                    return return_v;
                }


                int
                f_10314_79207_79234(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79207, 79234);
                    return 0;
                }


                bool
                f_10314_79263_79278(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLifted();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79263, 79278);
                    return return_v;
                }


                int
                f_10314_79249_79279(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79249, 79279);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_79666_79696(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right)
                {
                    var return_v = GetEnumType(kind, left, right);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79666, 79696);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10314_79739_79771(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.GetEnumUnderlyingType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79739, 79771);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_79822_79873(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79822, 79873);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_79922_79974(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 79922, 79974);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_80334_80360(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 80334, 80360);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_80314_80361(Microsoft.CodeAnalysis.SpecialType
                underlyingType)
                {
                    var return_v = GetEnumPromotedType(underlyingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80314, 80361);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_80424_80450(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 80424, 80450);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_80505_80560(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80505, 80560);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_80594_80652(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80594, 80652);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_80685_80744(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80685, 80744);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_80790_80805(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80790, 80805);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_80815_80847(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 80815, 80847);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_80790_80848(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.SpecialType
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80790, 80848);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_80933_80951(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 80933, 80951);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_81246_81269(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 81246, 81269);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_81806_81824(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 81806, 81824);
                    return return_v;
                }


                System.Exception
                f_10314_81771_81825(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 81771, 81825);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_81877_81972(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.SpecialType
                resultType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldBinaryOperator(syntax, kind, left, right, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 81877, 81972);
                    return return_v;
                }


                bool
                f_10314_82064_82084_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 82064, 82084);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_82314_82391(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.ConstantValue
                sourceValue, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldConstantNumericConversion((Microsoft.CodeAnalysis.SyntaxNode)syntax, sourceValue, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 82314, 82391);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 78866, 82455);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 78866, 82455);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ConstantValue? FoldBinaryOperator(
                    CSharpSyntaxNode syntax,
                    BinaryOperatorKind kind,
                    BoundExpression left,
                    BoundExpression right,
                    SpecialType resultType,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 82544, 87452);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82835, 82862);

                f_10314_82835_82861(left != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82876, 82904);

                f_10314_82876_82903(right != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82920, 83024) || true) && (f_10314_82924_82941(left) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 82924, 82963) || f_10314_82945_82963(right)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 82920, 83024);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 82997, 83009);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 82920, 83024);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83106, 83192);

                ConstantValue?
                nullableEqualityResult = f_10314_83146_83191(kind, left, right)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83206, 83319) || true) && (nullableEqualityResult != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 83206, 83319);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83274, 83304);

                    return nullableEqualityResult;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 83206, 83319);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83335, 83370);

                var
                valueLeft = f_10314_83351_83369(left)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83384, 83421);

                var
                valueRight = f_10314_83401_83420(right)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83435, 83539) || true) && (valueLeft == null || (DynAbs.Tracing.TraceSender.Expression_False(10314, 83439, 83478) || valueRight == null))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 83435, 83539);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83512, 83524);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 83435, 83539);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83555, 83668) || true) && (f_10314_83559_83574(valueLeft) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 83559, 83594) || f_10314_83578_83594(valueRight)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 83555, 83668);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83628, 83653);

                    return f_10314_83635_83652();
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 83555, 83668);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83684, 83840) || true) && (f_10314_83688_83701(kind) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 83688, 83721) && !f_10314_83706_83721(kind)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 83684, 83840);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83755, 83825);

                    return f_10314_83762_83824(this, syntax, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 83684, 83840);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 83962, 84147) || true) && (f_10314_83966_84000(kind, valueRight))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 83962, 84147);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84034, 84089);

                    f_10314_84034_84088(diagnostics, ErrorCode.ERR_IntDivByZero, syntax);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84107, 84132);

                    return f_10314_84114_84131();
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 83962, 84147);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84163, 84187);

                object?
                newValue = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84681, 84754);

                newValue = f_10314_84692_84753(kind, valueLeft, valueRight);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84768, 84887) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 84768, 84887);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84822, 84872);

                    return f_10314_84829_84871(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 84768, 84887);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 84903, 84986);

                ConstantValue?
                concatResult = f_10314_84933_84985(kind, valueLeft, valueRight)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85000, 85266) || true) && (concatResult != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 85000, 85266);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85058, 85211) || true) && (f_10314_85062_85080(concatResult))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 85058, 85211);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85122, 85192);

                        f_10314_85122_85191(diagnostics, ErrorCode.ERR_ConstantStringTooLong, right.Syntax);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 85058, 85211);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85231, 85251);

                    return concatResult;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 85000, 85266);
                }

                // Certain binary operations always fail if they overflow even when in an unchecked context;
                // decimal + decimal, for example. If we are in one of those cases, make the attempt. If it
                // succeeds, return the result. If not, give a compile-time error regardless of context.
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85631, 85698);

                    newValue = f_10314_85642_85697(kind, valueLeft, valueRight);
                }
                catch (OverflowException)
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCatch(10314, 85727, 85899);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85785, 85841);

                    f_10314_85785_85840(diagnostics, ErrorCode.ERR_DecConstError, syntax);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85859, 85884);

                    return f_10314_85866_85883();
                    DynAbs.Tracing.TraceSender.TraceExitCatch(10314, 85727, 85899);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85915, 86034) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 85915, 86034);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 85969, 86019);

                    return f_10314_85976_86018(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 85915, 86034);
                }

                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86086, 86169);

                    newValue = f_10314_86097_86168(kind, valueLeft, valueRight);
                }
                catch (OverflowException)
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCatch(10314, 86198, 86561);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86256, 86546) || true) && (f_10314_86260_86286())
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 86256, 86546);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86328, 86386);

                        f_10314_86328_86385(diagnostics, ErrorCode.ERR_CheckedOverflow, syntax);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86408, 86433);

                        return f_10314_86415_86432();
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 86256, 86546);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 86256, 86546);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86515, 86527);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 86256, 86546);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCatch(10314, 86198, 86561);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86577, 86696) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 86577, 86696);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86631, 86681);

                    return f_10314_86638_86680(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 86577, 86696);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86712, 87278) || true) && (f_10314_86716_86742())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 86712, 87278);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86820, 86894);

                        newValue = f_10314_86831_86893(kind, valueLeft, valueRight);
                    }
                    catch (OverflowException)
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCatch(10314, 86931, 87121);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 86997, 87055);

                        f_10314_86997_87054(diagnostics, ErrorCode.ERR_CheckedOverflow, syntax);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 87077, 87102);

                        return f_10314_87084_87101();
                        DynAbs.Tracing.TraceSender.TraceExitCatch(10314, 86931, 87121);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 86712, 87278);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 86712, 87278);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 87187, 87263);

                    newValue = f_10314_87198_87262(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 86712, 87278);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 87294, 87413) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 87294, 87413);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 87348, 87398);

                    return f_10314_87355_87397(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 87294, 87413);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 87429, 87441);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 82544, 87452);

                int
                f_10314_82835_82861(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 82835, 82861);
                    return 0;
                }


                int
                f_10314_82876_82903(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 82876, 82903);
                    return 0;
                }


                bool
                f_10314_82924_82941(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 82924, 82941);
                    return return_v;
                }


                bool
                f_10314_82945_82963(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 82945, 82963);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_83146_83191(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right)
                {
                    var return_v = TryFoldingNullableEquality(kind, left, right);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 83146, 83191);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_83351_83369(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 83351, 83369);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_83401_83420(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 83401, 83420);
                    return return_v;
                }


                bool
                f_10314_83559_83574(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 83559, 83574);
                    return return_v;
                }


                bool
                f_10314_83578_83594(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 83578, 83594);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_83635_83652()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 83635, 83652);
                    return return_v;
                }


                bool
                f_10314_83688_83701(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsEnum();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 83688, 83701);
                    return return_v;
                }


                bool
                f_10314_83706_83721(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLifted();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 83706, 83721);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_83762_83824(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldEnumBinaryOperator(syntax, kind, left, right, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 83762, 83824);
                    return return_v;
                }


                bool
                f_10314_83966_84000(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = IsDivisionByZero(kind, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 83966, 84000);
                    return return_v;
                }


                int
                f_10314_84034_84088(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 84034, 84088);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_84114_84131()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 84114, 84131);
                    return return_v;
                }


                object?
                f_10314_84692_84753(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldNeverOverflowBinaryOperators(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 84692, 84753);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_84829_84871(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 84829, 84871);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_84933_84985(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldStringConcatenation(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 84933, 84985);
                    return return_v;
                }


                bool
                f_10314_85062_85080(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 85062, 85080);
                    return return_v;
                }


                int
                f_10314_85122_85191(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 85122, 85191);
                    return 0;
                }


                object
                f_10314_85642_85697(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldDecimalBinaryOperators(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 85642, 85697);
                    return return_v;
                }


                int
                f_10314_85785_85840(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 85785, 85840);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_85866_85883()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 85866, 85883);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_85976_86018(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 85976, 86018);
                    return return_v;
                }


                object
                f_10314_86097_86168(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldNativeIntegerOverflowingBinaryOperator(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 86097, 86168);
                    return return_v;
                }


                bool
                f_10314_86260_86286()
                {
                    var return_v = CheckOverflowAtCompileTime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 86260, 86286);
                    return return_v;
                }


                int
                f_10314_86328_86385(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 86328, 86385);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_86415_86432()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 86415, 86432);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_86638_86680(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 86638, 86680);
                    return return_v;
                }


                bool
                f_10314_86716_86742()
                {
                    var return_v = CheckOverflowAtCompileTime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 86716, 86742);
                    return return_v;
                }


                object
                f_10314_86831_86893(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldCheckedIntegralBinaryOperator(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 86831, 86893);
                    return return_v;
                }


                int
                f_10314_86997_87054(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 86997, 87054);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_87084_87101()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 87084, 87101);
                    return return_v;
                }


                object
                f_10314_87198_87262(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                valueLeft, Microsoft.CodeAnalysis.ConstantValue
                valueRight)
                {
                    var return_v = FoldUncheckedIntegralBinaryOperator(kind, valueLeft, valueRight);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 87198, 87262);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_87355_87397(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 87355, 87397);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 82544, 87452);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 82544, 87452);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static ConstantValue? TryFoldingNullableEquality(BinaryOperatorKind kind, BoundExpression left, BoundExpression right)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 89219, 90878);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89370, 90839) || true) && (f_10314_89374_89389(kind))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 89370, 90839);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89423, 89463);

                    BinaryOperatorKind
                    op = f_10314_89447_89462(kind)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89481, 90824) || true) && (op == BinaryOperatorKind.Equal || (DynAbs.Tracing.TraceSender.Expression_False(10314, 89485, 89552) || op == BinaryOperatorKind.NotEqual))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 89481, 90824);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89594, 90805) || true) && (f_10314_89598_89607(left) == BoundKind.Conversion && (DynAbs.Tracing.TraceSender.Expression_True(10314, 89598, 89669) && f_10314_89635_89645(right) == BoundKind.Conversion))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 89594, 90805);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89719, 89768);

                            BoundConversion
                            leftConv = (BoundConversion)left
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89794, 89845);

                            BoundConversion
                            rightConv = (BoundConversion)right
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89871, 89932);

                            ConstantValue?
                            leftConstant = f_10314_89901_89931(f_10314_89901_89917(leftConv))
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 89958, 90021);

                            ConstantValue?
                            rightConstant = f_10314_89989_90020(f_10314_89989_90006(rightConv))
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90049, 90782) || true) && (leftConstant != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 90053, 90098) && rightConstant != null))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 90049, 90782);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90156, 90194);

                                bool
                                leftIsNull = f_10314_90174_90193(leftConstant)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90224, 90264);

                                bool
                                rightIsNull = f_10314_90243_90263(rightConstant)
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90294, 90755) || true) && (leftIsNull || (DynAbs.Tracing.TraceSender.Expression_False(10314, 90298, 90323) || rightIsNull))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 90294, 90755);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90610, 90724);

                                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 90617, 90680) || (((leftIsNull == rightIsNull) == (op == BinaryOperatorKind.Equal) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 90683, 90701)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 90704, 90723))) ? f_10314_90683_90701() : f_10314_90704_90723();
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 90294, 90755);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 90049, 90782);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 89594, 90805);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 89481, 90824);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 89370, 90839);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 90855, 90867);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 89219, 90878);

                bool
                f_10314_89374_89389(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLifted();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 89374, 89389);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                f_10314_89447_89462(Microsoft.CodeAnalysis.CSharp.BinaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 89447, 89462);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_89598_89607(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89598, 89607);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_89635_89645(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89635, 89645);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_89901_89917(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89901, 89917);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_89901_89931(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89901, 89931);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_89989_90006(Microsoft.CodeAnalysis.CSharp.BoundConversion
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89989, 90006);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_89989_90020(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 89989, 90020);
                    return return_v;
                }


                bool
                f_10314_90174_90193(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 90174, 90193);
                    return return_v;
                }


                bool
                f_10314_90243_90263(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 90243, 90263);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_90683_90701()
                {
                    var return_v = ConstantValue.True;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 90683, 90701);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_90704_90723()
                {
                    var return_v = ConstantValue.False;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 90704, 90723);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 89219, 90878);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 89219, 90878);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object? FoldNeverOverflowBinaryOperators(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 91006, 104905);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91162, 91194);

                f_10314_91162_91193(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91208, 91241);

                f_10314_91208_91240(valueRight != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91470, 104866);

                switch (kind)
                {

                    case BinaryOperatorKind.ObjectEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91574, 91621) || true) && (f_10314_91578_91594(valueLeft))
                        )
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91574, 91621);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91596, 91621);

                            return f_10314_91603_91620(valueRight);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91574, 91621);
                        }

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91643, 91679) || true) && (f_10314_91647_91664(valueRight))
                        )
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91643, 91679);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91666, 91679);

                            return false;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91643, 91679);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 91701, 91707);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ObjectNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91786, 91834) || true) && (f_10314_91790_91806(valueLeft))
                        )
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91786, 91834);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91808, 91834);

                            return f_10314_91815_91833_M(!valueRight.IsNull);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91786, 91834);
                        }

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91856, 91891) || true) && (f_10314_91860_91877(valueRight))
                        )
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91856, 91891);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91879, 91891);

                            return true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91856, 91891);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 91913, 91919);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleAddition:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 91998, 92052);

                        return f_10314_92005_92026(valueLeft) + f_10314_92029_92051(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatAddition:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92130, 92184);

                        return f_10314_92137_92158(valueLeft) + f_10314_92161_92183(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleSubtraction:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92266, 92320);

                        return f_10314_92273_92294(valueLeft) - f_10314_92297_92319(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatSubtraction:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92401, 92455);

                        return f_10314_92408_92429(valueLeft) - f_10314_92432_92454(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleMultiplication:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92540, 92594);

                        return f_10314_92547_92568(valueLeft) * f_10314_92571_92593(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatMultiplication:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92678, 92732);

                        return f_10314_92685_92706(valueLeft) * f_10314_92709_92731(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleDivision:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92811, 92865);

                        return f_10314_92818_92839(valueLeft) / f_10314_92842_92864(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatDivision:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 92943, 92997);

                        return f_10314_92950_92971(valueLeft) / f_10314_92974_92996(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93077, 93131);

                        return f_10314_93084_93105(valueLeft) % f_10314_93108_93130(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93210, 93264);

                        return f_10314_93217_93238(valueLeft) % f_10314_93241_93263(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntLeftShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93341, 93394);

                        return f_10314_93348_93368(valueLeft) << f_10314_93372_93393(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongLeftShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93472, 93525);

                        return f_10314_93479_93499(valueLeft) << f_10314_93503_93524(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntLeftShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93603, 93657);

                        return f_10314_93610_93631(valueLeft) << f_10314_93635_93656(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongLeftShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93736, 93790);

                        return f_10314_93743_93764(valueLeft) << f_10314_93768_93789(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntRightShift:
                    case BinaryOperatorKind.NIntRightShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 93925, 93978);

                        return f_10314_93932_93952(valueLeft) >> f_10314_93956_93977(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongRightShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94057, 94110);

                        return f_10314_94064_94084(valueLeft) >> f_10314_94088_94109(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntRightShift:
                    case BinaryOperatorKind.NUIntRightShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94247, 94301);

                        return f_10314_94254_94275(valueLeft) >> f_10314_94279_94300(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongRightShift:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94381, 94435);

                        return f_10314_94388_94409(valueLeft) >> f_10314_94413_94434(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.BoolAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94507, 94563);

                        return f_10314_94514_94536(valueLeft) & f_10314_94539_94562(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntAnd:
                    case BinaryOperatorKind.NIntAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94684, 94736);

                        return f_10314_94691_94711(valueLeft) & f_10314_94714_94735(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94808, 94860);

                        return f_10314_94815_94835(valueLeft) & f_10314_94838_94859(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntAnd:
                    case BinaryOperatorKind.NUIntAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 94983, 95037);

                        return f_10314_94990_95011(valueLeft) & f_10314_95014_95036(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95110, 95164);

                        return f_10314_95117_95138(valueLeft) & f_10314_95141_95163(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.BoolOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95235, 95291);

                        return f_10314_95242_95264(valueLeft) | f_10314_95267_95290(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntOr:
                    case BinaryOperatorKind.NIntOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95410, 95462);

                        return f_10314_95417_95437(valueLeft) | f_10314_95440_95461(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95533, 95585);

                        return f_10314_95540_95560(valueLeft) | f_10314_95563_95584(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntOr:
                    case BinaryOperatorKind.NUIntOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95706, 95760);

                        return f_10314_95713_95734(valueLeft) | f_10314_95737_95759(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95832, 95886);

                        return f_10314_95839_95860(valueLeft) | f_10314_95863_95885(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.BoolXor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 95958, 96014);

                        return f_10314_95965_95987(valueLeft) ^ f_10314_95990_96013(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntXor:
                    case BinaryOperatorKind.NIntXor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96135, 96187);

                        return f_10314_96142_96162(valueLeft) ^ f_10314_96165_96186(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongXor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96259, 96311);

                        return f_10314_96266_96286(valueLeft) ^ f_10314_96289_96310(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntXor:
                    case BinaryOperatorKind.NUIntXor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96434, 96488);

                        return f_10314_96441_96462(valueLeft) ^ f_10314_96465_96487(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongXor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96561, 96615);

                        return f_10314_96568_96589(valueLeft) ^ f_10314_96592_96614(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LogicalBoolAnd:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96694, 96751);

                        return f_10314_96701_96723(valueLeft) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 96701, 96750) && f_10314_96727_96750(valueRight));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LogicalBoolOr:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96829, 96886);

                        return f_10314_96836_96858(valueLeft) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 96836, 96885) || f_10314_96862_96885(valueRight));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.BoolEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 96960, 97017);

                        return f_10314_96967_96989(valueLeft) == f_10314_96993_97016(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.StringEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97093, 97148);

                        return f_10314_97100_97121(valueLeft) == f_10314_97125_97147(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97225, 97282);

                        return f_10314_97232_97254(valueLeft) == f_10314_97258_97281(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97357, 97412);

                        return f_10314_97364_97385(valueLeft) == f_10314_97389_97411(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97488, 97543);

                        return f_10314_97495_97516(valueLeft) == f_10314_97520_97542(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntEqual:
                    case BinaryOperatorKind.NIntEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97668, 97721);

                        return f_10314_97675_97695(valueLeft) == f_10314_97699_97720(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97795, 97848);

                        return f_10314_97802_97822(valueLeft) == f_10314_97826_97847(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntEqual:
                    case BinaryOperatorKind.NUIntEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 97975, 98030);

                        return f_10314_97982_98003(valueLeft) == f_10314_98007_98029(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98105, 98160);

                        return f_10314_98112_98133(valueLeft) == f_10314_98137_98159(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.BoolNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98237, 98294);

                        return f_10314_98244_98266(valueLeft) != f_10314_98270_98293(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.StringNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98373, 98428);

                        return f_10314_98380_98401(valueLeft) != f_10314_98405_98427(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98508, 98565);

                        return f_10314_98515_98537(valueLeft) != f_10314_98541_98564(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98643, 98698);

                        return f_10314_98650_98671(valueLeft) != f_10314_98675_98697(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98777, 98832);

                        return f_10314_98784_98805(valueLeft) != f_10314_98809_98831(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntNotEqual:
                    case BinaryOperatorKind.NIntNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 98963, 99016);

                        return f_10314_98970_98990(valueLeft) != f_10314_98994_99015(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99093, 99146);

                        return f_10314_99100_99120(valueLeft) != f_10314_99124_99145(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntNotEqual:
                    case BinaryOperatorKind.NUIntNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99279, 99334);

                        return f_10314_99286_99307(valueLeft) != f_10314_99311_99333(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongNotEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99412, 99467);

                        return f_10314_99419_99440(valueLeft) != f_10314_99444_99466(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99547, 99603);

                        return f_10314_99554_99576(valueLeft) < f_10314_99579_99602(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99681, 99735);

                        return f_10314_99688_99709(valueLeft) < f_10314_99712_99734(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99814, 99868);

                        return f_10314_99821_99842(valueLeft) < f_10314_99845_99867(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntLessThan:
                    case BinaryOperatorKind.NIntLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 99999, 100051);

                        return f_10314_100006_100026(valueLeft) < f_10314_100029_100050(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100128, 100180);

                        return f_10314_100135_100155(valueLeft) < f_10314_100158_100179(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntLessThan:
                    case BinaryOperatorKind.NUIntLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100313, 100367);

                        return f_10314_100320_100341(valueLeft) < f_10314_100344_100366(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongLessThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100445, 100499);

                        return f_10314_100452_100473(valueLeft) < f_10314_100476_100498(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100582, 100638);

                        return f_10314_100589_100611(valueLeft) > f_10314_100614_100637(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100719, 100773);

                        return f_10314_100726_100747(valueLeft) > f_10314_100750_100772(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 100855, 100909);

                        return f_10314_100862_100883(valueLeft) > f_10314_100886_100908(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntGreaterThan:
                    case BinaryOperatorKind.NIntGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101046, 101098);

                        return f_10314_101053_101073(valueLeft) > f_10314_101076_101097(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101178, 101230);

                        return f_10314_101185_101205(valueLeft) > f_10314_101208_101229(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntGreaterThan:
                    case BinaryOperatorKind.NUIntGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101369, 101423);

                        return f_10314_101376_101397(valueLeft) > f_10314_101400_101422(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongGreaterThan:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101504, 101558);

                        return f_10314_101511_101532(valueLeft) > f_10314_101535_101557(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101645, 101702);

                        return f_10314_101652_101674(valueLeft) <= f_10314_101678_101701(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101787, 101842);

                        return f_10314_101794_101815(valueLeft) <= f_10314_101819_101841(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 101928, 101983);

                        return f_10314_101935_101956(valueLeft) <= f_10314_101960_101982(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntLessThanOrEqual:
                    case BinaryOperatorKind.NIntLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102128, 102181);

                        return f_10314_102135_102155(valueLeft) <= f_10314_102159_102180(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102265, 102318);

                        return f_10314_102272_102292(valueLeft) <= f_10314_102296_102317(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntLessThanOrEqual:
                    case BinaryOperatorKind.NUIntLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102465, 102520);

                        return f_10314_102472_102493(valueLeft) <= f_10314_102497_102519(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongLessThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102605, 102660);

                        return f_10314_102612_102633(valueLeft) <= f_10314_102637_102659(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DecimalGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102750, 102807);

                        return f_10314_102757_102779(valueLeft) >= f_10314_102783_102806(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.FloatGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 102895, 102950);

                        return f_10314_102902_102923(valueLeft) >= f_10314_102927_102949(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.DoubleGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103039, 103094);

                        return f_10314_103046_103067(valueLeft) >= f_10314_103071_103093(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntGreaterThanOrEqual:
                    case BinaryOperatorKind.NIntGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103245, 103298);

                        return f_10314_103252_103272(valueLeft) >= f_10314_103276_103297(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103385, 103438);

                        return f_10314_103392_103412(valueLeft) >= f_10314_103416_103437(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntGreaterThanOrEqual:
                    case BinaryOperatorKind.NUIntGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103591, 103646);

                        return f_10314_103598_103619(valueLeft) >= f_10314_103623_103645(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongGreaterThanOrEqual:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103734, 103789);

                        return f_10314_103741_103762(valueLeft) >= f_10314_103766_103788(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntDivision:
                    case BinaryOperatorKind.NUIntDivision:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 103922, 103976);

                        return f_10314_103929_103950(valueLeft) / f_10314_103953_103975(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongDivision:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104054, 104108);

                        return f_10314_104061_104082(valueLeft) / f_10314_104085_104107(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.IntRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104275, 104363);

                        return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 104282, 104311) || (((f_10314_104283_104304(valueRight) != -1) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 104314, 104358)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 104361, 104362))) ? f_10314_104314_104334(valueLeft) % f_10314_104337_104358(valueRight) : 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.LongRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104441, 104529);

                        return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 104448, 104477) || (((f_10314_104449_104470(valueRight) != -1) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 104480, 104524)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 104527, 104528))) ? f_10314_104480_104500(valueLeft) % f_10314_104503_104524(valueRight) : 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.UIntRemainder:
                    case BinaryOperatorKind.NUIntRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104664, 104718);

                        return f_10314_104671_104692(valueLeft) % f_10314_104695_104717(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);

                    case BinaryOperatorKind.ULongRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 91470, 104866);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104797, 104851);

                        return f_10314_104804_104825(valueLeft) % f_10314_104828_104850(valueRight);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 91470, 104866);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 104882, 104894);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 91006, 104905);

                int
                f_10314_91162_91193(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 91162, 91193);
                    return 0;
                }


                int
                f_10314_91208_91240(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 91208, 91240);
                    return 0;
                }


                bool
                f_10314_91578_91594(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91578, 91594);
                    return return_v;
                }


                bool
                f_10314_91603_91620(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91603, 91620);
                    return return_v;
                }


                bool
                f_10314_91647_91664(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91647, 91664);
                    return return_v;
                }


                bool
                f_10314_91790_91806(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91790, 91806);
                    return return_v;
                }


                bool
                f_10314_91815_91833_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91815, 91833);
                    return return_v;
                }


                bool
                f_10314_91860_91877(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsNull;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 91860, 91877);
                    return return_v;
                }


                double
                f_10314_92005_92026(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92005, 92026);
                    return return_v;
                }


                double
                f_10314_92029_92051(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92029, 92051);
                    return return_v;
                }


                float
                f_10314_92137_92158(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92137, 92158);
                    return return_v;
                }


                float
                f_10314_92161_92183(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92161, 92183);
                    return return_v;
                }


                double
                f_10314_92273_92294(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92273, 92294);
                    return return_v;
                }


                double
                f_10314_92297_92319(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92297, 92319);
                    return return_v;
                }


                float
                f_10314_92408_92429(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92408, 92429);
                    return return_v;
                }


                float
                f_10314_92432_92454(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92432, 92454);
                    return return_v;
                }


                double
                f_10314_92547_92568(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92547, 92568);
                    return return_v;
                }


                double
                f_10314_92571_92593(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92571, 92593);
                    return return_v;
                }


                float
                f_10314_92685_92706(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92685, 92706);
                    return return_v;
                }


                float
                f_10314_92709_92731(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92709, 92731);
                    return return_v;
                }


                double
                f_10314_92818_92839(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92818, 92839);
                    return return_v;
                }


                double
                f_10314_92842_92864(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92842, 92864);
                    return return_v;
                }


                float
                f_10314_92950_92971(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92950, 92971);
                    return return_v;
                }


                float
                f_10314_92974_92996(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 92974, 92996);
                    return return_v;
                }


                double
                f_10314_93084_93105(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93084, 93105);
                    return return_v;
                }


                double
                f_10314_93108_93130(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93108, 93130);
                    return return_v;
                }


                float
                f_10314_93217_93238(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93217, 93238);
                    return return_v;
                }


                float
                f_10314_93241_93263(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93241, 93263);
                    return return_v;
                }


                int
                f_10314_93348_93368(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93348, 93368);
                    return return_v;
                }


                int
                f_10314_93372_93393(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93372, 93393);
                    return return_v;
                }


                long
                f_10314_93479_93499(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93479, 93499);
                    return return_v;
                }


                int
                f_10314_93503_93524(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93503, 93524);
                    return return_v;
                }


                uint
                f_10314_93610_93631(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93610, 93631);
                    return return_v;
                }


                int
                f_10314_93635_93656(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93635, 93656);
                    return return_v;
                }


                ulong
                f_10314_93743_93764(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93743, 93764);
                    return return_v;
                }


                int
                f_10314_93768_93789(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93768, 93789);
                    return return_v;
                }


                int
                f_10314_93932_93952(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93932, 93952);
                    return return_v;
                }


                int
                f_10314_93956_93977(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 93956, 93977);
                    return return_v;
                }


                long
                f_10314_94064_94084(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94064, 94084);
                    return return_v;
                }


                int
                f_10314_94088_94109(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94088, 94109);
                    return return_v;
                }


                uint
                f_10314_94254_94275(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94254, 94275);
                    return return_v;
                }


                int
                f_10314_94279_94300(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94279, 94300);
                    return return_v;
                }


                ulong
                f_10314_94388_94409(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94388, 94409);
                    return return_v;
                }


                int
                f_10314_94413_94434(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94413, 94434);
                    return return_v;
                }


                bool
                f_10314_94514_94536(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94514, 94536);
                    return return_v;
                }


                bool
                f_10314_94539_94562(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94539, 94562);
                    return return_v;
                }


                int
                f_10314_94691_94711(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94691, 94711);
                    return return_v;
                }


                int
                f_10314_94714_94735(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94714, 94735);
                    return return_v;
                }


                long
                f_10314_94815_94835(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94815, 94835);
                    return return_v;
                }


                long
                f_10314_94838_94859(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94838, 94859);
                    return return_v;
                }


                uint
                f_10314_94990_95011(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 94990, 95011);
                    return return_v;
                }


                uint
                f_10314_95014_95036(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95014, 95036);
                    return return_v;
                }


                ulong
                f_10314_95117_95138(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95117, 95138);
                    return return_v;
                }


                ulong
                f_10314_95141_95163(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95141, 95163);
                    return return_v;
                }


                bool
                f_10314_95242_95264(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95242, 95264);
                    return return_v;
                }


                bool
                f_10314_95267_95290(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95267, 95290);
                    return return_v;
                }


                int
                f_10314_95417_95437(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95417, 95437);
                    return return_v;
                }


                int
                f_10314_95440_95461(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95440, 95461);
                    return return_v;
                }


                long
                f_10314_95540_95560(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95540, 95560);
                    return return_v;
                }


                long
                f_10314_95563_95584(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95563, 95584);
                    return return_v;
                }


                uint
                f_10314_95713_95734(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95713, 95734);
                    return return_v;
                }


                uint
                f_10314_95737_95759(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95737, 95759);
                    return return_v;
                }


                ulong
                f_10314_95839_95860(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95839, 95860);
                    return return_v;
                }


                ulong
                f_10314_95863_95885(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95863, 95885);
                    return return_v;
                }


                bool
                f_10314_95965_95987(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95965, 95987);
                    return return_v;
                }


                bool
                f_10314_95990_96013(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 95990, 96013);
                    return return_v;
                }


                int
                f_10314_96142_96162(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96142, 96162);
                    return return_v;
                }


                int
                f_10314_96165_96186(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96165, 96186);
                    return return_v;
                }


                long
                f_10314_96266_96286(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96266, 96286);
                    return return_v;
                }


                long
                f_10314_96289_96310(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96289, 96310);
                    return return_v;
                }


                uint
                f_10314_96441_96462(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96441, 96462);
                    return return_v;
                }


                uint
                f_10314_96465_96487(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96465, 96487);
                    return return_v;
                }


                ulong
                f_10314_96568_96589(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96568, 96589);
                    return return_v;
                }


                ulong
                f_10314_96592_96614(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96592, 96614);
                    return return_v;
                }


                bool
                f_10314_96701_96723(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96701, 96723);
                    return return_v;
                }


                bool
                f_10314_96727_96750(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96727, 96750);
                    return return_v;
                }


                bool
                f_10314_96836_96858(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96836, 96858);
                    return return_v;
                }


                bool
                f_10314_96862_96885(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96862, 96885);
                    return return_v;
                }


                bool
                f_10314_96967_96989(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96967, 96989);
                    return return_v;
                }


                bool
                f_10314_96993_97016(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 96993, 97016);
                    return return_v;
                }


                string?
                f_10314_97100_97121(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.StringValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97100, 97121);
                    return return_v;
                }


                string?
                f_10314_97125_97147(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.StringValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97125, 97147);
                    return return_v;
                }


                decimal
                f_10314_97232_97254(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97232, 97254);
                    return return_v;
                }


                decimal
                f_10314_97258_97281(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97258, 97281);
                    return return_v;
                }


                float
                f_10314_97364_97385(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97364, 97385);
                    return return_v;
                }


                float
                f_10314_97389_97411(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97389, 97411);
                    return return_v;
                }


                double
                f_10314_97495_97516(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97495, 97516);
                    return return_v;
                }


                double
                f_10314_97520_97542(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97520, 97542);
                    return return_v;
                }


                int
                f_10314_97675_97695(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97675, 97695);
                    return return_v;
                }


                int
                f_10314_97699_97720(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97699, 97720);
                    return return_v;
                }


                long
                f_10314_97802_97822(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97802, 97822);
                    return return_v;
                }


                long
                f_10314_97826_97847(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97826, 97847);
                    return return_v;
                }


                uint
                f_10314_97982_98003(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 97982, 98003);
                    return return_v;
                }


                uint
                f_10314_98007_98029(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98007, 98029);
                    return return_v;
                }


                ulong
                f_10314_98112_98133(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98112, 98133);
                    return return_v;
                }


                ulong
                f_10314_98137_98159(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98137, 98159);
                    return return_v;
                }


                bool
                f_10314_98244_98266(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98244, 98266);
                    return return_v;
                }


                bool
                f_10314_98270_98293(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98270, 98293);
                    return return_v;
                }


                string?
                f_10314_98380_98401(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.StringValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98380, 98401);
                    return return_v;
                }


                string?
                f_10314_98405_98427(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.StringValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98405, 98427);
                    return return_v;
                }


                decimal
                f_10314_98515_98537(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98515, 98537);
                    return return_v;
                }


                decimal
                f_10314_98541_98564(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98541, 98564);
                    return return_v;
                }


                float
                f_10314_98650_98671(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98650, 98671);
                    return return_v;
                }


                float
                f_10314_98675_98697(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98675, 98697);
                    return return_v;
                }


                double
                f_10314_98784_98805(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98784, 98805);
                    return return_v;
                }


                double
                f_10314_98809_98831(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98809, 98831);
                    return return_v;
                }


                int
                f_10314_98970_98990(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98970, 98990);
                    return return_v;
                }


                int
                f_10314_98994_99015(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 98994, 99015);
                    return return_v;
                }


                long
                f_10314_99100_99120(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99100, 99120);
                    return return_v;
                }


                long
                f_10314_99124_99145(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99124, 99145);
                    return return_v;
                }


                uint
                f_10314_99286_99307(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99286, 99307);
                    return return_v;
                }


                uint
                f_10314_99311_99333(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99311, 99333);
                    return return_v;
                }


                ulong
                f_10314_99419_99440(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99419, 99440);
                    return return_v;
                }


                ulong
                f_10314_99444_99466(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99444, 99466);
                    return return_v;
                }


                decimal
                f_10314_99554_99576(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99554, 99576);
                    return return_v;
                }


                decimal
                f_10314_99579_99602(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99579, 99602);
                    return return_v;
                }


                float
                f_10314_99688_99709(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99688, 99709);
                    return return_v;
                }


                float
                f_10314_99712_99734(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99712, 99734);
                    return return_v;
                }


                double
                f_10314_99821_99842(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99821, 99842);
                    return return_v;
                }


                double
                f_10314_99845_99867(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 99845, 99867);
                    return return_v;
                }


                int
                f_10314_100006_100026(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100006, 100026);
                    return return_v;
                }


                int
                f_10314_100029_100050(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100029, 100050);
                    return return_v;
                }


                long
                f_10314_100135_100155(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100135, 100155);
                    return return_v;
                }


                long
                f_10314_100158_100179(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100158, 100179);
                    return return_v;
                }


                uint
                f_10314_100320_100341(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100320, 100341);
                    return return_v;
                }


                uint
                f_10314_100344_100366(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100344, 100366);
                    return return_v;
                }


                ulong
                f_10314_100452_100473(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100452, 100473);
                    return return_v;
                }


                ulong
                f_10314_100476_100498(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100476, 100498);
                    return return_v;
                }


                decimal
                f_10314_100589_100611(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100589, 100611);
                    return return_v;
                }


                decimal
                f_10314_100614_100637(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100614, 100637);
                    return return_v;
                }


                float
                f_10314_100726_100747(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100726, 100747);
                    return return_v;
                }


                float
                f_10314_100750_100772(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100750, 100772);
                    return return_v;
                }


                double
                f_10314_100862_100883(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100862, 100883);
                    return return_v;
                }


                double
                f_10314_100886_100908(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 100886, 100908);
                    return return_v;
                }


                int
                f_10314_101053_101073(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101053, 101073);
                    return return_v;
                }


                int
                f_10314_101076_101097(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101076, 101097);
                    return return_v;
                }


                long
                f_10314_101185_101205(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101185, 101205);
                    return return_v;
                }


                long
                f_10314_101208_101229(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101208, 101229);
                    return return_v;
                }


                uint
                f_10314_101376_101397(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101376, 101397);
                    return return_v;
                }


                uint
                f_10314_101400_101422(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101400, 101422);
                    return return_v;
                }


                ulong
                f_10314_101511_101532(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101511, 101532);
                    return return_v;
                }


                ulong
                f_10314_101535_101557(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101535, 101557);
                    return return_v;
                }


                decimal
                f_10314_101652_101674(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101652, 101674);
                    return return_v;
                }


                decimal
                f_10314_101678_101701(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101678, 101701);
                    return return_v;
                }


                float
                f_10314_101794_101815(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101794, 101815);
                    return return_v;
                }


                float
                f_10314_101819_101841(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101819, 101841);
                    return return_v;
                }


                double
                f_10314_101935_101956(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101935, 101956);
                    return return_v;
                }


                double
                f_10314_101960_101982(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 101960, 101982);
                    return return_v;
                }


                int
                f_10314_102135_102155(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102135, 102155);
                    return return_v;
                }


                int
                f_10314_102159_102180(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102159, 102180);
                    return return_v;
                }


                long
                f_10314_102272_102292(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102272, 102292);
                    return return_v;
                }


                long
                f_10314_102296_102317(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102296, 102317);
                    return return_v;
                }


                uint
                f_10314_102472_102493(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102472, 102493);
                    return return_v;
                }


                uint
                f_10314_102497_102519(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102497, 102519);
                    return return_v;
                }


                ulong
                f_10314_102612_102633(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102612, 102633);
                    return return_v;
                }


                ulong
                f_10314_102637_102659(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102637, 102659);
                    return return_v;
                }


                decimal
                f_10314_102757_102779(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102757, 102779);
                    return return_v;
                }


                decimal
                f_10314_102783_102806(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102783, 102806);
                    return return_v;
                }


                float
                f_10314_102902_102923(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102902, 102923);
                    return return_v;
                }


                float
                f_10314_102927_102949(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.SingleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 102927, 102949);
                    return return_v;
                }


                double
                f_10314_103046_103067(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103046, 103067);
                    return return_v;
                }


                double
                f_10314_103071_103093(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DoubleValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103071, 103093);
                    return return_v;
                }


                int
                f_10314_103252_103272(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103252, 103272);
                    return return_v;
                }


                int
                f_10314_103276_103297(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103276, 103297);
                    return return_v;
                }


                long
                f_10314_103392_103412(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103392, 103412);
                    return return_v;
                }


                long
                f_10314_103416_103437(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103416, 103437);
                    return return_v;
                }


                uint
                f_10314_103598_103619(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103598, 103619);
                    return return_v;
                }


                uint
                f_10314_103623_103645(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103623, 103645);
                    return return_v;
                }


                ulong
                f_10314_103741_103762(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103741, 103762);
                    return return_v;
                }


                ulong
                f_10314_103766_103788(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103766, 103788);
                    return return_v;
                }


                uint
                f_10314_103929_103950(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103929, 103950);
                    return return_v;
                }


                uint
                f_10314_103953_103975(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 103953, 103975);
                    return return_v;
                }


                ulong
                f_10314_104061_104082(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104061, 104082);
                    return return_v;
                }


                ulong
                f_10314_104085_104107(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104085, 104107);
                    return return_v;
                }


                int
                f_10314_104283_104304(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104283, 104304);
                    return return_v;
                }


                int
                f_10314_104314_104334(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104314, 104334);
                    return return_v;
                }


                int
                f_10314_104337_104358(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104337, 104358);
                    return return_v;
                }


                long
                f_10314_104449_104470(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104449, 104470);
                    return return_v;
                }


                long
                f_10314_104480_104500(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104480, 104500);
                    return return_v;
                }


                long
                f_10314_104503_104524(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104503, 104524);
                    return return_v;
                }


                uint
                f_10314_104671_104692(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104671, 104692);
                    return return_v;
                }


                uint
                f_10314_104695_104717(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104695, 104717);
                    return return_v;
                }


                ulong
                f_10314_104804_104825(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104804, 104825);
                    return return_v;
                }


                ulong
                f_10314_104828_104850(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 104828, 104850);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 91006, 104905);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 91006, 104905);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static ConstantValue? FoldStringConcatenation(BinaryOperatorKind kind, ConstantValue valueLeft, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 105084, 105818);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105238, 105270);

                f_10314_105238_105269(valueLeft != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105284, 105317);

                f_10314_105284_105316(valueRight != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105333, 105779) || true) && (kind == BinaryOperatorKind.StringConcatenation)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105333, 105779);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105417, 105468);

                    Rope
                    leftValue = f_10314_105434_105453(valueLeft) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.Rope?>(10314, 105434, 105467) ?? Rope.Empty)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105486, 105539);

                    Rope
                    rightValue = f_10314_105504_105524(valueRight) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.Rope?>(10314, 105504, 105538) ?? Rope.Empty)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105559, 105625);

                    long
                    newLength = (long)f_10314_105582_105598(leftValue) + (long)f_10314_105607_105624(rightValue)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105643, 105764);

                    return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 105650, 105676) || (((newLength > int.MaxValue) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 105679, 105696)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 105699, 105763))) ? f_10314_105679_105696() : f_10314_105699_105763(f_10314_105728_105762(leftValue, rightValue));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105333, 105779);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105795, 105807);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 105084, 105818);

                int
                f_10314_105238_105269(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 105238, 105269);
                    return 0;
                }


                int
                f_10314_105284_105316(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 105284, 105316);
                    return 0;
                }


                Microsoft.CodeAnalysis.Rope?
                f_10314_105434_105453(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.RopeValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 105434, 105453);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Rope?
                f_10314_105504_105524(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.RopeValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 105504, 105524);
                    return return_v;
                }


                int
                f_10314_105582_105598(Microsoft.CodeAnalysis.Rope
                this_param)
                {
                    var return_v = this_param.Length;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 105582, 105598);
                    return return_v;
                }


                int
                f_10314_105607_105624(Microsoft.CodeAnalysis.Rope
                this_param)
                {
                    var return_v = this_param.Length;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 105607, 105624);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_105679_105696()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 105679, 105696);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Rope
                f_10314_105728_105762(Microsoft.CodeAnalysis.Rope
                r1, Microsoft.CodeAnalysis.Rope
                r2)
                {
                    var return_v = Rope.Concat(r1, r2);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 105728, 105762);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_105699_105763(Microsoft.CodeAnalysis.Rope
                value)
                {
                    var return_v = ConstantValue.CreateFromRope(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 105699, 105763);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 105084, 105818);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 105084, 105818);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static BinaryOperatorKind SyntaxKindToBinaryOperatorKind(SyntaxKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 105849, 108340);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 105955, 108329);

                switch (kind)
                {

                    case SyntaxKind.MultiplyAssignmentExpression:
                    case SyntaxKind.MultiplyExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106100, 106141);

                        return BinaryOperatorKind.Multiplication;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.DivideAssignmentExpression:
                    case SyntaxKind.DivideExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106254, 106289);

                        return BinaryOperatorKind.Division;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.ModuloAssignmentExpression:
                    case SyntaxKind.ModuloExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106402, 106438);

                        return BinaryOperatorKind.Remainder;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.AddAssignmentExpression:
                    case SyntaxKind.AddExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106545, 106580);

                        return BinaryOperatorKind.Addition;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.SubtractAssignmentExpression:
                    case SyntaxKind.SubtractExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106697, 106735);

                        return BinaryOperatorKind.Subtraction;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.RightShiftAssignmentExpression:
                    case SyntaxKind.RightShiftExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 106856, 106893);

                        return BinaryOperatorKind.RightShift;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.LeftShiftAssignmentExpression:
                    case SyntaxKind.LeftShiftExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107012, 107048);

                        return BinaryOperatorKind.LeftShift;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.EqualsExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107100, 107132);

                        return BinaryOperatorKind.Equal;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.NotEqualsExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107187, 107222);

                        return BinaryOperatorKind.NotEqual;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.GreaterThanExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107279, 107317);

                        return BinaryOperatorKind.GreaterThan;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.LessThanExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107371, 107406);

                        return BinaryOperatorKind.LessThan;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.GreaterThanOrEqualExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107470, 107515);

                        return BinaryOperatorKind.GreaterThanOrEqual;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.LessThanOrEqualExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107576, 107618);

                        return BinaryOperatorKind.LessThanOrEqual;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.AndAssignmentExpression:
                    case SyntaxKind.BitwiseAndExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107732, 107762);

                        return BinaryOperatorKind.And;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.OrAssignmentExpression:
                    case SyntaxKind.BitwiseOrExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 107874, 107903);

                        return BinaryOperatorKind.Or;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.ExclusiveOrAssignmentExpression:
                    case SyntaxKind.ExclusiveOrExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108026, 108056);

                        return BinaryOperatorKind.Xor;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.LogicalAndExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108112, 108149);

                        return BinaryOperatorKind.LogicalAnd;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    case SyntaxKind.LogicalOrExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108204, 108240);

                        return BinaryOperatorKind.LogicalOr;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 105955, 108329);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108267, 108314);

                        throw f_10314_108273_108313(kind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 105955, 108329);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 105849, 108340);

                System.Exception
                f_10314_108273_108313(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108273, 108313);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 105849, 108340);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 105849, 108340);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindIncrementOperator(CSharpSyntaxNode node, ExpressionSyntax operandSyntax, SyntaxToken operatorToken, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 108352, 112825);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108531, 108596);

                f_10314_108531_108595(operandSyntax, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108612, 108742);

                BoundExpression
                operand = f_10314_108638_108741(this, f_10314_108656_108727(this, operandSyntax, diagnostics, BindValueKind.IncrementDecrement), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108756, 108824);

                UnaryOperatorKind
                kind = f_10314_108781_108823(f_10314_108811_108822(node))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 108914, 109411) || true) && (f_10314_108918_108938(operand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 108914, 109411);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 109035, 109396);

                    return f_10314_109042_109395(node, kind, operand, null, Conversion.NoConversion, Conversion.NoConversion, LookupResultKind.Empty, f_10314_109339_109356(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 108914, 109411);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 109522, 109553);

                var
                operandType = f_10314_109540_109552(operand)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 109567, 109609);

                f_10314_109567_109608((object)operandType != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 109625, 110308) || true) && (f_10314_109629_109652(operandType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 109625, 110308);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 109686, 110293);

                    return f_10314_109693_110292(node, f_10314_109769_109864(f_10314_109769_109809(kind, UnaryOperatorKind.Dynamic), f_10314_109841_109863()), operand, methodOpt: null, operandConversion: Conversion.NoConversion, resultConversion: Conversion.NoConversion, resultKind: LookupResultKind.Viable, originalUserDefinedOperatorsOpt: default(ImmutableArray<MethodSymbol>), type: operandType, hasErrors: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 109625, 110308);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110324, 110352);

                LookupResultKind
                resultKind
                = default(LookupResultKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110366, 110424);

                ImmutableArray<MethodSymbol>
                originalUserDefinedOperators
                = default(ImmutableArray<MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110438, 110570);

                var
                best = f_10314_110449_110569(this, kind, operand, node, diagnostics, out resultKind, out originalUserDefinedOperators)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110584, 111154) || true) && (f_10314_110588_110602_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 110584, 111154);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110636, 110721);

                    f_10314_110636_110720(node, diagnostics, operatorToken.Text, operand, resultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 110739, 111139);

                    return f_10314_110746_111138(node, kind, operand, null, Conversion.NoConversion, Conversion.NoConversion, resultKind, originalUserDefinedOperators, f_10314_111082_111099(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 110584, 111154);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111170, 111201);

                var
                signature = best.Signature
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111217, 111290);

                f_10314_111217_111289(signature.Kind, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111306, 111356);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111370, 111491);

                var
                resultConversion = f_10314_111393_111490(f_10314_111393_111404(), signature.ReturnType, operandType, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111505, 111547);

                f_10314_111505_111546(diagnostics, node, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111563, 111586);

                bool
                hasErrors = false
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111600, 112022) || true) && (f_10314_111604_111632_M(!resultConversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 111604, 111661) || f_10314_111636_111661_M(!resultConversion.IsValid)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 111600, 112022);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111695, 111817);

                    f_10314_111695_111816(diagnostics, f_10314_111740_111756(this), node, resultConversion, signature.ReturnType, operandType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111835, 111852);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 111600, 112022);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 111600, 112022);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 111918, 112007);

                    f_10314_111918_112006(this, diagnostics, resultConversion, node, hasBaseReceiver: false);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 111600, 112022);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112038, 112217) || true) && (!hasErrors && (DynAbs.Tracing.TraceSender.Expression_True(10314, 112042, 112083) && f_10314_112056_112083(operandType)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 112038, 112217);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112117, 112167);

                    f_10314_112117_112166(diagnostics, ErrorCode.ERR_VoidError, node);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112185, 112202);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 112038, 112217);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112233, 112280);

                Conversion
                operandConversion = best.Conversion
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112296, 112386);

                f_10314_112296_112385(this, diagnostics, operandConversion, node, hasBaseReceiver: false);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112402, 112814);

                return f_10314_112409_112813(node, f_10314_112477_112546(signature.Kind, f_10314_112523_112545()), operand, signature.Method, operandConversion, resultConversion, resultKind, originalUserDefinedOperators, operandType, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 108352, 112825);

                int
                f_10314_108531_108595(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    expression.CheckDeconstructionCompatibleArgument(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108531, 108595);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_108656_108727(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108656, 108727);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_108638_108741(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108638, 108741);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_108811_108822(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108811, 108822);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_108781_108823(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxKindToUnaryOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 108781, 108823);
                    return return_v;
                }


                bool
                f_10314_108918_108938(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 108918, 108938);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_109339_109356(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109339, 109356);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                f_10314_109042_109395(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.Conversion
                operandConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                resultConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator(syntax, operatorKind, operand, methodOpt, operandConversion, resultConversion, resultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109042, 109395);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_109540_109552(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 109540, 109552);
                    return return_v;
                }


                int
                f_10314_109567_109608(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109567, 109608);
                    return 0;
                }


                bool
                f_10314_109629_109652(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsDynamic();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109629, 109652);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_109769_109809(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109769, 109809);
                    return return_v;
                }


                bool
                f_10314_109841_109863()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 109841, 109863);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_109769_109864(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109769, 109864);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                f_10314_109693_110292(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.Conversion
                operandConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                resultConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, methodOpt: methodOpt, operandConversion: operandConversion, resultConversion: resultConversion, resultKind: resultKind, originalUserDefinedOperatorsOpt: originalUserDefinedOperatorsOpt, type: type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 109693, 110292);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult
                f_10314_110449_110569(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.UnaryOperatorOverloadResolution(kind, operand, node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 110449, 110569);
                    return return_v;
                }


                bool
                f_10314_110588_110602_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 110588, 110602);
                    return return_v;
                }


                int
                f_10314_110636_110720(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, string
                operatorName, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportUnaryOperatorError(node, diagnostics, operatorName, operand, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 110636, 110720);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_111082_111099(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111082, 111099);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                f_10314_110746_111138(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.Conversion
                operandConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                resultConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, methodOpt, operandConversion, resultConversion, resultKind, originalUserDefinedOperatorsOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 110746, 111138);
                    return return_v;
                }


                int
                f_10314_111217_111289(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    CheckNativeIntegerFeatureAvailability(operatorKind, (Microsoft.CodeAnalysis.SyntaxNode)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111217, 111289);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10314_111393_111404()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 111393, 111404);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10314_111393_111490(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromType(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111393, 111490);
                    return return_v;
                }


                bool
                f_10314_111505_111546(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111505, 111546);
                    return return_v;
                }


                bool
                f_10314_111604_111632_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 111604, 111632);
                    return return_v;
                }


                bool
                f_10314_111636_111661_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 111636, 111661);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_111740_111756(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 111740, 111756);
                    return return_v;
                }


                int
                f_10314_111695_111816(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                sourceType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    GenerateImplicitConversionError(diagnostics, compilation, (Microsoft.CodeAnalysis.SyntaxNode)syntax, conversion, sourceType, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111695, 111816);
                    return 0;
                }


                int
                f_10314_111918_112006(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.SyntaxNode
                node, bool
                hasBaseReceiver)
                {
                    this_param.ReportDiagnosticsIfObsolete(diagnostics, conversion, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)node, hasBaseReceiver: hasBaseReceiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 111918, 112006);
                    return 0;
                }


                bool
                f_10314_112056_112083(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112056, 112083);
                    return return_v;
                }


                int
                f_10314_112117_112166(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112117, 112166);
                    return 0;
                }


                int
                f_10314_112296_112385(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.SyntaxNode
                node, bool
                hasBaseReceiver)
                {
                    this_param.ReportDiagnosticsIfObsolete(diagnostics, conversion, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)node, hasBaseReceiver: hasBaseReceiver);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112296, 112385);
                    return 0;
                }


                bool
                f_10314_112523_112545()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 112523, 112545);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_112477_112546(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112477, 112546);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator
                f_10314_112409_112813(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                methodOpt, Microsoft.CodeAnalysis.CSharp.Conversion
                operandConversion, Microsoft.CodeAnalysis.CSharp.Conversion
                resultConversion, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIncrementOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, methodOpt, operandConversion, resultConversion, resultKind, originalUserDefinedOperatorsOpt, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112409, 112813);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 108352, 112825);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 108352, 112825);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindSuppressNullableWarningExpression(PostfixUnaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 112837, 113735);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 112985, 113038);

                var
                expr = f_10314_112996_113037(this, f_10314_113011_113023(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113052, 113678);

                switch (f_10314_113060_113069(expr))
                {

                    case BoundKind.NamespaceExpression:
                    case BoundKind.TypeExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 113052, 113678);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113208, 113274);

                        f_10314_113208_113273(diagnostics, ErrorCode.ERR_IllegalSuppression, expr.Syntax);
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 113296, 113302);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 113052, 113678);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 113052, 113678);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113350, 113635) || true) && (f_10314_113354_113371(expr))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 113350, 113635);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113421, 113514);

                            f_10314_113421_113513(f_10314_113434_113474(f_10314_113434_113459(f_10314_113434_113446(node))).Kind() == SyntaxKind.ExclamationToken);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113540, 113612);

                            f_10314_113540_113611(diagnostics, ErrorCode.ERR_DuplicateNullSuppression, expr.Syntax);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 113350, 113635);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 113657, 113663);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 113052, 113678);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113694, 113724);

                return f_10314_113701_113723(expr);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 112837, 113735);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_113011_113023(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 113011, 113023);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_112996_113037(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 112996, 113037);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_113060_113069(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 113060, 113069);
                    return return_v;
                }


                int
                f_10314_113208_113273(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113208, 113273);
                    return 0;
                }


                bool
                f_10314_113354_113371(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.IsSuppressed;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 113354, 113371);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_113434_113446(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 113434, 113446);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_113434_113459(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression)
                {
                    var return_v = expression.SkipParens();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113434, 113459);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_113434_113474(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.GetLastToken();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113434, 113474);
                    return return_v;
                }


                int
                f_10314_113421_113513(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113421, 113513);
                    return 0;
                }


                int
                f_10314_113540_113611(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113540, 113611);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_113701_113723(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.WithSuppression();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113701, 113723);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 112837, 113735);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 112837, 113735);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindPointerIndirectionExpression(PrefixUnaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 113806, 114399);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 113948, 114080);

                BoundExpression
                operand = f_10314_113974_114079(this, f_10314_113992_114065(this, f_10314_114002_114014(node), diagnostics, f_10314_114029_114064(f_10314_114052_114063(node))), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114096, 114121);

                TypeSymbol
                pointedAtType
                = default(TypeSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114135, 114150);

                bool
                hasErrors
                = default(bool);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114164, 114267);

                f_10314_114164_114266(node, operand, diagnostics, out pointedAtType, out hasErrors);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114283, 114388);

                return f_10314_114290_114387(node, operand, pointedAtType ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol>(10314, 114341, 114375) ?? f_10314_114358_114375(this)), hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 113806, 114399);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_114002_114014(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 114002, 114014);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_114052_114063(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 114052, 114063);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10314_114029_114064(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = GetUnaryAssignmentKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 114029, 114064);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_113992_114065(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113992, 114065);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_113974_114079(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 113974, 114079);
                    return return_v;
                }


                int
                f_10314_114164_114266(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                pointedAtType, out bool
                hasErrors)
                {
                    BindPointerIndirectionExpressionInternal((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, operand, diagnostics, out pointedAtType, out hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 114164, 114266);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_114358_114375(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 114358, 114375);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundPointerIndirectionOperator
                f_10314_114290_114387(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundPointerIndirectionOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 114290, 114387);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 113806, 114399);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 113806, 114399);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static void BindPointerIndirectionExpressionInternal(CSharpSyntaxNode node, BoundExpression operand, DiagnosticBag diagnostics, out TypeSymbol pointedAtType, out bool hasErrors)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 114411, 115722);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114621, 114673);

                var
                operandType = f_10314_114639_114651(operand) as PointerTypeSymbol
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114689, 114722);

                hasErrors = f_10314_114701_114721(operand);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114831, 115711) || true) && ((object)operandType == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 114831, 115711);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114896, 114917);

                    pointedAtType = null;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 114937, 115252) || true) && (!hasErrors)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 114937, 115252);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115142, 115194);

                        f_10314_115142_115193(diagnostics, ErrorCode.ERR_PtrExpected, node);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115216, 115233);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 114937, 115252);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 114831, 115711);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 114831, 115711);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115318, 115360);

                    pointedAtType = f_10314_115334_115359(operandType);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115380, 115696) || true) && (f_10314_115384_115410(pointedAtType))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 115380, 115696);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115452, 115473);

                        pointedAtType = null;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115497, 115677) || true) && (!hasErrors)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 115497, 115677);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115561, 115611);

                            f_10314_115561_115610(diagnostics, ErrorCode.ERR_VoidError, node);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115637, 115654);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 115497, 115677);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 115380, 115696);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 114831, 115711);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 114411, 115722);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_114639_114651(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 114639, 114651);
                    return return_v;
                }


                bool
                f_10314_114701_114721(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 114701, 114721);
                    return return_v;
                }


                int
                f_10314_115142_115193(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 115142, 115193);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_115334_115359(Microsoft.CodeAnalysis.CSharp.Symbols.PointerTypeSymbol
                this_param)
                {
                    var return_v = this_param.PointedAtType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 115334, 115359);
                    return return_v;
                }


                bool
                f_10314_115384_115410(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 115384, 115410);
                    return return_v;
                }


                int
                f_10314_115561_115610(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 115561, 115610);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 114411, 115722);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 114411, 115722);
            }
        }

        private BoundExpression BindAddressOfExpression(PrefixUnaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 115786, 118516);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 115919, 116039);

                BoundExpression
                operand = f_10314_115945_116038(this, f_10314_115963_116024(this, f_10314_115973_115985(node), diagnostics, BindValueKind.AddressOf), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116053, 116101);

                f_10314_116053_116100(this, operand, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116117, 116155);

                bool
                hasErrors = f_10314_116134_116154(operand)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116262, 116350);

                bool
                isFixedStatementAddressOfExpression = f_10314_116305_116349(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116366, 116846);

                switch (operand)
                {

                    case BoundLambda _:
                    case UnboundLambda _:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 116366, 116846);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116522, 116546);

                            f_10314_116522_116545(hasErrors);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116572, 116657);

                            return f_10314_116579_116656(node, operand, f_10314_116621_116638(this), hasErrors: true);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 116366, 116846);

                    case BoundMethodGroup methodGroup:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 116366, 116846);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116756, 116831);

                        return f_10314_116763_116830(node, methodGroup, hasErrors);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 116366, 116846);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116862, 116900);

                TypeSymbol
                operandType = f_10314_116887_116899(operand)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 116914, 117008);

                f_10314_116914_117007((object)operandType != null, "BindValue should have caught a null operand type");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117024, 117074);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117088, 117165);

                ManagedKind
                managedKind = f_10314_117114_117164(operandType, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117179, 117230);

                f_10314_117179_117229(diagnostics, f_10314_117195_117208(node), useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117246, 117325);

                bool
                allowManagedAddressOf = f_10314_117275_117324(Flags, BinderFlags.AllowManagedAddressOf)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117339, 118077) || true) && (!allowManagedAddressOf)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 117339, 118077);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117399, 117570) || true) && (!hasErrors)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 117399, 117570);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117455, 117551);

                        hasErrors = f_10314_117467_117550(f_10314_117484_117495(), operandType, managedKind, f_10314_117523_117536(node), diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 117399, 117570);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117590, 118062) || true) && (!hasErrors)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 117590, 118062);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117646, 117681);

                        Symbol
                        accessedLocalOrParameterOpt
                        = default(Symbol);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117703, 118043) || true) && (f_10314_117707_117767(this, operand, out accessedLocalOrParameterOpt) != isFixedStatementAddressOfExpression)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 117703, 118043);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 117856, 117977);

                            f_10314_117856_117976(diagnostics, (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 117875, 117910) || ((isFixedStatementAddressOfExpression && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 117913, 117941)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 117944, 117969))) ? ErrorCode.ERR_FixedNotNeeded : ErrorCode.ERR_FixedNeeded, node);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 118003, 118020);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 117703, 118043);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 117590, 118062);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 117339, 118077);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 118093, 118312);

                TypeSymbol
                pointedAtType = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 118120, 118179) || ((managedKind == ManagedKind.Managed && (DynAbs.Tracing.TraceSender.Expression_True(10314, 118120, 118179) && allowManagedAddressOf
                ) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 118199, 118259)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 118279, 118311))) ? f_10314_118199_118259(this, SpecialType.System_IntPtr, diagnostics, node) : operandType ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol>(10314, 118279, 118311) ?? f_10314_118294_118311(this))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 118326, 118416);

                TypeSymbol
                pointerType = f_10314_118351_118415(TypeWithAnnotations.Create(pointedAtType))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 118432, 118505);

                return f_10314_118439_118504(node, operand, pointerType, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 115786, 118516);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_115973_115985(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 115973, 115985);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_115963_116024(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 115963, 116024);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_115945_116038(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 115945, 116038);
                    return return_v;
                }


                int
                f_10314_116053_116100(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportSuppressionIfNeeded(expr, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116053, 116100);
                    return 0;
                }


                bool
                f_10314_116134_116154(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 116134, 116154);
                    return return_v;
                }


                bool
                f_10314_116305_116349(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node)
                {
                    var return_v = SyntaxFacts.IsFixedStatementExpression((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116305, 116349);
                    return return_v;
                }


                int
                f_10314_116522_116545(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116522, 116545);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_116621_116638(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116621, 116638);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAddressOfOperator
                f_10314_116579_116656(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAddressOfOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116579, 116656);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUnconvertedAddressOfOperator
                f_10314_116763_116830(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                operand, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnconvertedAddressOfOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116763, 116830);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_116887_116899(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 116887, 116899);
                    return return_v;
                }


                int
                f_10314_116914_117007(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 116914, 117007);
                    return 0;
                }


                Microsoft.CodeAnalysis.ManagedKind
                f_10314_117114_117164(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.GetManagedKind(ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117114, 117164);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10314_117195_117208(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 117195, 117208);
                    return return_v;
                }


                bool
                f_10314_117179_117229(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.Location
                location, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(location, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117179, 117229);
                    return return_v;
                }


                bool
                f_10314_117275_117324(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117275, 117324);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10314_117484_117495()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 117484, 117495);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10314_117523_117536(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 117523, 117536);
                    return return_v;
                }


                bool
                f_10314_117467_117550(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, Microsoft.CodeAnalysis.ManagedKind
                managedKind, Microsoft.CodeAnalysis.Location
                location, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = CheckManagedAddr(compilation, type, managedKind, location, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117467, 117550);
                    return return_v;
                }


                bool
                f_10314_117707_117767(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, out Microsoft.CodeAnalysis.CSharp.Symbol
                accessedLocalOrParameterOpt)
                {
                    var return_v = this_param.IsMoveableVariable(expr, out accessedLocalOrParameterOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117707, 117767);
                    return return_v;
                }


                int
                f_10314_117856_117976(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 117856, 117976);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_118199_118259(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 118199, 118259);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_118294_118311(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 118294, 118311);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PointerTypeSymbol
                f_10314_118351_118415(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                pointedAtType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.PointerTypeSymbol(pointedAtType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 118351, 118415);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAddressOfOperator
                f_10314_118439_118504(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAddressOfOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 118439, 118504);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 115786, 118516);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 115786, 118516);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal bool IsMoveableVariable(BoundExpression expr, out Symbol accessedLocalOrParameterOpt)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 118872, 125197);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 118991, 119026);

                accessedLocalOrParameterOpt = null;
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119042, 125186) || true) && (true)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119042, 125186);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119087, 119118);

                        BoundKind
                        exprKind = f_10314_119108_119117(expr)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119136, 125171);

                        switch (exprKind)
                        {

                            case BoundKind.FieldAccess:
                            case BoundKind.EventAccess:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119327, 119351);

                                    FieldSymbol
                                    fieldSymbol
                                    = default(FieldSymbol);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119381, 119406);

                                    BoundExpression
                                    receiver
                                    = default(BoundExpression);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119436, 120414) || true) && (exprKind == BoundKind.FieldAccess)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119436, 120414);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119539, 119593);

                                        BoundFieldAccess
                                        fieldAccess = (BoundFieldAccess)expr
                                        ;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119627, 119665);

                                        fieldSymbol = f_10314_119641_119664(fieldAccess);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119699, 119734);

                                        receiver = f_10314_119710_119733(fieldAccess);
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119436, 120414);
                                    }

                                    else

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119436, 120414);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119864, 119918);

                                        BoundEventAccess
                                        eventAccess = (BoundEventAccess)expr
                                        ;

                                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 119952, 120154) || true) && (f_10314_119956_119984_M(!eventAccess.IsUsableAsField) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 119956, 120033) || f_10314_119988_120033(f_10314_119988_120011(eventAccess))))
                                        )

                                        {
                                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119952, 120154);
                                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120107, 120119);

                                            return true;
                                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119952, 120154);
                                        }
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120188, 120238);

                                        EventSymbol
                                        eventSymbol = f_10314_120214_120237(eventAccess)
                                        ;
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120272, 120314);

                                        fieldSymbol = f_10314_120286_120313(eventSymbol);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120348, 120383);

                                        receiver = f_10314_120359_120382(eventAccess);
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119436, 120414);
                                    }

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120446, 120638) || true) && ((object)fieldSymbol == null || (DynAbs.Tracing.TraceSender.Expression_False(10314, 120450, 120501) || f_10314_120481_120501(fieldSymbol)) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 120450, 120529) || (object)receiver == null))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 120446, 120638);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120595, 120607);

                                        return true;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 120446, 120638);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120670, 120722);

                                    var
                                    unusedDiagnostics = f_10314_120694_120721()
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120752, 120900);

                                    bool
                                    receiverIsLValue = f_10314_120776_120899(this, receiver.Syntax, receiver, BindValueKind.AddressOf, checkingReceiver: false, diagnostics: unusedDiagnostics)
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120930, 120955);

                                    f_10314_120930_120954(unusedDiagnostics);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 120987, 121117) || true) && (!receiverIsLValue)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 120987, 121117);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 121074, 121086);

                                        return true;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 120987, 121117);
                                    }

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 121496, 121638) || true) && (f_10314_121500_121529(f_10314_121500_121513(receiver)))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 121496, 121638);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 121595, 121607);

                                        return true;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 121496, 121638);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 121670, 121686);

                                    expr = receiver;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 121716, 121725);

                                    continue;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.RangeVariable:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122037, 122098);

                                    BoundRangeVariable
                                    variableAccess = (BoundRangeVariable)expr
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122128, 122156);

                                    expr = f_10314_122135_122155(variableAccess);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122221, 122230);

                                    continue;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.Parameter:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122361, 122415);

                                    BoundParameter
                                    parameterAccess = (BoundParameter)expr
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122445, 122511);

                                    ParameterSymbol
                                    parameterSymbol = f_10314_122479_122510(parameterAccess)
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122541, 122587);

                                    accessedLocalOrParameterOpt = parameterSymbol;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122617, 122664);

                                    return f_10314_122624_122647(parameterSymbol) != RefKind.None;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.ThisReference:
                            case BoundKind.BaseReference:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122850, 122932);

                                    accessedLocalOrParameterOpt = f_10314_122880_122931(f_10314_122880_122909(this));
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 122962, 122974);

                                    return true;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.Local:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 123101, 123143);

                                    BoundLocal
                                    localAccess = (BoundLocal)expr
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 123173, 123223);

                                    LocalSymbol
                                    localSymbol = f_10314_123199_123222(localAccess)
                                    ;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 123253, 123295);

                                    accessedLocalOrParameterOpt = localSymbol;
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 123618, 123661);

                                    return f_10314_123625_123644(localSymbol) != RefKind.None;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.PointerIndirectionOperator: //Covers ->, since the receiver will be one of these.
                            case BoundKind.ConvertedStackAllocExpression:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 123930, 123943);

                                    return false;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.PointerElementAccess:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 124447, 124525);

                                    BoundExpression
                                    underlyingExpr = f_10314_124480_124524(((BoundPointerElementAccess)expr))
                                    ;

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 124555, 124821) || true) && (underlyingExpr is BoundFieldAccess fieldAccess && (DynAbs.Tracing.TraceSender.Expression_True(10314, 124559, 124650) && f_10314_124609_124650(f_10314_124609_124632(fieldAccess))))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 124555, 124821);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 124716, 124747);

                                        expr = f_10314_124723_124746(fieldAccess);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 124781, 124790);

                                        continue;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 124555, 124821);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 124853, 124866);

                                    return false;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);

                            case BoundKind.PropertyAccess: // Never fixed
                            case BoundKind.IndexerAccess: // Never fixed
                            default:
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 119136, 125171);
                                {
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125113, 125125);

                                    return true;
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119136, 125171);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 119042, 125186);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10314, 119042, 125186);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10314, 119042, 125186);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 118872, 125197);

                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_119108_119117(Microsoft.CodeAnalysis.CSharp.BoundExpression?
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119108, 119117);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol
                f_10314_119641_119664(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess
                this_param)
                {
                    var return_v = this_param.FieldSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119641, 119664);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10314_119710_119733(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119710, 119733);
                    return return_v;
                }


                bool
                f_10314_119956_119984_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119956, 119984);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                f_10314_119988_120011(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.EventSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119988, 120011);
                    return return_v;
                }


                bool
                f_10314_119988_120033(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.IsWindowsRuntimeEvent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 119988, 120033);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                f_10314_120214_120237(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.EventSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 120214, 120237);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol?
                f_10314_120286_120313(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.AssociatedField;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 120286, 120313);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10314_120359_120382(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 120359, 120382);
                    return return_v;
                }


                bool
                f_10314_120481_120501(Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 120481, 120501);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10314_120694_120721()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 120694, 120721);
                    return return_v;
                }


                bool
                f_10314_120776_120899(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, bool
                checkingReceiver, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckValueKind(node, expr, valueKind, checkingReceiver: checkingReceiver, diagnostics: diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 120776, 120899);
                    return return_v;
                }


                int
                f_10314_120930_120954(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 120930, 120954);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_121500_121513(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 121500, 121513);
                    return return_v;
                }


                bool
                f_10314_121500_121529(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                this_param)
                {
                    var return_v = this_param.IsReferenceType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 121500, 121529);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_122135_122155(Microsoft.CodeAnalysis.CSharp.BoundRangeVariable
                this_param)
                {
                    var return_v = this_param.Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 122135, 122155);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                f_10314_122479_122510(Microsoft.CodeAnalysis.CSharp.BoundParameter
                this_param)
                {
                    var return_v = this_param.ParameterSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 122479, 122510);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10314_122624_122647(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 122624, 122647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10314_122880_122909(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 122880, 122909);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol?
                f_10314_122880_122931(Microsoft.CodeAnalysis.CSharp.Symbol?
                containingMember)
                {
                    var return_v = containingMember.EnclosingThisSymbol();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 122880, 122931);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                f_10314_123199_123222(Microsoft.CodeAnalysis.CSharp.BoundLocal
                this_param)
                {
                    var return_v = this_param.LocalSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 123199, 123222);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10314_123625_123644(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 123625, 123644);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_124480_124524(Microsoft.CodeAnalysis.CSharp.BoundPointerElementAccess
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 124480, 124524);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol
                f_10314_124609_124632(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess
                this_param)
                {
                    var return_v = this_param.FieldSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 124609, 124632);
                    return return_v;
                }


                bool
                f_10314_124609_124650(Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol
                this_param)
                {
                    var return_v = this_param.IsFixedSizeBuffer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 124609, 124650);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10314_124723_124746(Microsoft.CodeAnalysis.CSharp.BoundFieldAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 124723, 124746);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 118872, 125197);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 118872, 125197);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindUnaryOperator(PrefixUnaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 125209, 125681);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125336, 125468);

                BoundExpression
                operand = f_10314_125362_125467(this, f_10314_125380_125453(this, f_10314_125390_125402(node), diagnostics, f_10314_125417_125452(f_10314_125440_125451(node))), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125482, 125562);

                BoundLiteral
                constant = f_10314_125506_125561(this, node, operand, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125576, 125670);

                return constant ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.BoundLiteral>(10314, 125583, 125669) ?? f_10314_125595_125669(this, node, node.OperatorToken.Text, operand, diagnostics));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 125209, 125681);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_125390_125402(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 125390, 125402);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_125440_125451(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125440, 125451);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10314_125417_125452(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = GetUnaryAssignmentKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125417, 125452);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_125380_125453(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125380, 125453);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_125362_125467(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125362, 125467);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLiteral
                f_10314_125506_125561(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindIntegralMinValConstants(node, operand, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125506, 125561);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_125595_125669(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node, string
                operatorText, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindUnaryOperatorCore((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, operatorText, operand, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125595, 125669);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 125209, 125681);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 125209, 125681);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void ReportSuppressionIfNeeded(BoundExpression expr, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 125693, 125952);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125805, 125941) || true) && (f_10314_125809_125826(expr))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 125805, 125941);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 125860, 125926);

                    f_10314_125860_125925(diagnostics, ErrorCode.ERR_IllegalSuppression, expr.Syntax);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 125805, 125941);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 125693, 125952);

                bool
                f_10314_125809_125826(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.IsSuppressed;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 125809, 125826);
                    return return_v;
                }


                int
                f_10314_125860_125925(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 125860, 125925);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 125693, 125952);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 125693, 125952);
            }
        }

        private BoundExpression BindUnaryOperatorCore(CSharpSyntaxNode node, string operatorText, BoundExpression operand, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 125982, 130000);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126148, 126216);

                UnaryOperatorKind
                kind = f_10314_126173_126215(f_10314_126203_126214(node))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126232, 126320);

                bool
                isOperandNullOrNew = f_10314_126258_126281(operand) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 126258, 126319) || f_10314_126285_126319(operand))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126334, 126653) || true) && (isOperandNullOrNew)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 126334, 126653);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126541, 126638);

                    f_10314_126541_126637(diagnostics, ErrorCode.ERR_BadOpOnNullOrDefaultOrNew, node, operatorText, f_10314_126621_126636(operand));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 126334, 126653);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126743, 127174) || true) && (isOperandNullOrNew || (DynAbs.Tracing.TraceSender.Expression_False(10314, 126747, 126804) || f_10314_126782_126796(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10314_126769_126781(operand), 10314, 126769, 126796)) == true))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 126743, 127174);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 126901, 127159);

                    return f_10314_126908_127158(node, kind, operand, ConstantValue.NotAvailable, methodOpt: null, resultKind: LookupResultKind.Empty, type: f_10314_127102_127119(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 126743, 127174);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 127748, 128267) || true) && (f_10314_127752_127776(operand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 127748, 128267);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 127810, 128252);

                    return f_10314_127817_128251(syntax: node, operatorKind: f_10314_127911_128006(f_10314_127911_127951(kind, UnaryOperatorKind.Dynamic), f_10314_127983_128005()), operand: operand, constantValueOpt: ConstantValue.NotAvailable, methodOpt: null, resultKind: LookupResultKind.Viable, type: operand.Type!);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 127748, 128267);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128283, 128311);

                LookupResultKind
                resultKind
                = default(LookupResultKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128325, 128383);

                ImmutableArray<MethodSymbol>
                originalUserDefinedOperators
                = default(ImmutableArray<MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128397, 128529);

                var
                best = f_10314_128408_128528(this, kind, operand, node, diagnostics, out resultKind, out originalUserDefinedOperators)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128543, 129060) || true) && (f_10314_128547_128561_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 128543, 129060);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128595, 128674);

                    f_10314_128595_128673(node, diagnostics, operatorText, operand, resultKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 128692, 129045);

                    return f_10314_128699_129044(node, kind, operand, ConstantValue.NotAvailable, null, resultKind, originalUserDefinedOperators, f_10314_128988_129005(this), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 128543, 129060);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129076, 129107);

                var
                signature = best.Signature
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129123, 129279);

                var
                resultOperand = f_10314_129143_129278(this, operand.Syntax, operand, best.Conversion, isCast: false, conversionGroupOpt: null, signature.OperandType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129293, 129331);

                var
                resultType = signature.ReturnType
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129345, 129399);

                UnaryOperatorKind
                resultOperatorKind = signature.Kind
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129413, 129449);

                var
                resultMethod = signature.Method
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129463, 129580);

                var
                resultConstant = f_10314_129484_129579(this, node, resultOperatorKind, resultOperand, f_10314_129543_129565(resultType), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129596, 129673);

                f_10314_129596_129672(resultOperatorKind, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 129689, 129989);

                return f_10314_129696_129988(node, f_10314_129760_129833(resultOperatorKind, f_10314_129810_129832()), resultOperand, resultConstant, resultMethod, resultKind, resultType);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 125982, 130000);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_126203_126214(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126203, 126214);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_126173_126215(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxKindToUnaryOperatorKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126173, 126215);
                    return return_v;
                }


                bool
                f_10314_126258_126281(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126258, 126281);
                    return return_v;
                }


                bool
                f_10314_126285_126319(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsImplicitObjectCreation();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126285, 126319);
                    return return_v;
                }


                object
                f_10314_126621_126636(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 126621, 126636);
                    return return_v;
                }


                int
                f_10314_126541_126637(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126541, 126637);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_126769_126781(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 126769, 126781);
                    return return_v;
                }


                bool?
                f_10314_126782_126796(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type?.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126782, 126796);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_127102_127119(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 127102, 127119);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                f_10314_126908_127158(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, constantValueOpt, methodOpt: methodOpt, resultKind: resultKind, type: (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 126908, 127158);
                    return return_v;
                }


                bool
                f_10314_127752_127776(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 127752, 127776);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_127911_127951(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 127911, 127951);
                    return return_v;
                }


                bool
                f_10314_127983_128005()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 127983, 128005);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_127911_128006(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 127911, 128006);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                f_10314_127817_128251(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator(syntax: (Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind: operatorKind, operand: operand, constantValueOpt: constantValueOpt, methodOpt: methodOpt, resultKind: resultKind, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 127817, 128251);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult
                f_10314_128408_128528(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.UnaryOperatorOverloadResolution(kind, operand, node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 128408, 128528);
                    return return_v;
                }


                bool
                f_10314_128547_128561_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 128547, 128561);
                    return return_v;
                }


                int
                f_10314_128595_128673(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, string
                operatorName, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind)
                {
                    ReportUnaryOperatorError(node, diagnostics, operatorName, operand, resultKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 128595, 128673);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_128988_129005(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.CreateErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 128988, 129005);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                f_10314_128699_129044(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperatorsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, constantValueOpt, methodOpt, resultKind, originalUserDefinedOperatorsOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 128699, 129044);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_129143_129278(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                isCast, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(syntax, source, conversion, isCast: isCast, conversionGroupOpt: conversionGroupOpt, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 129143, 129278);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_129543_129565(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 129543, 129565);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_129484_129579(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.SpecialType
                resultType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldUnaryOperator(syntax, kind, operand, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 129484, 129579);
                    return return_v;
                }


                int
                f_10314_129596_129672(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    CheckNativeIntegerFeatureAvailability(operatorKind, (Microsoft.CodeAnalysis.SyntaxNode)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 129596, 129672);
                    return 0;
                }


                bool
                f_10314_129810_129832()
                {
                    var return_v = CheckOverflowAtRuntime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 129810, 129832);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_129760_129833(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, bool
                enabled)
                {
                    var return_v = kind.WithOverflowChecksIfApplicable(enabled);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 129760, 129833);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator
                f_10314_129696_129988(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                operatorKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.ConstantValue?
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                methodOpt, Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnaryOperator((Microsoft.CodeAnalysis.SyntaxNode)syntax, operatorKind, operand, constantValueOpt, methodOpt, resultKind, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 129696, 129988);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 125982, 130000);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 125982, 130000);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ConstantValue? FoldEnumUnaryOperator(
                    CSharpSyntaxNode syntax,
                    UnaryOperatorKind kind,
                    BoundExpression operand,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 130012, 131681);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130235, 130294);

                var
                underlyingType = f_10314_130256_130292(f_10314_130256_130268(operand))!
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130310, 130394);

                BoundExpression
                newOperand = f_10314_130339_130393(this, operand, underlyingType, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130567, 130642);

                var
                upconvertSpecialType = f_10314_130594_130641(f_10314_130614_130640(underlyingType))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130656, 130838);

                var
                upconvertType = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 130676, 130726) || ((upconvertSpecialType == f_10314_130700_130726(underlyingType) && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 130746, 130760)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 130780, 130837))) ? underlyingType : f_10314_130780_130837(this, upconvertSpecialType, diagnostics, syntax)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130854, 130924);

                newOperand = f_10314_130867_130923(this, newOperand, upconvertType, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 130940, 131015);

                UnaryOperatorKind
                newKind = f_10314_130968_131014(f_10314_130968_130983(kind), upconvertSpecialType)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131031, 131135);

                var
                constantValue = f_10314_131051_131134(this, syntax, newKind, operand, f_10314_131095_131120(upconvertType), diagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131203, 131633) || true) && (constantValue != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 131207, 131252) && f_10314_131232_131252_M(!constantValue.IsBad)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 131203, 131633);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131355, 131504);

                    var
                    binder = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 131368, 131422) || ((f_10314_131368_131383(kind) == UnaryOperatorKind.BitwiseComplement && DynAbs.Tracing.TraceSender.Conditional_F2(10314, 131446, 131496)) || DynAbs.Tracing.TraceSender.Conditional_F3(10314, 131499, 131503))) ? f_10314_131446_131496(this, @checked: false) : this
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131522, 131618);

                    return f_10314_131529_131617(binder, syntax, constantValue, underlyingType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 131203, 131633);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131649, 131670);

                return constantValue;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 130012, 131681);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_130256_130268(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 130256, 130268);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10314_130256_130292(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.GetEnumUnderlyingType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130256, 130292);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_130339_130393(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130339, 130393);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_130614_130640(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 130614, 130640);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_130594_130641(Microsoft.CodeAnalysis.SpecialType
                underlyingType)
                {
                    var return_v = GetEnumPromotedType(underlyingType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130594, 130641);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_130700_130726(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 130700, 130726);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_130780_130837(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130780, 130837);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10314_130867_130923(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(source, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130867, 130923);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_130968_130983(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130968, 130983);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_130968_131014(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.SpecialType
                type)
                {
                    var return_v = kind.WithType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 130968, 131014);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10314_131095_131120(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 131095, 131120);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_131051_131134(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.SpecialType
                resultType, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldUnaryOperator(syntax, kind, operand, resultType, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 131051, 131134);
                    return return_v;
                }


                bool
                f_10314_131232_131252_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 131232, 131252);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                f_10314_131368_131383(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.Operator();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 131368, 131383);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10314_131446_131496(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, bool
                @checked)
                {
                    var return_v = this_param.WithCheckedOrUncheckedRegion(@checked: @checked);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 131446, 131496);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_131529_131617(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.ConstantValue
                sourceValue, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldConstantNumericConversion((Microsoft.CodeAnalysis.SyntaxNode)syntax, sourceValue, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 131529, 131617);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 130012, 131681);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 130012, 131681);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ConstantValue? FoldUnaryOperator(
                    CSharpSyntaxNode syntax,
                    UnaryOperatorKind kind,
                    BoundExpression operand,
                    SpecialType resultType,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 131693, 134045);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 131949, 131979);

                f_10314_131949_131978(operand != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132060, 132145) || true) && (f_10314_132064_132084(operand))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132060, 132145);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132118, 132130);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132060, 132145);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132161, 132195);

                var
                value = f_10314_132173_132194(operand)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132209, 132303) || true) && (value == null || (DynAbs.Tracing.TraceSender.Expression_False(10314, 132213, 132241) || f_10314_132230_132241(value)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132209, 132303);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132275, 132288);

                    return value;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132209, 132303);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132319, 132470) || true) && (f_10314_132323_132336(kind) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 132323, 132356) && !f_10314_132341_132356(kind)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132319, 132470);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132390, 132455);

                    return f_10314_132397_132454(this, syntax, kind, operand, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132319, 132470);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132486, 132545);

                var
                newValue = f_10314_132501_132544(kind, value)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132559, 132678) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132559, 132678);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132613, 132663);

                    return f_10314_132620_132662(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132559, 132678);
                }

                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132730, 132796);

                    newValue = f_10314_132741_132795(kind, value);
                }
                catch (OverflowException)
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCatch(10314, 132825, 133188);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132883, 133173) || true) && (f_10314_132887_132913())
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132883, 133173);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 132955, 133013);

                        f_10314_132955_133012(diagnostics, ErrorCode.ERR_CheckedOverflow, syntax);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133035, 133060);

                        return f_10314_133042_133059();
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132883, 133173);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 132883, 133173);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133142, 133154);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 132883, 133173);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCatch(10314, 132825, 133188);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133204, 133323) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 133204, 133323);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133258, 133308);

                    return f_10314_133265_133307(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 133204, 133323);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133339, 133871) || true) && (f_10314_133343_133369())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 133339, 133871);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133447, 133504);

                        newValue = f_10314_133458_133503(kind, value);
                    }
                    catch (OverflowException)
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCatch(10314, 133541, 133731);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133607, 133665);

                        f_10314_133607_133664(diagnostics, ErrorCode.ERR_CheckedOverflow, syntax);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133687, 133712);

                        return f_10314_133694_133711();
                        DynAbs.Tracing.TraceSender.TraceExitCatch(10314, 133541, 133731);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 133339, 133871);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 133339, 133871);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133797, 133856);

                    newValue = f_10314_133808_133855(kind, value);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 133339, 133871);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133887, 134006) || true) && (newValue != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 133887, 134006);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 133941, 133991);

                    return f_10314_133948_133990(newValue, resultType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 133887, 134006);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134022, 134034);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 131693, 134045);

                int
                f_10314_131949_131978(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 131949, 131978);
                    return 0;
                }


                bool
                f_10314_132064_132084(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 132064, 132084);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_132173_132194(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 132173, 132194);
                    return return_v;
                }


                bool
                f_10314_132230_132241(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.IsBad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 132230, 132241);
                    return return_v;
                }


                bool
                f_10314_132323_132336(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsEnum();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132323, 132336);
                    return return_v;
                }


                bool
                f_10314_132341_132356(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind)
                {
                    var return_v = kind.IsLifted();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132341, 132356);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10314_132397_132454(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FoldEnumUnaryOperator(syntax, kind, operand, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132397, 132454);
                    return return_v;
                }


                object?
                f_10314_132501_132544(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                value)
                {
                    var return_v = FoldNeverOverflowUnaryOperator(kind, value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132501, 132544);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_132620_132662(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132620, 132662);
                    return return_v;
                }


                object?
                f_10314_132741_132795(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                value)
                {
                    var return_v = FoldNativeIntegerOverflowingUnaryOperator(kind, value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132741, 132795);
                    return return_v;
                }


                bool
                f_10314_132887_132913()
                {
                    var return_v = CheckOverflowAtCompileTime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 132887, 132913);
                    return return_v;
                }


                int
                f_10314_132955_133012(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 132955, 133012);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_133042_133059()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 133042, 133059);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_133265_133307(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 133265, 133307);
                    return return_v;
                }


                bool
                f_10314_133343_133369()
                {
                    var return_v = CheckOverflowAtCompileTime;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 133343, 133369);
                    return return_v;
                }


                object?
                f_10314_133458_133503(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                value)
                {
                    var return_v = FoldCheckedIntegralUnaryOperator(kind, value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 133458, 133503);
                    return return_v;
                }


                int
                f_10314_133607_133664(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 133607, 133664);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_133694_133711()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 133694, 133711);
                    return return_v;
                }


                object?
                f_10314_133808_133855(Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.ConstantValue
                value)
                {
                    var return_v = FoldUncheckedIntegralUnaryOperator(kind, value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 133808, 133855);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_133948_133990(object
                value, Microsoft.CodeAnalysis.SpecialType
                st)
                {
                    var return_v = ConstantValue.Create(value, st);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 133948, 133990);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 131693, 134045);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 131693, 134045);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object? FoldNeverOverflowUnaryOperator(UnaryOperatorKind kind, ConstantValue value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 134057, 135965);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134271, 135926);

                switch (kind)
                {

                    case UnaryOperatorKind.DecimalUnaryMinus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134380, 134407);

                        return f_10314_134387_134406_M(-value.DecimalValue);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.DoubleUnaryMinus:
                    case UnaryOperatorKind.FloatUnaryMinus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134544, 134570);

                        return f_10314_134551_134569_M(-value.DoubleValue);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.DecimalUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134650, 134677);

                        return f_10314_134657_134676_M(+value.DecimalValue);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.FloatUnaryPlus:
                    case UnaryOperatorKind.DoubleUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134812, 134838);

                        return f_10314_134819_134837_M(+value.DoubleValue);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.LongUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 134915, 134940);

                        return f_10314_134922_134939_M(+value.Int64Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.ULongUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135018, 135044);

                        return f_10314_135025_135043_M(+value.UInt64Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.IntUnaryPlus:
                    case UnaryOperatorKind.NIntUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135175, 135200);

                        return f_10314_135182_135199_M(+value.Int32Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.UIntUnaryPlus:
                    case UnaryOperatorKind.NUIntUnaryPlus:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135333, 135359);

                        return f_10314_135340_135358_M(+value.UInt32Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.BoolLogicalNegation:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135442, 135469);

                        return f_10314_135449_135468_M(!value.BooleanValue);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.IntBitwiseComplement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135553, 135578);

                        return f_10314_135560_135577_M(~value.Int32Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.LongBitwiseComplement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135663, 135688);

                        return f_10314_135670_135687_M(~value.Int64Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.UIntBitwiseComplement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135773, 135799);

                        return f_10314_135780_135798_M(~value.UInt32Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);

                    case UnaryOperatorKind.ULongBitwiseComplement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 134271, 135926);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135885, 135911);

                        return f_10314_135892_135910_M(~value.UInt64Value);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 134271, 135926);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 135942, 135954);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 134057, 135965);

                decimal
                f_10314_134387_134406_M(decimal
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 134387, 134406);
                    return return_v;
                }


                double
                f_10314_134551_134569_M(double
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 134551, 134569);
                    return return_v;
                }


                decimal
                f_10314_134657_134676_M(decimal
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 134657, 134676);
                    return return_v;
                }


                double
                f_10314_134819_134837_M(double
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 134819, 134837);
                    return return_v;
                }


                long
                f_10314_134922_134939_M(long
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 134922, 134939);
                    return return_v;
                }


                ulong
                f_10314_135025_135043_M(ulong
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135025, 135043);
                    return return_v;
                }


                int
                f_10314_135182_135199_M(int
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135182, 135199);
                    return return_v;
                }


                uint
                f_10314_135340_135358_M(uint
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135340, 135358);
                    return return_v;
                }


                bool
                f_10314_135449_135468_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135449, 135468);
                    return return_v;
                }


                int
                f_10314_135560_135577_M(int
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135560, 135577);
                    return return_v;
                }


                long
                f_10314_135670_135687_M(long
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135670, 135687);
                    return return_v;
                }


                uint
                f_10314_135780_135798_M(uint
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135780, 135798);
                    return return_v;
                }


                ulong
                f_10314_135892_135910_M(ulong
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 135892, 135910);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 134057, 135965);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 134057, 135965);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object? FoldUncheckedIntegralUnaryOperator(UnaryOperatorKind kind, ConstantValue value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 135977, 136472);
                unchecked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136146, 136418);

                    switch (kind)
                    {

                        case UnaryOperatorKind.LongUnaryMinus:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 136146, 136418);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136264, 136289);

                            return f_10314_136271_136288_M(-value.Int64Value);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 136146, 136418);

                        case UnaryOperatorKind.IntUnaryMinus:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 136146, 136418);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136374, 136399);

                            return f_10314_136381_136398_M(-value.Int32Value);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 136146, 136418);
                    }
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136449, 136461);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 135977, 136472);

                long
                f_10314_136271_136288_M(long
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 136271, 136288);
                    return return_v;
                }


                int
                f_10314_136381_136398_M(int
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 136381, 136398);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 135977, 136472);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 135977, 136472);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object? FoldCheckedIntegralUnaryOperator(UnaryOperatorKind kind, ConstantValue value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 136484, 136975);
                checked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136649, 136921);

                    switch (kind)
                    {

                        case UnaryOperatorKind.LongUnaryMinus:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 136649, 136921);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136767, 136792);

                            return f_10314_136774_136791_M(-value.Int64Value);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 136649, 136921);

                        case UnaryOperatorKind.IntUnaryMinus:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 136649, 136921);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136877, 136902);

                            return f_10314_136884_136901_M(-value.Int32Value);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 136649, 136921);
                    }
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 136952, 136964);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 136484, 136975);

                long
                f_10314_136774_136791_M(long
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 136774, 136791);
                    return return_v;
                }


                int
                f_10314_136884_136901_M(int
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 136884, 136901);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 136484, 136975);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 136484, 136975);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static object? FoldNativeIntegerOverflowingUnaryOperator(UnaryOperatorKind kind, ConstantValue value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 136987, 137550);
                checked
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137161, 137496);

                    switch (kind)
                    {

                        case UnaryOperatorKind.NIntUnaryMinus:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137161, 137496);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137279, 137304);

                            return f_10314_137286_137303_M(-value.Int32Value);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137161, 137496);

                        case UnaryOperatorKind.NIntBitwiseComplement:
                        case UnaryOperatorKind.NUIntBitwiseComplement:
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137161, 137496);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137465, 137477);

                            return null;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137161, 137496);
                    }
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137527, 137539);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 136987, 137550);

                int
                f_10314_137286_137303_M(int
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 137286, 137303);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 136987, 137550);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 136987, 137550);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static UnaryOperatorKind SyntaxKindToUnaryOperatorKind(SyntaxKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 137562, 138572);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137666, 138561);

                switch (kind)
                {

                    case SyntaxKind.PreIncrementExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137752, 137793);

                        return UnaryOperatorKind.PrefixIncrement;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.PostIncrementExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137852, 137894);

                        return UnaryOperatorKind.PostfixIncrement;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.PreDecrementExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 137952, 137993);

                        return UnaryOperatorKind.PrefixDecrement;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.PostDecrementExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138052, 138094);

                        return UnaryOperatorKind.PostfixDecrement;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.UnaryPlusExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138149, 138184);

                        return UnaryOperatorKind.UnaryPlus;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.UnaryMinusExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138240, 138276);

                        return UnaryOperatorKind.UnaryMinus;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.LogicalNotExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138332, 138373);

                        return UnaryOperatorKind.LogicalNegation;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    case SyntaxKind.BitwiseNotExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138429, 138472);

                        return UnaryOperatorKind.BitwiseComplement;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 137666, 138561);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138499, 138546);

                        throw f_10314_138505_138545(kind);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 137666, 138561);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 137562, 138572);

                System.Exception
                f_10314_138505_138545(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 138505, 138545);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 137562, 138572);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 137562, 138572);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static BindValueKind GetBinaryAssignmentKind(SyntaxKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 138584, 139664);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138678, 139653);

                switch (kind)
                {

                    case SyntaxKind.SimpleAssignmentExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 138678, 139653);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 138789, 138821);

                        return BindValueKind.Assignable;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 138678, 139653);

                    case SyntaxKind.AddAssignmentExpression:
                    case SyntaxKind.AndAssignmentExpression:
                    case SyntaxKind.DivideAssignmentExpression:
                    case SyntaxKind.ExclusiveOrAssignmentExpression:
                    case SyntaxKind.LeftShiftAssignmentExpression:
                    case SyntaxKind.ModuloAssignmentExpression:
                    case SyntaxKind.MultiplyAssignmentExpression:
                    case SyntaxKind.OrAssignmentExpression:
                    case SyntaxKind.RightShiftAssignmentExpression:
                    case SyntaxKind.SubtractAssignmentExpression:
                    case SyntaxKind.CoalesceAssignmentExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 138678, 139653);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 139522, 139562);

                        return BindValueKind.CompoundAssignment;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 138678, 139653);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 138678, 139653);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 139610, 139638);

                        return BindValueKind.RValue;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 138678, 139653);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 138584, 139664);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 138584, 139664);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 138584, 139664);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static BindValueKind GetUnaryAssignmentKind(SyntaxKind kind)
        {
            switch (kind)
            {
                case SyntaxKind.PreDecrementExpression:
                case SyntaxKind.PreIncrementExpression:
                case SyntaxKind.PostDecrementExpression:
                case SyntaxKind.PostIncrementExpression:
                    return BindValueKind.IncrementDecrement;
                case SyntaxKind.AddressOfExpression:
                    Debug.Assert(false, "Should be handled separately.");
                    goto default;
                default:
                    return BindValueKind.RValue;
            }
        }

        private BoundLiteral BindIntegralMinValConstants(PrefixUnaryExpressionSyntax node, BoundExpression operand, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 140386, 142925);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141350, 141461) || true) && (f_10314_141354_141365(node) != SyntaxKind.UnaryMinusExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141350, 141461);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141434, 141446);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141350, 141461);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141477, 141636) || true) && (f_10314_141481_141493(node) != operand.Syntax || (DynAbs.Tracing.TraceSender.Expression_False(10314, 141481, 141575) || f_10314_141515_141536(operand.Syntax) != SyntaxKind.NumericLiteralExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141477, 141636);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141609, 141621);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141477, 141636);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141652, 141706);

                var
                literal = (LiteralExpressionSyntax)operand.Syntax
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141720, 141746);

                var
                token = f_10314_141732_141745(literal)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141760, 142886) || true) && (token.Value is uint)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141760, 142886);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141817, 141848);

                    uint
                    value = (uint)token.Value
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141866, 141963) || true) && (value != 2147483648U)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141866, 141963);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141932, 141944);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141866, 141963);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 141983, 142168) || true) && (f_10314_141987_142011(token.Text, "u") || (DynAbs.Tracing.TraceSender.Expression_False(10314, 141987, 142039) || f_10314_142015_142039(token.Text, "U")) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 141987, 142067) || f_10314_142043_142067(token.Text, "l")) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 141987, 142095) || f_10314_142071_142095(token.Text, "L")))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141983, 142168);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142137, 142149);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141983, 142168);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142188, 142319);

                    return f_10314_142195_142318(node, f_10314_142218_142256(-2147483648), f_10314_142258_142317(this, SpecialType.System_Int32, diagnostics, node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141760, 142886);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 141760, 142886);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142353, 142886) || true) && (token.Value is ulong)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 142353, 142886);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142411, 142442);

                        var
                        value = (ulong)token.Value
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142460, 142567) || true) && (value != 9223372036854775808UL)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 142460, 142567);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142536, 142548);

                            return null;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 142460, 142567);
                        }

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142587, 142716) || true) && (f_10314_142591_142615(token.Text, "u") || (DynAbs.Tracing.TraceSender.Expression_False(10314, 142591, 142643) || f_10314_142619_142643(token.Text, "U")))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 142587, 142716);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142685, 142697);

                            return null;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 142587, 142716);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142736, 142871);

                        return f_10314_142743_142870(node, f_10314_142766_142808(-9223372036854775808), f_10314_142810_142869(this, SpecialType.System_Int64, diagnostics, node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 142353, 142886);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 141760, 142886);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 142902, 142914);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 140386, 142925);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_141354_141365(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 141354, 141365);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10314_141481_141493(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 141481, 141493);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10314_141515_141536(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 141515, 141536);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10314_141732_141745(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Token;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 141732, 141745);
                    return return_v;
                }


                bool
                f_10314_141987_142011(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 141987, 142011);
                    return return_v;
                }


                bool
                f_10314_142015_142039(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142015, 142039);
                    return return_v;
                }


                bool
                f_10314_142043_142067(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142043, 142067);
                    return return_v;
                }


                bool
                f_10314_142071_142095(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142071, 142095);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_142218_142256(int
                value)
                {
                    var return_v = ConstantValue.Create(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142218, 142256);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_142258_142317(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142258, 142317);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLiteral
                f_10314_142195_142318(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLiteral((Microsoft.CodeAnalysis.SyntaxNode)syntax, constantValueOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142195, 142318);
                    return return_v;
                }


                bool
                f_10314_142591_142615(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142591, 142615);
                    return return_v;
                }


                bool
                f_10314_142619_142643(string
                this_param, string
                value)
                {
                    var return_v = this_param.Contains(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142619, 142643);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10314_142766_142808(long
                value)
                {
                    var return_v = ConstantValue.Create(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142766, 142808);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10314_142810_142869(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142810, 142869);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLiteral
                f_10314_142743_142870(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax
                syntax, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLiteral((Microsoft.CodeAnalysis.SyntaxNode)syntax, constantValueOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 142743, 142870);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 140386, 142925);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 140386, 142925);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsDivisionByZero(BinaryOperatorKind kind, ConstantValue valueRight)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314, 142937, 144253);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143049, 143082);

                f_10314_143049_143081(valueRight != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143098, 144213);

                switch (kind)
                {

                    case BinaryOperatorKind.DecimalDivision:
                    case BinaryOperatorKind.DecimalRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 143098, 144213);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143265, 143304);

                        return f_10314_143272_143295(valueRight) == 0.0m;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 143098, 144213);

                    case BinaryOperatorKind.IntDivision:
                    case BinaryOperatorKind.IntRemainder:
                    case BinaryOperatorKind.NIntDivision:
                    case BinaryOperatorKind.NIntRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 143098, 144213);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143546, 143580);

                        return f_10314_143553_143574(valueRight) == 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 143098, 144213);

                    case BinaryOperatorKind.LongDivision:
                    case BinaryOperatorKind.LongRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 143098, 144213);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143713, 143747);

                        return f_10314_143720_143741(valueRight) == 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 143098, 144213);

                    case BinaryOperatorKind.UIntDivision:
                    case BinaryOperatorKind.UIntRemainder:
                    case BinaryOperatorKind.NUIntDivision:
                    case BinaryOperatorKind.NUIntRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 143098, 144213);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 143993, 144028);

                        return f_10314_144000_144022(valueRight) == 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 143098, 144213);

                    case BinaryOperatorKind.ULongDivision:
                    case BinaryOperatorKind.ULongRemainder:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 143098, 144213);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144163, 144198);

                        return f_10314_144170_144192(valueRight) == 0;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 143098, 144213);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144229, 144242);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314, 142937, 144253);

                int
                f_10314_143049_143081(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 143049, 143081);
                    return 0;
                }


                decimal
                f_10314_143272_143295(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.DecimalValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 143272, 143295);
                    return return_v;
                }


                int
                f_10314_143553_143574(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 143553, 143574);
                    return return_v;
                }


                long
                f_10314_143720_143741(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Int64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 143720, 143741);
                    return return_v;
                }


                uint
                f_10314_144000_144022(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt32Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 144000, 144022);
                    return return_v;
                }


                ulong
                f_10314_144170_144192(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.UInt64Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 144170, 144192);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 142937, 144253);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 142937, 144253);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsOperandErrors(CSharpSyntaxNode node, ref BoundExpression operand, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 144265, 145736);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144397, 145681);

                switch (f_10314_144405_144417(operand))
                {

                    case BoundKind.UnboundLambda:
                    case BoundKind.Lambda:
                    case BoundKind.MethodGroup:  // New in Roslyn - see DevDiv #864740.
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 144397, 145681);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144732, 144883) || true) && (f_10314_144736_144757_M(!operand.HasAnyErrors))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 144732, 144883);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144807, 144860);

                            f_10314_144807_144859(diagnostics, ErrorCode.ERR_LambdaInIsAs, node);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 144732, 144883);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144907, 144970);

                        operand = f_10314_144917_144969(f_10314_144917_144945(this, node, operand));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 144992, 145004);

                        return true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 144397, 145681);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 144397, 145681);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145054, 145636) || true) && ((object)f_10314_145066_145078(operand) == null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 145058, 145114) && !f_10314_145091_145114(operand)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 145054, 145636);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145164, 145484) || true) && (f_10314_145168_145189_M(!operand.HasAnyErrors))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 145164, 145484);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145346, 145457);

                                f_10314_145346_145456(diagnostics, ErrorCode.ERR_BadUnaryOp, node, f_10314_145397_145438(SyntaxKind.IsKeyword), f_10314_145440_145455(operand));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 145164, 145484);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145512, 145575);

                            operand = f_10314_145522_145574(f_10314_145522_145550(this, node, operand));
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145601, 145613);

                            return true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 145054, 145636);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10314, 145660, 145666);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 144397, 145681);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145697, 145725);

                return f_10314_145704_145724(operand);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 144265, 145736);

                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10314_144405_144417(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 144405, 144417);
                    return return_v;
                }


                bool
                f_10314_144736_144757_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 144736, 144757);
                    return return_v;
                }


                int
                f_10314_144807_144859(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 144807, 144859);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10314_144917_144945(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                childNode)
                {
                    var return_v = this_param.BadExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax, childNode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 144917, 144945);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10314_144917_144969(Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                node)
                {
                    var return_v = node.MakeCompilerGenerated<Microsoft.CodeAnalysis.CSharp.BoundBadExpression>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 144917, 144969);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10314_145066_145078(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 145066, 145078);
                    return return_v;
                }


                bool
                f_10314_145091_145114(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 145091, 145114);
                    return return_v;
                }


                bool
                f_10314_145168_145189_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 145168, 145189);
                    return return_v;
                }


                string
                f_10314_145397_145438(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = SyntaxFacts.GetText(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 145397, 145438);
                    return return_v;
                }


                object
                f_10314_145440_145455(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 145440, 145455);
                    return return_v;
                }


                int
                f_10314_145346_145456(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 145346, 145456);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10314_145522_145550(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                childNode)
                {
                    var return_v = this_param.BadExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax, childNode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 145522, 145550);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10314_145522_145574(Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                node)
                {
                    var return_v = node.MakeCompilerGenerated<Microsoft.CodeAnalysis.CSharp.BoundBadExpression>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 145522, 145574);
                    return return_v;
                }


                bool
                f_10314_145704_145724(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 145704, 145724);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 144265, 145736);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 144265, 145736);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsOperatorErrors(CSharpSyntaxNode node, TypeSymbol operandType, BoundTypeExpression typeExpression, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 145748, 146912);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 145912, 145949);

                var
                targetType = f_10314_145929_145948(typeExpression)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146351, 146490) || true) && (f_10314_146355_146374(targetType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 146351, 146490);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146408, 146475);

                    f_10314_146408_146474(diagnostics, ErrorCode.WRN_StaticInAsOrIs, node, targetType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 146351, 146490);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146506, 146840) || true) && ((object)operandType != null && (DynAbs.Tracing.TraceSender.Expression_True(10314, 146510, 146581) && f_10314_146541_146581(operandType)) || (DynAbs.Tracing.TraceSender.Expression_False(10314, 146510, 146624) || f_10314_146585_146624(targetType)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 146506, 146840);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146739, 146795);

                    f_10314_146739_146794(diagnostics, ErrorCode.ERR_PointerInAsOrIs, node);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146813, 146825);

                    return true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 146506, 146840);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146856, 146901);

                return f_10314_146863_146882(targetType) == TypeKind.Error;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 145748, 146912);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10314_145929_145948(Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 145929, 145948);
                    return return_v;
                }


                bool
                f_10314_146355_146374(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 146355, 146374);
                    return return_v;
                }


                int
                f_10314_146408_146474(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 146408, 146474);
                    return 0;
                }


                bool
                f_10314_146541_146581(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsPointerOrFunctionPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 146541, 146581);
                    return return_v;
                }


                bool
                f_10314_146585_146624(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsPointerOrFunctionPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 146585, 146624);
                    return return_v;
                }


                int
                f_10314_146739_146794(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 146739, 146794);
                    return 0;
                }


                Microsoft.CodeAnalysis.TypeKind
                f_10314_146863_146882(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.TypeKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 146863, 146882);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 145748, 146912);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 145748, 146912);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected static bool IsUnderscore(ExpressionSyntax node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 146982, 147070);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 146998, 147070);
                return node is IdentifierNameSyntax name && (DynAbs.Tracing.TraceSender.Expression_True(10314, 146998, 147070) && name.Identifier.IsUnderscoreToken()); DynAbs.Tracing.TraceSender.TraceExitMethod(10314, 146982, 147070);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314, 146982, 147070);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314, 146982, 147070);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindIsOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10314, 147083, 154625);
                Microsoft.CodeAnalysis.DiagnosticBag isTypeDiagnostics = default(Microsoft.CodeAnalysis.DiagnosticBag);
                Microsoft.CodeAnalysis.CSharp.BoundTypeExpression typeExpression = default(Microsoft.CodeAnalysis.CSharp.BoundTypeExpression);
                Microsoft.CodeAnalysis.ConstantValue? constantValueOpt = default(Microsoft.CodeAnalysis.ConstantValue?);
                bool wasExpression = default(bool);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 147202, 147293);

                var
                resultType = (TypeSymbol)f_10314_147231_147292(this, SpecialType.System_Boolean, diagnostics, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 147307, 147373);

                var
                operand = f_10314_147321_147372(this, f_10314_147349_147358(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 147387, 147458);

                var
                operandHasErrors = f_10314_147410_147457(this, node, ref operand, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 147577, 147623);

                bool
                wasUnderscore = f_10314_147598_147622(f_10314_147611_147621(node))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 147637, 149491) || true) && (!f_10314_147642_147744(f_10314_147656_147666(node), out isTypeDiagnostics, out typeExpression) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 147641, 147779) && !wasUnderscore) && (DynAbs.Tracing.TraceSender.Expression_True(10314, 147641, 147900) && f_10314_147800_147900(((CSharpParseOptions)f_10314_147821_147844(f_10314_147821_147836(node))), MessageID.IDS_FeaturePatternMatching)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 147637, 149491);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148026, 148081);

                    var
                    isPatternDiagnostics = f_10314_148053_148080()
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148099, 148443) || true) && ((object)f_10314_148111_148123(operand) == null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 148099, 148443);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148173, 148365) || true) && (!operandHasErrors)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 148173, 148365);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148244, 148342);

                            f_10314_148244_148341(isPatternDiagnostics, ErrorCode.ERR_BadPatternExpression, f_10314_148305_148323(f_10314_148305_148314(node)), f_10314_148325_148340(operand));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 148173, 148365);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148389, 148424);

                        operand = f_10314_148399_148423(this, operand);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10314, 148099, 148443);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148463, 148501);

                    bool
                    hasErrors = f_10314_148480_148500(f_10314_148480_148490(node))
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148519, 148682);

                    var
                    convertedExpression = f_10314_148545_148681(this, f_10314_148570_148582(operand), f_10314_148584_148594(node), ref hasErrors, isPatternDiagnostics, out constantValueOpt, out wasExpression)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148700, 149428) || true) && (wasExpression)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10314, 148700, 149428);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148759, 148797);

                        hasErrors |= constantValueOpt is null;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148819, 148844);

                        f_10314_148819_148843(isTypeDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148866, 148916);

                        f_10314_148866_148915(diagnostics, isPatternDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314, 148938, 149244);

                        var
                        boundConstantPattern = new BoundConstantPattern(
                        f_10314_149016_149026(node), convertedExpression, constantValueOpt ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.ConstantValue?>(10314, 149049, 149086) ?? f_10314_149069_149086()), f_10314_149088_149100(operand), f_10314_149102_149126(convertedExpression) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?>(10314, 149102, 149142) ?? f_10314_149130_149142(operand)), hasErrors)
#pragma warning disable format
                        { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true,10314,148965,149243) }
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149298,149409);

return f_10314_149305_149408(this, node, operand, boundConstantPattern, resultType, operandHasErrors, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,148700,149428);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149448,149476);

f_10314_149448_149475(
                isPatternDiagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,147637,149491);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149507,149554);

f_10314_149507_149553(
            diagnostics, isTypeDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149568,149635);

var 
targetTypeWithAnnotations = f_10314_149600_149634(typeExpression)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149649,149686);

var 
targetType = f_10314_149666_149685(typeExpression)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149700,149956) || true) && (f_10314_149704_149730(targetType)&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 149704, 149792)&&f_10314_149734_149792(targetTypeWithAnnotations.NullableAnnotation)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,149700,149956);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149826,149899);

f_10314_149826_149898(diagnostics, ErrorCode.ERR_IsNullableType, f_10314_149875_149885(node), targetType);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149917,149941);

operandHasErrors = true;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,149700,149956);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,149972,150013);

var 
targetTypeKind = f_10314_149993_150012(targetType)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,150027,150277) || true) && (operandHasErrors ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 150031, 150116)||f_10314_150051_150116(this, node, f_10314_150074_150086(operand), typeExpression, diagnostics)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,150027,150277);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,150150,150262);

return f_10314_150157_150261(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,150027,150277);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,150293,150586) || true) && (wasUnderscore &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 150297, 150416)&&f_10314_150314_150416(((CSharpParseOptions)f_10314_150335_150358(f_10314_150335_150350(node))), MessageID.IDS_FeatureRecursivePatterns)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,150293,150586);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,150450,150571);

f_10314_150450_150570(                diagnostics, ErrorCode.WRN_IsTypeNamedUnderscore, f_10314_150503_150522(f_10314_150503_150513(node)), f_10314_150524_150547(typeExpression)??(DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol?>(10314, 150524, 150569)??(Symbol)targetType));
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,150293,150586);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,151188,151238);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,151254,152605) || true) && (f_10314_151258_151279(operand)== f_10314_151283_151301()||(DynAbs.Tracing.TraceSender.Expression_False(10314, 151258, 151359)||f_10314_151322_151334(operand)== BoundKind.MethodGroup )||(DynAbs.Tracing.TraceSender.Expression_False(10314, 151258, 151405)||f_10314_151380_151405(f_10314_151380_151392(operand))))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,151254,152605);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152244,152310);

f_10314_152244_152309(diagnostics, ErrorCode.WRN_IsAlwaysFalse, node, targetType);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152328,152436);

Conversion 
conv = f_10314_152346_152435(f_10314_152346_152357(), operand, targetType, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152454,152496);

f_10314_152454_152495(                diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152514,152590);

return f_10314_152521_152589(node, operand, typeExpression, conv, resultType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,151254,152605);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152621,153041) || true) && (targetTypeKind == TypeKind.Dynamic)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,152621,153041);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,152745,153026);

f_10314_152745_153025(diagnostics, ErrorCode.WRN_IsDynamicIsConfusing, node, node.OperatorToken.Text, f_10314_152852_152867(targetType), f_10314_152890_152955(f_10314_152890_152950(this, SpecialType.System_Object, diagnostics, node)));
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,152621,153041);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153057,153088);

var 
operandType = f_10314_153075_153087(operand)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153102,153144);

f_10314_153102_153143((object)operandType != null);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153158,153426) || true) && (f_10314_153162_153182(operandType)== TypeKind.Dynamic)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,153158,153426);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153336,153411);

operandType = f_10314_153350_153410(this, SpecialType.System_Object, diagnostics, node);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,153158,153426);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153442,153553);

Conversion 
conversion = f_10314_153466_153552(f_10314_153466_153477(), operandType, targetType, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153567,153609);

f_10314_153567_153608(            diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153623,153740);

f_10314_153623_153739(node, diagnostics, operandType, targetType, conversion.Kind, f_10314_153717_153738(operand));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,153754,153836);

return f_10314_153761_153835(node, operand, typeExpression, conversion, resultType);

bool tryBindAsType(
                ExpressionSyntax possibleType,
                out DiagnosticBag bindAsTypeDiagnostics,
                out BoundTypeExpression boundType)
		{
			try
            {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,153852,154612);
Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol alias = default(Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,154062,154114);

bindAsTypeDiagnostics = f_10314_154086_154113();
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,154132,154249);

TypeWithAnnotations 
targetTypeWithAnnotations = f_10314_154180_154248(this, possibleType, bindAsTypeDiagnostics, out alias)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,154267,154322);

TypeSymbol 
targetType = targetTypeWithAnnotations.Type
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,154340,154424);

boundType = f_10314_154352_154423(possibleType, alias, targetTypeWithAnnotations);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,154469,154597);

return !(((DynAbs.Tracing.TraceSender.Conditional_F1(10314, 154479, 154503)||((!f_10314_154480_154503(targetType, null)&&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 154506, 154530))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 154533, 154538)))?f_10314_154506_154530(targetType):false) == true &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 154478, 154595)&&f_10314_154551_154595(bindAsTypeDiagnostics)));
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,153852,154612);

Microsoft.CodeAnalysis.DiagnosticBag
f_10314_154086_154113()
{
var return_v = DiagnosticBag.GetInstance();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154086, 154113);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
f_10314_154180_154248(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
alias)
{
var return_v = this_param.BindType( syntax, diagnostics, out alias);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154180, 154248);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
f_10314_154352_154423(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
aliasOpt,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
typeWithAnnotations)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundTypeExpression( (Microsoft.CodeAnalysis.SyntaxNode)syntax, aliasOpt, typeWithAnnotations);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154352, 154423);
return return_v;
}


bool
f_10314_154480_154503(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param,object
obj)
{
var return_v = this_param.Equals( obj);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154480, 154503);
return return_v;
}


bool
f_10314_154506_154530(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154506, 154530);
return return_v;
}


bool
f_10314_154551_154595(Microsoft.CodeAnalysis.DiagnosticBag
this_param)
{
var return_v = this_param.HasAnyResolvedErrors();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 154551, 154595);
return return_v;
}

            }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,153852,154612);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,153852,154612);
}
			throw new System.Exception("Slicer error: unreachable code");
		}
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,147083,154625);

Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_147231_147292(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147231, 147292);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_147349_147358(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Left;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 147349, 147358);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_147321_147372(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindRValueWithoutTargetType( node, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147321, 147372);
return return_v;
}


bool
f_10314_147410_147457(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,ref Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.IsOperandErrors( (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, ref operand, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147410, 147457);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_147611_147621(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 147611, 147621);
return return_v;
}


bool
f_10314_147598_147622(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node)
{
var return_v = IsUnderscore( node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147598, 147622);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_147656_147666(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 147656, 147666);
return return_v;
}


bool
f_10314_147642_147744(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
possibleType,out Microsoft.CodeAnalysis.DiagnosticBag
bindAsTypeDiagnostics,out Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
boundType)
{
var return_v = tryBindAsType( possibleType, out bindAsTypeDiagnostics, out boundType);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147642, 147744);
return return_v;
}


Microsoft.CodeAnalysis.SyntaxTree
f_10314_147821_147836(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.SyntaxTree;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 147821, 147836);
return return_v;
}


Microsoft.CodeAnalysis.ParseOptions
f_10314_147821_147844(Microsoft.CodeAnalysis.SyntaxTree
this_param)
{
var return_v = this_param.Options;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 147821, 147844);
return return_v;
}


bool
f_10314_147800_147900(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
this_param,Microsoft.CodeAnalysis.CSharp.MessageID
feature)
{
var return_v = this_param.IsFeatureEnabled( feature);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 147800, 147900);
return return_v;
}


Microsoft.CodeAnalysis.DiagnosticBag
f_10314_148053_148080()
{
var return_v = DiagnosticBag.GetInstance();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148053, 148080);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_148111_148123(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148111, 148123);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_148305_148314(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Left;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148305, 148314);
return return_v;
}


Microsoft.CodeAnalysis.Location
f_10314_148305_148323(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
this_param)
{
var return_v = this_param.Location;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148305, 148323);
return return_v;
}


object
f_10314_148325_148340(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Display;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148325, 148340);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_148244_148341(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location,params object[]
args)
{
var return_v = diagnostics.Add( code, location, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148244, 148341);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_148399_148423(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr)
{
var return_v = this_param.ToBadExpression( expr);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148399, 148423);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_148480_148490(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148480, 148490);
return return_v;
}


bool
f_10314_148480_148500(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
this_param)
{
var return_v = this_param.HasErrors;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148480, 148500);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_148570_148582(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148570, 148582);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_148584_148594(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 148584, 148594);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_148545_148681(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
inputType,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
patternExpression,ref bool
hasErrors,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,out Microsoft.CodeAnalysis.ConstantValue?
constantValueOpt,out bool
wasExpression)
{
var return_v = this_param.BindExpressionForPattern( inputType, patternExpression, ref hasErrors, diagnostics, out constantValueOpt, out wasExpression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148545, 148681);
return return_v;
}


int
f_10314_148819_148843(Microsoft.CodeAnalysis.DiagnosticBag
this_param)
{
this_param.Free();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148819, 148843);
return 0;
}


int
f_10314_148866_148915(Microsoft.CodeAnalysis.DiagnosticBag
this_param,Microsoft.CodeAnalysis.DiagnosticBag
bag)
{
this_param.AddRangeAndFree( bag);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 148866, 148915);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_149016_149026(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149016, 149026);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_149069_149086()
{
var return_v = ConstantValue.Bad;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149069, 149086);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_149088_149100(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149088, 149100);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_149102_149126(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149102, 149126);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_149130_149142(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149130, 149142);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_149305_149408(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.CSharp.BoundConstantPattern
pattern,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
boolType,bool
hasErrors,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.MakeIsPatternExpression( (Microsoft.CodeAnalysis.SyntaxNode)node, expression, (Microsoft.CodeAnalysis.CSharp.BoundPattern)pattern, boolType, hasErrors, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 149305, 149408);
return return_v;
}


int
f_10314_149448_149475(Microsoft.CodeAnalysis.DiagnosticBag
this_param)
{
this_param.Free();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 149448, 149475);
return 0;
}


int
f_10314_149507_149553(Microsoft.CodeAnalysis.DiagnosticBag
this_param,Microsoft.CodeAnalysis.DiagnosticBag
bag)
{
this_param.AddRangeAndFree( bag);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 149507, 149553);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
f_10314_149600_149634(Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
this_param)
{
var return_v = this_param.TypeWithAnnotations;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149600, 149634);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_149666_149685(Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149666, 149685);
return return_v;
}


bool
f_10314_149704_149730(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.IsReferenceType ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149704, 149730);
return return_v;
}


bool
f_10314_149734_149792(Microsoft.CodeAnalysis.CSharp.NullableAnnotation
annotation)
{
var return_v = annotation.IsAnnotated();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 149734, 149792);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_149875_149885(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149875, 149885);
return return_v;
}


int
f_10314_149826_149898(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 149826, 149898);
return 0;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_149993_150012(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 149993, 150012);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_150074_150086(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150074, 150086);
return return_v;
}


bool
f_10314_150051_150116(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
operandType,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
typeExpression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.IsOperatorErrors( (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, operandType, typeExpression, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 150051, 150116);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundIsOperator
f_10314_150157_150261(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 150157, 150261);
return return_v;
}


Microsoft.CodeAnalysis.SyntaxTree
f_10314_150335_150350(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.SyntaxTree;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150335, 150350);
return return_v;
}


Microsoft.CodeAnalysis.ParseOptions
f_10314_150335_150358(Microsoft.CodeAnalysis.SyntaxTree
this_param)
{
var return_v = this_param.Options;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150335, 150358);
return return_v;
}


bool
f_10314_150314_150416(Microsoft.CodeAnalysis.CSharp.CSharpParseOptions
this_param,Microsoft.CodeAnalysis.CSharp.MessageID
feature)
{
var return_v = this_param.IsFeatureEnabled( feature);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 150314, 150416);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_150503_150513(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150503, 150513);
return return_v;
}


Microsoft.CodeAnalysis.Location
f_10314_150503_150522(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
this_param)
{
var return_v = this_param.Location;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150503, 150522);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol?
f_10314_150524_150547(Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
this_param)
{
var return_v = this_param.AliasOpt ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 150524, 150547);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_150450_150570(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location,params object[]
args)
{
var return_v = diagnostics.Add( code, location, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 150450, 150570);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue?
f_10314_151258_151279(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 151258, 151279);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_151283_151301()
{
var return_v = ConstantValue.Null ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 151283, 151301);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundKind
f_10314_151322_151334(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Kind ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 151322, 151334);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_151380_151392(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 151380, 151392);
return return_v;
}


bool
f_10314_151380_151405(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type)
{
var return_v = type.IsVoidType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 151380, 151405);
return return_v;
}


int
f_10314_152244_152309(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152244, 152309);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_152346_152357()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 152346, 152357);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_152346_152435(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152346, 152435);
return return_v;
}


bool
f_10314_152454_152495(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152454, 152495);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundIsOperator
f_10314_152521_152589(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152521, 152589);
return return_v;
}


string
f_10314_152852_152867(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.Name;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 152852, 152867);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_152890_152950(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152890, 152950);
return return_v;
}


string
f_10314_152890_152955(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
this_param)
{
var return_v = this_param.Name // a pretty way of getting the string "Object"
;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 152890, 152955);
return return_v;
}


int
f_10314_152745_153025(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 152745, 153025);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_153075_153087(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 153075, 153087);
return return_v;
}


int
f_10314_153102_153143(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153102, 153143);
return 0;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_153162_153182(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 153162, 153182);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_153350_153410(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153350, 153410);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_153466_153477()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 153466, 153477);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_153466_153552(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
source,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyBuiltInConversion( source, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153466, 153552);
return return_v;
}


bool
f_10314_153567_153608(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153567, 153608);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue?
f_10314_153717_153738(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 153717, 153738);
return return_v;
}


int
f_10314_153623_153739(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue?
operandConstantValue)
{
ReportIsOperatorConstantWarnings( (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, diagnostics, operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153623, 153739);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundIsOperator
f_10314_153761_153835(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 153761, 153835);
return return_v;
}


        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,147083,154625);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,147083,154625);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private static void ReportIsOperatorConstantWarnings(
            CSharpSyntaxNode syntax,
            DiagnosticBag diagnostics,
            TypeSymbol operandType,
            TypeSymbol targetType,
            ConversionKind conversionKind,
            ConstantValue operandConstantValue)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,154637,155871);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,155356,155477);

ConstantValue 
constantValue = f_10314_155386_155476(operandType, targetType, conversionKind, operandConstantValue)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,155491,155860) || true) && (constantValue != null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,155491,155860);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,155550,155640);

f_10314_155550_155639(constantValue == f_10314_155580_155598()||(DynAbs.Tracing.TraceSender.Expression_False(10314, 155563, 155638)||constantValue == f_10314_155619_155638()));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,155660,155777);

ErrorCode 
errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 155682, 155717)||((constantValue == f_10314_155699_155717()&&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 155720, 155746))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 155749, 155776)))?ErrorCode.WRN_IsAlwaysTrue :ErrorCode.WRN_IsAlwaysFalse
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,155795,155845);

f_10314_155795_155844(diagnostics, errorCode, syntax, targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,155491,155860);
}
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,154637,155871);

Microsoft.CodeAnalysis.ConstantValue
f_10314_155386_155476(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue
operandConstantValue)
{
var return_v = GetIsOperatorConstantResult( operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 155386, 155476);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_155580_155598()
{
var return_v = ConstantValue.True ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 155580, 155598);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_155619_155638()
{
var return_v = ConstantValue.False;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 155619, 155638);
return return_v;
}


int
f_10314_155550_155639(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 155550, 155639);
return 0;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_155699_155717()
{
var return_v = ConstantValue.True ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 155699, 155717);
return return_v;
}


int
f_10314_155795_155844(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
syntax,params object[]
args)
{
Error( diagnostics, code, syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 155795, 155844);
return 0;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,154637,155871);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,154637,155871);
}
		}

        internal static ConstantValue GetIsOperatorConstantResult(
            TypeSymbol operandType,
            TypeSymbol targetType,
            ConversionKind conversionKind,
            ConstantValue operandConstantValue,
            bool operandCouldBeNull = true)
        {
            Debug.Assert((object)targetType != null);

            // SPEC:    The result of the operation depends on D and T as follows:
            // SPEC:    1)      If T is a reference type, the result is true if D and T are the same type, if D is a reference type and
            // SPEC:        an implicit reference conversion from D to T exists, or if D is a value type and a boxing conversion from D to T exists.
            // SPEC:    2)      If T is a nullable type, the result is true if D is the underlying type of T.
            // SPEC:    3)      If T is a non-nullable value type, the result is true if D and T are the same type.
            // SPEC:    4)      Otherwise, the result is false.

            // NOTE:    The language specification talks about the runtime evaluation of the is operation.
            // NOTE:    However, we are interested in computing the compile time constant value for the expression.
            // NOTE:    Even though BoundIsOperator and BoundAsOperator will always have no ConstantValue
            // NOTE:    (they are non-constant expressions according to Section 7.19 of the specification),
            // NOTE:    we want to perform constant analysis of is/as expressions during binding to generate warnings
            // NOTE:    (always true/false/null) and during rewriting for optimized codegen.
            // NOTE:
            // NOTE:    Because the heuristic presented here is used to change codegen, it must be conservative. It is acceptable
            // NOTE:    for us to fail to report a warning in cases where humans could logically deduce that the operator will
            // NOTE:    always return false. It is not acceptable to inaccurately warn that the operator will always return false
            // NOTE:    if there are cases where it might succeed.
            // NOTE:
            // NOTE:    These same heuristics are also used in pattern-matching to determine if an expression of the form
            // NOTE:    `e is T x` is permitted. It is an error if `e` cannot be of type `T` according to this method
            // NOTE:    returning ConstantValue.False.
            // NOTE:    The heuristics are also used to determine if a `case T1 x1:` is subsumed by
            // NOTE:    some previous `case T2 x2:` in a switch statement. For that purpose operandType is T1, targetType is T2,
            // NOTE:    and operandCouldBeNull is false; the former subsumes the latter if this method returns ConstantValue.True.
            // NOTE:    Since the heuristic is now used to produce errors in pattern-matching, making it more accurate in the
            // NOTE:    future could be a breaking change.

            // To begin our heuristic: if the operand is literal null then we automatically return that the
            // result is false. You might think that we can simply check to see if the conversion is
            // ConversionKind.NullConversion, but "null is T" for a type parameter T is actually classified
            // as an implicit reference conversion if T is constrained to reference types. Rather
            // than deal with all those special cases we can simply bail out here.

            if (operandConstantValue == ConstantValue.Null)
            {
                return ConstantValue.False;
            }

            Debug.Assert((object)operandType != null);

            operandCouldBeNull =
                operandCouldBeNull &&
                operandType.CanContainNull() && // a non-nullable value type is never null
                (operandConstantValue == null || operandConstantValue == ConstantValue.Null); // a non-null constant is never null

            switch (conversionKind)
            {
                case ConversionKind.NoConversion:
                    // Oddly enough, "x is T" can be true even if there is no conversion from x to T!
                    //
                    // Scenario 1: Type parameter compared to System.Enum.
                    //
                    // bool M1<X>(X x) where X : struct { return x is Enum; }
                    //
                    // There is no conversion from X to Enum, not even an explicit conversion. But
                    // nevertheless, X could be constructed as an enumerated type.
                    // However, we can sometimes know that the result will be false.
                    //
                    // Scenario 2a: Constrained type parameter compared to reference type.
                    //
                    // bool M2a<X>(X x) where X : struct { return x is string; }
                    //
                    // We know that X, constrained to struct, will never be string.
                    //
                    // Scenario 2b: Reference type compared to constrained type parameter.
                    //
                    // bool M2b<X>(string x) where X : struct { return x is X; }
                    //
                    // We know that string will never be X, constrained to struct.
                    //
                    // Scenario 3: Value type compared to type parameter.
                    //
                    // bool M3<T>(int x) { return x is T; }
                    //
                    // There is no conversion from int to T, but T could nevertheless be int.
                    //
                    // Scenario 4: Constructed type compared to open type
                    //
                    // bool M4<T>(C<int> x) { return x is C<T>; }
                    //
                    // There is no conversion from C<int> to C<T>, but nevertheless, T might be int.
                    //
                    // Scenario 5: Open type compared to constructed type:
                    //
                    // bool M5<X>(C<X> x) { return x is C<int>);
                    //
                    // Again, X could be int.
                    //
                    // We could then go on to get more complicated. For example,
                    //
                    // bool M6<X>(C<X> x) where X : struct { return x is C<string>; }
                    //
                    // We know that C<X> is never convertible to C<string> no matter what
                    // X is. Or:
                    //
                    // bool M7<T>(Dictionary<int, int> x) { return x is List<T>; }
                    //
                    // We know that no matter what T is, the conversion will never succeed.
                    //
                    // As noted above, we must be conservative. We follow the lead of the native compiler,
                    // which uses the following algorithm:
                    //
                    // * If neither type is open and there is no conversion then the result is always false:

                    if (!operandType.ContainsTypeParameter() && !targetType.ContainsTypeParameter())
                    {
                        return ConstantValue.False;
                    }

                    // * Otherwise, at least one of them is of an open type. If the operand is of value type
                    //   and the target is a class type other than System.Enum, or vice versa, then we are
                    //   in scenario 2, not scenario 1, and can correctly deduce that the result is false.

                    if (operandType.IsValueType && targetType.IsClassType() && targetType.SpecialType != SpecialType.System_Enum ||
                        targetType.IsValueType && operandType.IsClassType() && operandType.SpecialType != SpecialType.System_Enum)
                    {
                        return ConstantValue.False;
                    }

                    // * Otherwise, if the other type is a restricted type, we know no conversion is possible.
                    if (targetType.IsRestrictedType() || operandType.IsRestrictedType())
                    {
                        return ConstantValue.False;
                    }

                    // * Otherwise, we give up. Though there are other situations in which we can deduce that
                    //   the result will always be false, such as scenarios 6 and 7, but we do not attempt
                    //   to deduce this.

                    // CONSIDER: we could use TypeUnification.CanUnify to do additional compile-time checking.

                    return null;

                case ConversionKind.ImplicitNumeric:
                case ConversionKind.ExplicitNumeric:
                case ConversionKind.ImplicitEnumeration:
                // case ConversionKind.ExplicitEnumeration: // Handled separately below.
                case ConversionKind.ImplicitConstant:
                case ConversionKind.ImplicitUserDefined:
                case ConversionKind.ExplicitUserDefined:
                case ConversionKind.IntPtr:
                case ConversionKind.ExplicitTuple:
                case ConversionKind.ImplicitTuple:

                    // Consider all the cases where we know that "x is T" must be false just from
                    // the conversion classification.
                    //
                    // If we have "x is T" and the conversion from x to T is numeric or enum then the result must be false.
                    //
                    // If we have "null is T" then obviously that must be false.
                    //
                    // If we have "1 is long" then that must be false. (If we have "1 is int" then it is an identity conversion,
                    // not an implicit constant conversion.
                    //
                    // User-defined and IntPtr conversions are always false for "is".

                    return ConstantValue.False;

                case ConversionKind.ExplicitEnumeration:
                    // Enum-to-enum conversions should be treated the same as unsuccessful struct-to-struct
                    // conversions (i.e. make allowances for type unification, etc)
                    if (operandType.IsEnumType() && targetType.IsEnumType())
                    {
                        goto case ConversionKind.NoConversion;
                    }

                    return ConstantValue.False;

                case ConversionKind.ExplicitNullable:

                    // An explicit nullable conversion is a conversion of one of the following forms:
                    //
                    // 1) X? --> Y?, where X --> Y is an explicit conversion.  (If X --> Y is an implicit
                    //    conversion then X? --> Y? is an implicit nullable conversion.) In this case we
                    //    know that "X? is Y?" must be false because either X? is null, or we have an
                    //    explicit conversion from struct type X to struct type Y, and so X is never of type Y.)
                    //
                    // 2) X --> Y?, where again, X --> Y is an explicit conversion. By the same reasoning
                    //    as in case 1, this must be false.

                    if (targetType.IsNullableType())
                    {
                        return ConstantValue.False;
                    }

                    Debug.Assert(operandType.IsNullableType());

                    // 3) X? --> X. In this case, this is just a different way of writing "x != null".
                    //    We only know what the result will be if the input is known not to be null.
                    if (Conversions.HasIdentityConversion(operandType.GetNullableUnderlyingType(), targetType))
                    {
                        return operandCouldBeNull ? null : ConstantValue.True;
                    }

                    // 4) X? --> Y where the conversion X --> Y is an implicit or explicit value type conversion.
                    //    "X? is Y" again must be false.

                    return ConstantValue.False;

                case ConversionKind.ImplicitReference:
                    return operandCouldBeNull ? null : ConstantValue.True;

                case ConversionKind.ExplicitReference:
                case ConversionKind.Unboxing:
                    // In these three cases, the expression type must be a reference type. Therefore,
                    // the result cannot be determined. The expression could be null or of the wrong type,
                    // resulting in false, or it could be a non-null reference to the appropriate type,
                    // resulting in true.
                    return null;

                case ConversionKind.Identity:
                    // The result of "x is T" can be statically determined to be true if x is an expression
                    // of non-nullable value type T. If x is of reference or nullable value type then
                    // we cannot know, because again, the expression value could be null or it could be good.
                    // If it is of pointer type then we have already given an error.
                    return operandCouldBeNull ? null : ConstantValue.True;

                case ConversionKind.Boxing:

                    // A boxing conversion might be a conversion:
                    //
                    // * From a non-nullable value type to a reference type
                    // * From a nullable value type to a reference type
                    // * From a type parameter that *could* be a value type under construction
                    //   to a reference type
                    //
                    // In the first case we know that the conversion will always succeed and that the
                    // operand is never null, and therefore "is" will always result in true.
                    //
                    // In the second two cases we do not know; either the nullable value type could be
                    // null, or the type parameter could be constructed with a reference type, and it
                    // could be null.
                    return operandCouldBeNull ? null : ConstantValue.True;

                case ConversionKind.ImplicitNullable:
                    // We have "x is T" in one of the following situations:
                    // 1) x is of type X and T is X?.  The value is always true.
                    // 2) x is of type X and T is Y? where X is convertible to Y via an implicit numeric conversion. Eg,
                    //    x is of type int and T is decimal?.  The value is always false.
                    // 3) x is of type X? and T is Y? where X is convertible to Y via an implicit numeric conversion.
                    //    The value is always false.

                    Debug.Assert(targetType.IsNullableType());
                    return operandType.Equals(targetType.GetNullableUnderlyingType(), TypeCompareKind.AllIgnoreOptions)
                        ? ConstantValue.True : ConstantValue.False;

                default:
                case ConversionKind.ImplicitDynamic:
                case ConversionKind.ExplicitDynamic:
                case ConversionKind.ExplicitPointerToInteger:
                case ConversionKind.ExplicitPointerToPointer:
                case ConversionKind.ImplicitPointerToVoid:
                case ConversionKind.ExplicitIntegerToPointer:
                case ConversionKind.ImplicitNullToPointer:
                case ConversionKind.AnonymousFunction:
                case ConversionKind.NullLiteral:
                case ConversionKind.DefaultLiteral:
                case ConversionKind.MethodGroup:
                    // We've either replaced Dynamic with Object, or already bailed out with an error.
                    throw ExceptionUtilities.UnexpectedValue(conversionKind);
            }
        }

private BoundExpression BindAsOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,172126,179447);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172245,172311);

var 
operand = f_10314_172259_172310(this, f_10314_172287_172296(node), diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172325,172343);

AliasSymbol 
alias
=default(AliasSymbol);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172357,172450);

TypeWithAnnotations 
targetTypeWithAnnotations = f_10314_172405_172449(this, f_10314_172414_172424(node), diagnostics, out alias)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172464,172519);

TypeSymbol 
targetType = targetTypeWithAnnotations.Type
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172533,172624);

var 
typeExpression = f_10314_172554_172623(f_10314_172578_172588(node), alias, targetTypeWithAnnotations)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172638,172679);

var 
targetTypeKind = f_10314_172659_172678(targetType)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,172693,172721);

var 
resultType = targetType
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,173328,174419);

switch (f_10314_173336_173348(operand))
            {

case BoundKind.UnboundLambda:
                case BoundKind.Lambda:
                case BoundKind.MethodGroup:  // New in Roslyn - see DevDiv #864740.
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,173328,174419);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,173663,173814) || true) && (f_10314_173667_173688_M(!operand.HasAnyErrors))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,173663,173814);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,173738,173791);

f_10314_173738_173790(diagnostics, ErrorCode.ERR_LambdaInIsAs, node);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,173663,173814);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,173838,173950);

return f_10314_173845_173949(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,173328,174419);

case BoundKind.TupleLiteral:
                case BoundKind.ConvertedTupleLiteral:
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,173328,174419);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174075,174376) || true) && ((object)f_10314_174087_174099(operand)== null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,174075,174376);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174157,174215);

f_10314_174157_174214(diagnostics, ErrorCode.ERR_TypelessTupleInAs, node);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174241,174353);

return f_10314_174248_174352(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,174075,174376);
}
DynAbs.Tracing.TraceSender.TraceBreak(10314,174398,174404);

break;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,173328,174419);
            }

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174435,174771) || true) && (f_10314_174439_174459(operand)||(DynAbs.Tracing.TraceSender.Expression_False(10314, 174439, 174495)||targetTypeKind == TypeKind.Error))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,174435,174771);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174644,174756);

return f_10314_174651_174755(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,174435,174771);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174787,176166) || true) && (f_10314_174791_174817(targetType)&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 174791, 174879)&&f_10314_174821_174879(targetTypeWithAnnotations.NullableAnnotation)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,174787,176166);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,174913,174986);

f_10314_174913_174985(diagnostics, ErrorCode.ERR_AsNullableType, f_10314_174962_174972(node), targetType);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175006,175118);

return f_10314_175013_175117(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,174787,176166);
}

else 
{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,174787,176166);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175152,176166) || true) && (f_10314_175156_175183_M(!targetType.IsReferenceType)&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 175156, 175215)&&!f_10314_175188_175215(targetType)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,175152,176166);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175466,176019) || true) && (targetTypeKind == TypeKind.TypeParameter)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,175466,176019);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175552,175618);

f_10314_175552_175617(diagnostics, ErrorCode.ERR_AsWithTypeVar, node, targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,175466,176019);
}

else 
{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,175466,176019);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175660,176019) || true) && (targetTypeKind == TypeKind.Pointer ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 175664, 175744)||targetTypeKind == TypeKind.FunctionPointer))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,175660,176019);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175786,175842);

f_10314_175786_175841(diagnostics, ErrorCode.ERR_PointerInAsOrIs, node);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,175660,176019);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,175660,176019);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,175924,176000);

f_10314_175924_175999(diagnostics, ErrorCode.ERR_AsMustHaveReferenceType, node, targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,175660,176019);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,175466,176019);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,176039,176151);

return f_10314_176046_176150(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,175152,176166);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,174787,176166);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,176762,176901) || true) && (f_10314_176766_176785(targetType))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,176762,176901);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,176819,176886);

f_10314_176819_176885(diagnostics, ErrorCode.WRN_StaticInAsOrIs, node, targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,176762,176901);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,176917,177320) || true) && (f_10314_176921_176944(operand))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,176917,177320);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177211,177305);

return f_10314_177218_177304(node, operand, typeExpression, Conversion.NullLiteral, resultType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,176917,177320);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177336,177613) || true) && (f_10314_177340_177366(operand))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,177336,177613);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177400,177598);

operand = f_10314_177410_177597(operand.Syntax, targetType: null, constantValueOpt: f_10314_177489_177507(), type: f_10314_177536_177596(this, SpecialType.System_Object, diagnostics, node));
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,177336,177613);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177629,177660);

var 
operandType = f_10314_177647_177659(operand)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177674,177716);

f_10314_177674_177715((object)operandType != null);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177730,177773);

var 
operandTypeKind = f_10314_177752_177772(operandType)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177789,177877);

f_10314_177789_177876(!f_10314_177803_177842(targetType), "Should have been caught above");

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,177891,178251) || true) && (f_10314_177895_177935(operandType))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,177891,178251);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178050,178106);

f_10314_178050_178105(diagnostics, ErrorCode.ERR_PointerInAsOrIs, node);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178124,178236);

return f_10314_178131_178235(node, operand, typeExpression, Conversion.NoConversion, resultType, hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,177891,178251);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178267,178587) || true) && (operandTypeKind == TypeKind.Dynamic)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,178267,178587);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178440,178515);

operandType = f_10314_178454_178514(this, SpecialType.System_Object, diagnostics, node);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178533,178572);

operandTypeKind = f_10314_178551_178571(operandType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,178267,178587);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178603,178911) || true) && (targetTypeKind == TypeKind.Dynamic)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,178603,178911);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178767,178841);

targetType = f_10314_178780_178840(this, SpecialType.System_Object, diagnostics, node);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178859,178896);

targetTypeKind = f_10314_178876_178895(targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,178603,178911);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178927,178977);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,178991,179102);

Conversion 
conversion = f_10314_179015_179101(f_10314_179015_179026(), operandType, targetType, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,179116,179158);

f_10314_179116_179157(            diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,179172,179329);

bool 
hasErrors = f_10314_179189_179328(node, diagnostics, f_10314_179246_179262(this), operandType, targetType, conversion.Kind, f_10314_179306_179327(operand))
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,179343,179436);

return f_10314_179350_179435(node, operand, typeExpression, conversion, resultType, hasErrors);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,172126,179447);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_172287_172296(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Left;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 172287, 172296);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_172259_172310(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindRValueWithoutTargetType( node, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 172259, 172310);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_172414_172424(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 172414, 172424);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
f_10314_172405_172449(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
alias)
{
var return_v = this_param.BindType( syntax, diagnostics, out alias);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 172405, 172449);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_172578_172588(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 172578, 172588);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
f_10314_172554_172623(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
aliasOpt,Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
typeWithAnnotations)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundTypeExpression( (Microsoft.CodeAnalysis.SyntaxNode)syntax, aliasOpt, typeWithAnnotations);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 172554, 172623);
return return_v;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_172659_172678(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 172659, 172678);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundKind
f_10314_173336_173348(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Kind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 173336, 173348);
return return_v;
}


bool
f_10314_173667_173688_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 173667, 173688);
return return_v;
}


int
f_10314_173738_173790(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 173738, 173790);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_173845_173949(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 173845, 173949);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_174087_174099(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 174087, 174099);
return return_v;
}


int
f_10314_174157_174214(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 174157, 174214);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_174248_174352(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 174248, 174352);
return return_v;
}


bool
f_10314_174439_174459(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 174439, 174459);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_174651_174755(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 174651, 174755);
return return_v;
}


bool
f_10314_174791_174817(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.IsReferenceType ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 174791, 174817);
return return_v;
}


bool
f_10314_174821_174879(Microsoft.CodeAnalysis.CSharp.NullableAnnotation
annotation)
{
var return_v = annotation.IsAnnotated();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 174821, 174879);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_174962_174972(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 174962, 174972);
return return_v;
}


int
f_10314_174913_174985(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 174913, 174985);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_175013_175117(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 175013, 175117);
return return_v;
}


bool
f_10314_175156_175183_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 175156, 175183);
return return_v;
}


bool
f_10314_175188_175215(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsNullableType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 175188, 175215);
return return_v;
}


int
f_10314_175552_175617(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 175552, 175617);
return 0;
}


int
f_10314_175786_175841(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 175786, 175841);
return 0;
}


int
f_10314_175924_175999(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 175924, 175999);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_176046_176150(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 176046, 176150);
return return_v;
}


bool
f_10314_176766_176785(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.IsStatic;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 176766, 176785);
return return_v;
}


int
f_10314_176819_176885(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 176819, 176885);
return 0;
}


bool
f_10314_176921_176944(Microsoft.CodeAnalysis.CSharp.BoundExpression
node)
{
var return_v = node.IsLiteralNull();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 176921, 176944);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_177218_177304(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177218, 177304);
return return_v;
}


bool
f_10314_177340_177366(Microsoft.CodeAnalysis.CSharp.BoundExpression
node)
{
var return_v = node.IsLiteralDefault();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177340, 177366);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_177489_177507()
{
var return_v = ConstantValue.Null;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 177489, 177507);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_177536_177596(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177536, 177596);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundDefaultExpression
f_10314_177410_177597(Microsoft.CodeAnalysis.SyntaxNode
syntax,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression?
targetType,Microsoft.CodeAnalysis.ConstantValue
constantValueOpt,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundDefaultExpression( syntax, targetType: targetType, constantValueOpt: constantValueOpt, type: (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177410, 177597);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_177647_177659(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 177647, 177659);
return return_v;
}


int
f_10314_177674_177715(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177674, 177715);
return 0;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_177752_177772(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 177752, 177772);
return return_v;
}


bool
f_10314_177803_177842(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsPointerOrFunctionPointer();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177803, 177842);
return return_v;
}


int
f_10314_177789_177876(bool
condition,string
message)
{
Debug.Assert( condition, message);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177789, 177876);
return 0;
}


bool
f_10314_177895_177935(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsPointerOrFunctionPointer();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 177895, 177935);
return return_v;
}


int
f_10314_178050_178105(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 178050, 178105);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_178131_178235(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 178131, 178235);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_178454_178514(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 178454, 178514);
return return_v;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_178551_178571(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 178551, 178571);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_178780_178840(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 178780, 178840);
return return_v;
}


Microsoft.CodeAnalysis.TypeKind
f_10314_178876_178895(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.TypeKind;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 178876, 178895);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_179015_179026()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 179015, 179026);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_179015_179101(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
source,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyBuiltInConversion( source, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 179015, 179101);
return return_v;
}


bool
f_10314_179116_179157(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 179116, 179157);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSharpCompilation
f_10314_179246_179262(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.Compilation;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 179246, 179262);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue?
f_10314_179306_179327(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 179306, 179327);
return return_v;
}


bool
f_10314_179189_179328(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.CSharpCompilation
compilation,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue?
operandConstantValue)
{
var return_v = ReportAsOperatorConversionDiagnostics( (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, diagnostics, compilation, operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 179189, 179328);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundAsOperator
f_10314_179350_179435(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
operand,Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
targetType,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAsOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, targetType, conversion, type, hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 179350, 179435);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,172126,179447);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,172126,179447);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private static bool ReportAsOperatorConversionDiagnostics(
            CSharpSyntaxNode node,
            DiagnosticBag diagnostics,
            CSharpCompilation compilation,
            TypeSymbol operandType,
            TypeSymbol targetType,
            ConversionKind conversionKind,
            ConstantValue operandConstantValue)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,179459,183128);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,181623,181646);

bool 
hasErrors = false
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,181660,182890);

switch (conversionKind)
            {

case ConversionKind.ImplicitReference:
                case ConversionKind.Boxing:
                case ConversionKind.ImplicitNullable:
                case ConversionKind.Identity:
                case ConversionKind.ExplicitNullable:
                case ConversionKind.ExplicitReference:
                case ConversionKind.Unboxing:
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,181660,182890);
DynAbs.Tracing.TraceSender.TraceBreak(10314,182081,182087);

break;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,181660,182890);

default:
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,181660,182890);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182368,182845) || true) && (!f_10314_182373_182408(operandType)&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 182372, 182447)&&!f_10314_182413_182447(targetType))||(DynAbs.Tracing.TraceSender.Expression_False(10314, 182372, 182500)||f_10314_182476_182500(                        operandType)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,182368,182845);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182550,182648);

SymbolDistinguisher 
distinguisher = f_10314_182586_182647(compilation, operandType, targetType)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182674,182779);

f_10314_182674_182778(diagnostics, ErrorCode.ERR_NoExplicitBuiltinConv, node, f_10314_182736_182755(distinguisher), f_10314_182757_182777(distinguisher));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182805,182822);

hasErrors = true;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,182368,182845);
}
DynAbs.Tracing.TraceSender.TraceBreak(10314,182869,182875);

break;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,181660,182890);
            }

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182906,183084) || true) && (!hasErrors)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,182906,183084);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,182954,183069);

f_10314_182954_183068(node, diagnostics, operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,182906,183084);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,183100,183117);

return hasErrors;
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,179459,183128);

bool
f_10314_182373_182408(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.ContainsTypeParameter();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182373, 182408);
return return_v;
}


bool
f_10314_182413_182447(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.ContainsTypeParameter();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182413, 182447);
return return_v;
}


bool
f_10314_182476_182500(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsVoidType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182476, 182500);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
f_10314_182586_182647(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
compilation,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
symbol0,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
symbol1)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher( compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol0, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol1);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182586, 182647);
return return_v;
}


System.IFormattable
f_10314_182736_182755(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
this_param)
{
var return_v = this_param.First;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 182736, 182755);
return return_v;
}


System.IFormattable
f_10314_182757_182777(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
this_param)
{
var return_v = this_param.Second;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 182757, 182777);
return return_v;
}


int
f_10314_182674_182778(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
syntax,params object[]
args)
{
Error( diagnostics, code, syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182674, 182778);
return 0;
}


int
f_10314_182954_183068(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue
operandConstantValue)
{
ReportAsOperatorConstantWarnings( node, diagnostics, operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 182954, 183068);
return 0;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,179459,183128);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,179459,183128);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private static void ReportAsOperatorConstantWarnings(
            CSharpSyntaxNode node,
            DiagnosticBag diagnostics,
            TypeSymbol operandType,
            TypeSymbol targetType,
            ConversionKind conversionKind,
            ConstantValue operandConstantValue)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,183140,184193);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,183857,183978);

ConstantValue 
constantValue = f_10314_183887_183977(operandType, targetType, conversionKind, operandConstantValue)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,183992,184182) || true) && (constantValue != null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,183992,184182);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,184051,184086);

f_10314_184051_184085(f_10314_184064_184084(constantValue));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,184104,184167);

f_10314_184104_184166(diagnostics, ErrorCode.WRN_AlwaysNull, node, targetType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,183992,184182);
}
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,183140,184193);

Microsoft.CodeAnalysis.ConstantValue
f_10314_183887_183977(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue
operandConstantValue)
{
var return_v = GetAsOperatorConstantResult( operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 183887, 183977);
return return_v;
}


bool
f_10314_184064_184084(Microsoft.CodeAnalysis.ConstantValue
this_param)
{
var return_v = this_param.IsNull;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 184064, 184084);
return return_v;
}


int
f_10314_184051_184085(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 184051, 184085);
return 0;
}


int
f_10314_184104_184166(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
syntax,params object[]
args)
{
Error( diagnostics, code, syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 184104, 184166);
return 0;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,183140,184193);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,183140,184193);
}
		}

internal static ConstantValue GetAsOperatorConstantResult(TypeSymbol operandType, TypeSymbol targetType, ConversionKind conversionKind, ConstantValue operandConstantValue)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,184205,185170);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,184832,184964);

ConstantValue 
isOperatorConstantResult = f_10314_184873_184963(operandType, targetType, conversionKind, operandConstantValue)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,184978,185131) || true) && (isOperatorConstantResult != null &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 184982, 185056)&&f_10314_185018_185056_M(!isOperatorConstantResult.BooleanValue)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,184978,185131);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185090,185116);

return f_10314_185097_185115();
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,184978,185131);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185147,185159);

return null;
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,184205,185170);

Microsoft.CodeAnalysis.ConstantValue
f_10314_184873_184963(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
operandType,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
targetType,Microsoft.CodeAnalysis.CSharp.ConversionKind
conversionKind,Microsoft.CodeAnalysis.ConstantValue
operandConstantValue)
{
var return_v = GetIsOperatorConstantResult( operandType, targetType, conversionKind, operandConstantValue);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 184873, 184963);
return return_v;
}


bool
f_10314_185018_185056_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 185018, 185056);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_185097_185115()
{
var return_v = ConstantValue.Null;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 185097, 185115);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,184205,185170);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,184205,185170);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression GenerateNullCoalescingBadBinaryOpsError(BinaryExpressionSyntax node, BoundExpression leftOperand, BoundExpression rightOperand, Conversion leftConversion, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,185182,185914);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185412,185556);

f_10314_185412_185555(diagnostics, ErrorCode.ERR_BadBinaryOps, node, f_10314_185465_185511(node.OperatorToken.Kind()), f_10314_185513_185532(leftOperand), f_10314_185534_185554(rightOperand));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185572,185626);

leftOperand = f_10314_185586_185625(this, leftOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185640,185696);

rightOperand = f_10314_185655_185695(this, rightOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,185710,185903);

return f_10314_185717_185902(node, leftOperand, rightOperand, leftConversion, BoundNullCoalescingOperatorResultKind.NoCommonType, f_10314_185867_185884(this), hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,185182,185914);

string
f_10314_185465_185511(Microsoft.CodeAnalysis.CSharp.SyntaxKind
kind)
{
var return_v = SyntaxFacts.GetText( kind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185465, 185511);
return return_v;
}


object
f_10314_185513_185532(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Display;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 185513, 185532);
return return_v;
}


object
f_10314_185534_185554(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Display;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 185534, 185554);
return return_v;
}


int
f_10314_185412_185555(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185412, 185555);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_185586_185625(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185586, 185625);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_185655_185695(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185655, 185695);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_185867_185884(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185867, 185884);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_185717_185902(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 185717, 185902);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,185182,185914);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,185182,185914);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression BindNullCoalescingOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,185926,198148);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186057,186131);

var 
leftOperand = f_10314_186075_186130(this, f_10314_186085_186094(node), diagnostics, BindValueKind.RValue)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186145,186203);

leftOperand = f_10314_186159_186202(this, leftOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186217,186293);

var 
rightOperand = f_10314_186236_186292(this, f_10314_186246_186256(node), diagnostics, BindValueKind.RValue)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186393,186851) || true) && (f_10314_186397_186421(leftOperand)||(DynAbs.Tracing.TraceSender.Expression_False(10314, 186397, 186450)||f_10314_186425_186450(rightOperand)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,186393,186851);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186484,186538);

leftOperand = f_10314_186498_186537(this, leftOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186556,186612);

rightOperand = f_10314_186571_186611(this, rightOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186630,186836);

return f_10314_186637_186835(node, leftOperand, rightOperand, Conversion.NoConversion, BoundNullCoalescingOperatorResultKind.NoCommonType, f_10314_186800_186817(this), hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,186393,186851);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,186960,187371) || true) && (f_10314_186964_186994(leftOperand))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,186960,187371);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,187028,187130);

f_10314_187028_187129(diagnostics, ErrorCode.ERR_BadOpOnNullOrDefaultOrNew, node, node.OperatorToken.Text, "default");
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,187150,187356);

return f_10314_187157_187355(node, leftOperand, rightOperand, Conversion.NoConversion, BoundNullCoalescingOperatorResultKind.NoCommonType, f_10314_187320_187337(this), hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,186960,187371);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,187808,187850);

TypeSymbol 
optLeftType = f_10314_187833_187849(leftOperand)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,187873,187917);

TypeSymbol 
optRightType = f_10314_187899_187916(rightOperand)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,187938,188020);

bool 
isLeftNullable = (object)optLeftType != null &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 187960, 188019)&&f_10314_187991_188019(optLeftType))
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,188034,188174);

TypeSymbol 
optLeftType0 = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 188060, 188074)||((isLeftNullable &&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 188103, 188142))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 188162, 188173)))?f_10314_188103_188142(                optLeftType):                optLeftType
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,188381,188640) || true) && (f_10314_188385_188401(leftOperand)== BoundKind.UnboundLambda ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 188385, 188473)||f_10314_188432_188448(leftOperand)== BoundKind.MethodGroup))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,188381,188640);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,188507,188625);

return f_10314_188514_188624(this, node, leftOperand, rightOperand, Conversion.NoConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,188381,188640);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,188911,189694) || true) && ((object)optLeftType != null &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 188915, 188974)&&f_10314_188946_188974_M(!optLeftType.IsReferenceType))&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 188915, 188993)&&!isLeftNullable))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,188911,189694);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,189273,189679) || true) && (f_10314_189277_189301_M(!optLeftType.IsValueType))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,189273,189679);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,189343,189460);

f_10314_189343_189459(node, MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,189273,189679);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,189273,189679);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,189542,189660);

return f_10314_189549_189659(this, node, leftOperand, rightOperand, Conversion.NoConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,189273,189679);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,188911,189694);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190150,190200);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190216,190825) || true) && ((object)optRightType != null &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 190220, 190276)&&f_10314_190252_190276(optRightType)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,190216,190825);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190310,190475);

var 
leftConversion = f_10314_190331_190474(f_10314_190331_190342(), leftOperand, f_10314_190389_190449(this, SpecialType.System_Object, diagnostics, node), ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190493,190553);

rightOperand = f_10314_190508_190552(this, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190571,190613);

f_10314_190571_190612(                diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,190631,190810);

return f_10314_190638_190809(node, leftOperand, rightOperand, leftConversion, BoundNullCoalescingOperatorResultKind.RightDynamicType, optRightType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,190216,190825);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191250,192070) || true) && (isLeftNullable)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,191250,192070);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191302,191429);

var 
rightConversion = f_10314_191324_191428(f_10314_191324_191335(), rightOperand, optLeftType0, ref useSiteDiagnostics)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191447,192055) || true) && (rightConversion.Exists)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,191447,192055);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191515,191632);

var 
leftConversion = f_10314_191536_191631(f_10314_191536_191547(), leftOperand, optLeftType0, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191654,191696);

f_10314_191654_191695(                    diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191718,191821);

var 
convertedRightOperand = f_10314_191746_191820(this, rightOperand, rightConversion, optLeftType0, diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,191843,192036);

return f_10314_191850_192035(node, leftOperand, convertedRightOperand, leftConversion, BoundNullCoalescingOperatorResultKind.LeftUnwrappedType, optLeftType0);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,191447,192055);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,191250,192070);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192410,193155) || true) && ((object)optLeftType != null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,192410,193155);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192475,192601);

var 
rightConversion = f_10314_192497_192600(f_10314_192497_192508(), rightOperand, optLeftType, ref useSiteDiagnostics)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192619,193140) || true) && (rightConversion.Exists)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,192619,193140);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192687,192789);

var 
convertedRightOperand = f_10314_192715_192788(this, rightOperand, rightConversion, optLeftType, diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192811,192852);

var 
leftConversion = Conversion.Identity
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192874,192916);

f_10314_192874_192915(                    diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,192938,193121);

return f_10314_192945_193120(node, leftOperand, convertedRightOperand, leftConversion, BoundNullCoalescingOperatorResultKind.LeftType, optLeftType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,192619,193140);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,192410,193155);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195031,197852) || true) && ((object)optRightType != null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,195031,197852);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195097,195157);

rightOperand = f_10314_195112_195156(this, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195175,195201);

Conversion 
leftConversion
=default(Conversion);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195219,195268);

BoundNullCoalescingOperatorResultKind 
resultKind
=default(BoundNullCoalescingOperatorResultKind);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195288,196448) || true) && (isLeftNullable)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,195288,196448);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,195931,196047);

leftConversion = f_10314_195948_196046(f_10314_195948_195959(), optLeftType0, optRightType, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196069,196143);

resultKind = BoundNullCoalescingOperatorResultKind.LeftUnwrappedRightType;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,195288,196448);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,195288,196448);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196225,196346);

leftConversion = f_10314_196242_196345(f_10314_196242_196253(), leftOperand, optRightType, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196368,196429);

resultKind = BoundNullCoalescingOperatorResultKind.RightType;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,195288,196448);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196468,197837) || true) && (leftConversion.Exists)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,196468,197837);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196535,197616) || true) && (f_10314_196539_196562_M(!leftConversion.IsValid))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,196535,197616);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196687,197341) || true) && (isLeftNullable)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,196687,197341);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196763,196863);

var 
conversion = Conversion.MakeNullableConversion(ConversionKind.ExplicitNullable,leftConversion)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,196893,196988);

var 
strippedLeftOperand = f_10314_196919_196987(this, leftOperand, conversion, optLeftType0, diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197018,197113);

leftOperand = f_10314_197032_197112(this, strippedLeftOperand, leftConversion, optRightType, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,196687,197341);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,196687,197341);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197227,197314);

leftOperand = f_10314_197241_197313(this, leftOperand, leftConversion, optRightType, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,196687,197341);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197369,197408);

f_10314_197369_197407(f_10314_197382_197406(leftOperand));
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,196535,197616);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,196535,197616);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197506,197593);

f_10314_197506_197592(this, diagnostics, leftConversion, node, hasBaseReceiver: false);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,196535,197616);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197640,197682);

f_10314_197640_197681(
                    diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197704,197818);

return f_10314_197711_197817(node, leftOperand, rightOperand, leftConversion, resultKind, optRightType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,196468,197837);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,195031,197852);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,197963,198005);

f_10314_197963_198004(
            // SPEC:    Otherwise, a and b are incompatible, and a compile-time error occurs.
            diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198019,198137);

return f_10314_198026_198136(this, node, leftOperand, rightOperand, Conversion.NoConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,185926,198148);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_186085_186094(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Left;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 186085, 186094);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_186075_186130(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186075, 186130);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_186159_186202(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindToNaturalType( expression, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186159, 186202);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_186246_186256(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 186246, 186256);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_186236_186292(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186236, 186292);
return return_v;
}


bool
f_10314_186397_186421(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 186397, 186421);
return return_v;
}


bool
f_10314_186425_186450(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 186425, 186450);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_186498_186537(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186498, 186537);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_186571_186611(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186571, 186611);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_186800_186817(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186800, 186817);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_186637_186835(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186637, 186835);
return return_v;
}


bool
f_10314_186964_186994(Microsoft.CodeAnalysis.CSharp.BoundExpression
node)
{
var return_v = node.IsLiteralDefault();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 186964, 186994);
return return_v;
}


int
f_10314_187028_187129(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 187028, 187129);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_187320_187337(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 187320, 187337);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_187157_187355(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 187157, 187355);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_187833_187849(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 187833, 187849);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_187899_187916(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 187899, 187916);
return return_v;
}


bool
f_10314_187991_188019(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsNullableType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 187991, 188019);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_188103_188142(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type)
{
var return_v = type.GetNullableUnderlyingType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 188103, 188142);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundKind
f_10314_188385_188401(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Kind ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 188385, 188401);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundKind
f_10314_188432_188448(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Kind ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 188432, 188448);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_188514_188624(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.GenerateNullCoalescingBadBinaryOpsError( node, leftOperand, rightOperand, leftConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 188514, 188624);
return return_v;
}


bool
f_10314_188946_188974_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 188946, 188974);
return return_v;
}


bool
f_10314_189277_189301_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 189277, 189301);
return return_v;
}


bool
f_10314_189343_189459(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.MessageID
feature,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckFeatureAvailability( (Microsoft.CodeAnalysis.SyntaxNode)syntax, feature, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 189343, 189459);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_189549_189659(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.GenerateNullCoalescingBadBinaryOpsError( node, leftOperand, rightOperand, leftConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 189549, 189659);
return return_v;
}


bool
f_10314_190252_190276(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsDynamic();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190252, 190276);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_190331_190342()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 190331, 190342);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_190389_190449(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.SpecialType
typeId,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node)
{
var return_v = this_param.GetSpecialType( typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190389, 190449);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_190331_190474(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyConversionFromExpression( sourceExpression, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190331, 190474);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_190508_190552(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindToNaturalType( expression, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190508, 190552);
return return_v;
}


bool
f_10314_190571_190612(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190571, 190612);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_190638_190809(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 190638, 190809);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_191324_191335()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 191324, 191335);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_191324_191428(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 191324, 191428);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_191536_191547()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 191536, 191547);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_191536_191631(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = this_param.ClassifyConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 191536, 191631);
return return_v;
}


bool
f_10314_191654_191695(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 191654, 191695);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_191746_191820(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 191746, 191820);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_191850_192035(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 191850, 192035);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_192497_192508()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 192497, 192508);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_192497_192600(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 192497, 192600);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_192715_192788(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 192715, 192788);
return return_v;
}


bool
f_10314_192874_192915(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 192874, 192915);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_192945_193120(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 192945, 193120);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_195112_195156(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindToNaturalType( expression, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 195112, 195156);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_195948_195959()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 195948, 195959);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_195948_196046(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
source,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromType( source, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 195948, 196046);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_196242_196253()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 196242, 196253);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_196242_196345(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 196242, 196345);
return return_v;
}


bool
f_10314_196539_196562_M(bool
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 196539, 196562);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_196919_196987(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 196919, 196987);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_197032_197112(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197032, 197112);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_197241_197313(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197241, 197313);
return return_v;
}


bool
f_10314_197382_197406(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 197382, 197406);
return return_v;
}


int
f_10314_197369_197407(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197369, 197407);
return 0;
}


int
f_10314_197506_197592(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.SyntaxNode
node,bool
hasBaseReceiver)
{
this_param.ReportDiagnosticsIfObsolete( diagnostics, conversion, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)node, hasBaseReceiver: hasBaseReceiver);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197506, 197592);
return 0;
}


bool
f_10314_197640_197681(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197640, 197681);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator
f_10314_197711_197817(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperatorResultKind
operatorResultKind,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, leftConversion, operatorResultKind, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197711, 197817);
return return_v;
}


bool
f_10314_197963_198004(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 197963, 198004);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_198026_198136(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Conversion
leftConversion,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.GenerateNullCoalescingBadBinaryOpsError( node, leftOperand, rightOperand, leftConversion, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198026, 198136);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,185926,198148);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,185926,198148);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression BindNullCoalescingAssignmentOperator(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,198160,202030);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198305,198403);

BoundExpression 
leftOperand = f_10314_198335_198402(this, f_10314_198345_198354(node), diagnostics, BindValueKind.CompoundAssignment)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198417,198469);

f_10314_198417_198468(this, leftOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198483,198571);

BoundExpression 
rightOperand = f_10314_198514_198570(this, f_10314_198524_198534(node), diagnostics, BindValueKind.RValue)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198671,199041) || true) && (f_10314_198675_198699(leftOperand)||(DynAbs.Tracing.TraceSender.Expression_False(10314, 198675, 198728)||f_10314_198703_198728(rightOperand)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,198671,199041);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198762,198816);

leftOperand = f_10314_198776_198815(this, leftOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198834,198890);

rightOperand = f_10314_198849_198889(this, rightOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,198908,199026);

return f_10314_198915_199025(node, leftOperand, rightOperand, f_10314_198990_199007(this), hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,198671,199041);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,199230,199269);

TypeSymbol 
leftType = f_10314_199252_199268(leftOperand)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,199283,199322);

f_10314_199283_199321((object)leftType != null);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,199417,199623) || true) && (f_10314_199421_199441(leftType)&&(DynAbs.Tracing.TraceSender.Expression_True(10314, 199421, 199471)&&!f_10314_199446_199471(leftType)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,199417,199623);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,199505,199608);

return f_10314_199512_199607(this, node, leftOperand, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,199417,199623);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,199639,199689);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200080,200854) || true) && (f_10314_200084_200109(leftType))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,200080,200854);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200143,200205);

var 
underlyingLeftType = f_10314_200168_200204(leftType)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200223,200366);

var 
underlyingRightConversion = f_10314_200255_200365(f_10314_200255_200266(), rightOperand, underlyingLeftType, ref useSiteDiagnostics)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200384,200839) || true) && (underlyingRightConversion.Exists &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 200388, 200462)&&f_10314_200442_200454(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10314_200424_200441(rightOperand), 10314, 200424, 200454))!= true))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,200384,200839);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200504,200546);

f_10314_200504_200545(                    diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200568,200687);

var 
convertedRightOperand = f_10314_200596_200686(this, rightOperand, underlyingRightConversion, underlyingLeftType, diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,200709,200820);

return f_10314_200716_200819(node, leftOperand, convertedRightOperand, underlyingLeftType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,200384,200839);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,200080,200854);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201301,201327);

useSiteDiagnostics = null;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201341,201464);

var 
rightConversion = f_10314_201363_201463(f_10314_201363_201374(), rightOperand, leftType, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201478,201520);

f_10314_201478_201519(            diagnostics, node, useSiteDiagnostics);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201534,201827) || true) && (rightConversion.Exists)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,201534,201827);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201594,201693);

var 
convertedRightOperand = f_10314_201622_201692(this, rightOperand, rightConversion, leftType, diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201711,201812);

return f_10314_201718_201811(node, leftOperand, convertedRightOperand, leftType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,201534,201827);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,201916,202019);

return f_10314_201923_202018(this, node, leftOperand, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,198160,202030);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_198345_198354(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
this_param)
{
var return_v = this_param.Left;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 198345, 198354);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_198335_198402(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198335, 198402);
return return_v;
}


int
f_10314_198417_198468(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
this_param.ReportSuppressionIfNeeded( expr, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198417, 198468);
return 0;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_198524_198534(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
this_param)
{
var return_v = this_param.Right;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 198524, 198534);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_198514_198570(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198514, 198570);
return return_v;
}


bool
f_10314_198675_198699(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 198675, 198699);
return return_v;
}


bool
f_10314_198703_198728(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasAnyErrors;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 198703, 198728);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_198776_198815(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198776, 198815);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_198849_198889(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198849, 198889);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_198990_199007(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198990, 199007);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator
f_10314_198915_199025(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 198915, 199025);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_199252_199268(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 199252, 199268);
return return_v;
}


int
f_10314_199283_199321(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 199283, 199321);
return 0;
}


bool
f_10314_199421_199441(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
this_param)
{
var return_v = this_param.IsValueType ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 199421, 199441);
return return_v;
}


bool
f_10314_199446_199471(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsNullableType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 199446, 199471);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_199512_199607(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.GenerateNullCoalescingAssignmentBadBinaryOpsError( node, leftOperand, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 199512, 199607);
return return_v;
}


bool
f_10314_200084_200109(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsNullableType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200084, 200109);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_200168_200204(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.GetNullableUnderlyingType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200168, 200204);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_200255_200266()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 200255, 200266);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_200255_200365(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200255, 200365);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_200424_200441(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 200424, 200441);
return return_v;
}


bool?
f_10314_200442_200454(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type?.IsDynamic();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200442, 200454);
return return_v;
}


bool
f_10314_200504_200545(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200504, 200545);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_200596_200686(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200596, 200686);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator
f_10314_200716_200819(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 200716, 200819);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_201363_201374()
{
var return_v = Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 201363, 201374);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversion
f_10314_201363_201463(Microsoft.CodeAnalysis.CSharp.Conversions
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
sourceExpression,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = this_param.ClassifyImplicitConversionFromExpression( sourceExpression, destination, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 201363, 201463);
return return_v;
}


bool
f_10314_201478_201519(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 201478, 201519);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_201622_201692(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
source,Microsoft.CodeAnalysis.CSharp.Conversion
conversion,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
destination,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.CreateConversion( source, conversion, destination, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 201622, 201692);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator
f_10314_201718_201811(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, type);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 201718, 201811);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_201923_202018(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.GenerateNullCoalescingAssignmentBadBinaryOpsError( node, leftOperand, rightOperand, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 201923, 202018);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,198160,202030);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,198160,202030);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression GenerateNullCoalescingAssignmentBadBinaryOpsError(AssignmentExpressionSyntax node, BoundExpression leftOperand, BoundExpression rightOperand, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,202042,202684);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,202259,202403);

f_10314_202259_202402(diagnostics, ErrorCode.ERR_BadBinaryOps, node, f_10314_202312_202358(node.OperatorToken.Kind()), f_10314_202360_202379(leftOperand), f_10314_202381_202401(rightOperand));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,202417,202471);

leftOperand = f_10314_202431_202470(this, leftOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,202485,202541);

rightOperand = f_10314_202500_202540(this, rightOperand);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,202555,202673);

return f_10314_202562_202672(node, leftOperand, rightOperand, f_10314_202637_202654(this), hasErrors: true);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,202042,202684);

string
f_10314_202312_202358(Microsoft.CodeAnalysis.CSharp.SyntaxKind
kind)
{
var return_v = SyntaxFacts.GetText( kind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202312, 202358);
return return_v;
}


object
f_10314_202360_202379(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Display;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 202360, 202379);
return return_v;
}


object
f_10314_202381_202401(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Display;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 202381, 202401);
return return_v;
}


int
f_10314_202259_202402(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
syntax,params object[]
args)
{
Error( diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202259, 202402);
return 0;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_202431_202470(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202431, 202470);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_202500_202540(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression)
{
var return_v = this_param.BindToTypeForErrorRecovery( expression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202500, 202540);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_202637_202654(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202637, 202654);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator
f_10314_202562_202672(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
leftOperand,Microsoft.CodeAnalysis.CSharp.BoundExpression
rightOperand,Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNullCoalescingAssignmentOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, leftOperand, rightOperand, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 202562, 202672);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,202042,202684);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,202042,202684);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression BindConditionalOperator(ConditionalExpressionSyntax node, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,204733,205975);
Microsoft.CodeAnalysis.RefKind whenTrueRefKind = default(Microsoft.CodeAnalysis.RefKind);
Microsoft.CodeAnalysis.RefKind whenFalseRefKind = default(Microsoft.CodeAnalysis.RefKind);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,204866,204961);

var 
whenTrue = f_10314_204881_204960(f_10314_204881_204894(node), diagnostics, out whenTrueRefKind)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,204975,205073);

var 
whenFalse = f_10314_204991_205072(f_10314_204991_205005(node), diagnostics, out whenFalseRefKind)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205089,205167);

var 
isRef = whenTrueRefKind == RefKind.Ref &&(DynAbs.Tracing.TraceSender.Expression_True(10314, 205101, 205166)&&whenFalseRefKind == RefKind.Ref)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205181,205795) || true) && (!isRef)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,205181,205795);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205225,205420) || true) && (whenFalseRefKind == RefKind.Ref)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,205225,205420);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205302,205401);

f_10314_205302_205400(                    diagnostics, ErrorCode.ERR_RefConditionalNeedsTwoRefs, f_10314_205360_205385(whenFalse).GetLocation());
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,205225,205420);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205440,205633) || true) && (whenTrueRefKind == RefKind.Ref)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,205440,205633);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205516,205614);

f_10314_205516_205613(                    diagnostics, ErrorCode.ERR_RefConditionalNeedsTwoRefs, f_10314_205574_205598(whenTrue).GetLocation());
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,205440,205633);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,205181,205795);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,205181,205795);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205699,205780);

f_10314_205699_205779(node, MessageID.IDS_FeatureRefConditional, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,205181,205795);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,205811,205964);

return (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 205818, 205823)||((isRef &&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 205826, 205892))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 205895, 205963)))?f_10314_205826_205892(this, node, whenTrue, whenFalse, diagnostics):f_10314_205895_205963(this, node, whenTrue, whenFalse, diagnostics);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,204733,205975);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_204881_204894(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
this_param)
{
var return_v = this_param.WhenTrue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 204881, 204894);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
f_10314_204881_204960(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,out Microsoft.CodeAnalysis.RefKind
refKind)
{
var return_v = syntax.CheckAndUnwrapRefExpression( diagnostics, out refKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 204881, 204960);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_204991_205005(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
this_param)
{
var return_v = this_param.WhenFalse;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 204991, 205005);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
f_10314_204991_205072(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
syntax,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,out Microsoft.CodeAnalysis.RefKind
refKind)
{
var return_v = syntax.CheckAndUnwrapRefExpression( diagnostics, out refKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 204991, 205072);
return return_v;
}


Microsoft.CodeAnalysis.SyntaxToken
f_10314_205360_205385(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
this_param)
{
var return_v = this_param.GetFirstToken();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205360, 205385);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_205302_205400(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location)
{
var return_v = diagnostics.Add( code, location);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205302, 205400);
return return_v;
}


Microsoft.CodeAnalysis.SyntaxToken
f_10314_205574_205598(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
this_param)
{
var return_v = this_param.GetFirstToken();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205574, 205598);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_205516_205613(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location)
{
var return_v = diagnostics.Add( code, location);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205516, 205613);
return return_v;
}


bool
f_10314_205699_205779(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.MessageID
feature,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckFeatureAvailability( (Microsoft.CodeAnalysis.SyntaxNode)syntax, feature, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205699, 205779);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_205826_205892(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
whenTrue,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
whenFalse,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindRefConditionalOperator( node, whenTrue, whenFalse, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205826, 205892);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_205895_205963(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
node,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
whenTrue,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
whenFalse,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindValueConditionalOperator( node, whenTrue, whenFalse, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 205895, 205963);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,204733,205975);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,204733,205975);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression BindValueConditionalOperator(ConditionalExpressionSyntax node, ExpressionSyntax whenTrue, ExpressionSyntax whenFalse, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,205987,207339);
bool hadMultipleCandidates = default(bool);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206180,206212);

ErrorCode 
noCommonTypeError = 0
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206228,206307);

BoundExpression 
condition = f_10314_206256_206306(this, f_10314_206278_206292(node), diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206321,206403);

BoundExpression 
trueExpr = f_10314_206348_206402(this, whenTrue, diagnostics, BindValueKind.RValue)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206417,206501);

BoundExpression 
falseExpr = f_10314_206445_206500(this, whenFalse, diagnostics, BindValueKind.RValue)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206515,206565);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206579,206745);

TypeSymbol 
type = f_10314_206597_206744(trueExpr, falseExpr, f_10314_206671_206687(this), out hadMultipleCandidates, ref useSiteDiagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206759,206801);

f_10314_206759_206800(            diagnostics, node, useSiteDiagnostics);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206815,206942) || true) && (type is null)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,206815,206942);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206850,206942);

noCommonTypeError = (DynAbs.Tracing.TraceSender.Conditional_F1(10314, 206870, 206891)||((hadMultipleCandidates &&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 206894, 206915))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 206918, 206941)))?ErrorCode.ERR_AmbigQM :ErrorCode.ERR_InvalidQM;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,206815,206942);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,206958,207034);

var 
constantValue = f_10314_206978_207033(condition, trueExpr, falseExpr)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207071,207178);

bool 
hasErrors = ((DynAbs.Tracing.TraceSender.Conditional_F1(10314, 207089, 207107)||((!f_10314_207090_207107(type, null)&&DynAbs.Tracing.TraceSender.Conditional_F2(10314, 207110, 207128))||DynAbs.Tracing.TraceSender.Conditional_F3(10314, 207131, 207136)))?f_10314_207110_207128(type):false) == true ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 207088, 207177)||f_10314_207149_207169_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(constantValue, 10314, 207149, 207169)?.IsBad)== true)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207192,207328);

return f_10314_207199_207327(node, condition, trueExpr, falseExpr, constantValue, noCommonTypeError, type, hasErrors);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,205987,207339);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_206278_206292(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
this_param)
{
var return_v = this_param.Condition;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 206278, 206292);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_206256_206306(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindBooleanExpression( node, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206256, 206306);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_206348_206402(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206348, 206402);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_206445_206500(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206445, 206500);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_206671_206687(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 206671, 206687);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_206597_206744(Microsoft.CodeAnalysis.CSharp.BoundExpression
expr1,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr2,Microsoft.CodeAnalysis.CSharp.Conversions
conversions,out bool
hadMultipleCandidates,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = BestTypeInferrer.InferBestTypeForConditionalOperator( expr1, expr2, (Microsoft.CodeAnalysis.CSharp.ConversionsBase)conversions, out hadMultipleCandidates, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206597, 206744);
return return_v;
}


bool
f_10314_206759_206800(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206759, 206800);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_206978_207033(Microsoft.CodeAnalysis.CSharp.BoundExpression
condition,Microsoft.CodeAnalysis.CSharp.BoundExpression
trueExpr,Microsoft.CodeAnalysis.CSharp.BoundExpression
falseExpr)
{
var return_v = FoldConditionalOperator( condition, trueExpr, falseExpr);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 206978, 207033);
return return_v;
}


bool
f_10314_207090_207107(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
this_param,object
obj)
{
var return_v = this_param.Equals( obj);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207090, 207107);
return return_v;
}


bool
f_10314_207110_207128(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type)
{
var return_v = type.IsErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207110, 207128);
return return_v;
}


bool?
f_10314_207149_207169_M(bool?
i)
{
var return_v = i;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 207149, 207169);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundUnconvertedConditionalOperator
f_10314_207199_207327(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
syntax,Microsoft.CodeAnalysis.CSharp.BoundExpression
condition,Microsoft.CodeAnalysis.CSharp.BoundExpression
consequence,Microsoft.CodeAnalysis.CSharp.BoundExpression
alternative,Microsoft.CodeAnalysis.ConstantValue?
constantValueOpt,Microsoft.CodeAnalysis.CSharp.ErrorCode
noCommonTypeError,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundUnconvertedConditionalOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, condition, consequence, alternative, constantValueOpt, noCommonTypeError, type, hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207199, 207327);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,205987,207339);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,205987,207339);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private BoundExpression BindRefConditionalOperator(ConditionalExpressionSyntax node, ExpressionSyntax whenTrue, ExpressionSyntax whenFalse, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterMethod(10314,207351,210444);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207542,207621);

BoundExpression 
condition = f_10314_207570_207620(this, f_10314_207592_207606(node), diagnostics)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207635,207750);

BoundExpression 
trueExpr = f_10314_207662_207749(this, whenTrue, diagnostics, BindValueKind.RValue | BindValueKind.RefersToLocation)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207764,207881);

BoundExpression 
falseExpr = f_10314_207792_207880(this, whenFalse, diagnostics, BindValueKind.RValue | BindValueKind.RefersToLocation)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207895,207953);

bool 
hasErrors = f_10314_207912_207930(trueExpr)| f_10314_207933_207952(falseExpr)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,207967,208003);

TypeSymbol 
trueType = f_10314_207989_208002(trueExpr)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208017,208055);

TypeSymbol 
falseType = f_10314_208040_208054(falseExpr)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208071,208087);

TypeSymbol 
type
=default(TypeSymbol);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208101,208981) || true) && (!f_10314_208106_208160(trueType, falseType))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,208101,208981);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208194,208328) || true) && (!hasErrors)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,208194,208328);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208231,208328);

f_10314_208231_208327(                    diagnostics, ErrorCode.ERR_RefConditionalDifferentTypes, f_10314_208291_208316(falseExpr.Syntax), trueType);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,208194,208328);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208348,208373);

type = f_10314_208355_208372(this);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208391,208408);

hasErrors = true;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,208101,208981);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,208101,208981);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208474,208524);

HashSet<DiagnosticInfo> 
useSiteDiagnostics = null
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208542,208695);

type = f_10314_208549_208694(trueExpr, falseExpr, f_10314_208623_208639(this), hadMultipleCandidates: out _, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208713,208755);

f_10314_208713_208754(                diagnostics, node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208775,208801);

f_10314_208775_208800(type is { });
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208819,208883);

f_10314_208819_208882(f_10314_208832_208881(trueType, type));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208901,208966);

f_10314_208901_208965(f_10314_208914_208964(falseType, type));
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,208101,208981);
}

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,208997,210072) || true) && (!hasErrors)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,208997,210072);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209045,209085);

var 
currentScope = f_10314_209064_209084(this)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209165,209224);

uint 
whenTrueEscape = f_10314_209187_209223(trueExpr, currentScope)
;
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209242,209303);

uint 
whenFalseEscape = f_10314_209265_209302(falseExpr, currentScope)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209323,210057) || true) && (whenTrueEscape != whenFalseEscape)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,209323,210057);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209536,209900) || true) && (whenTrueEscape < whenFalseEscape)
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,209536,209900);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209599,209724);

f_10314_209599_209723(falseExpr.Syntax, falseExpr, currentScope, whenTrueEscape, checkingReceiver: false, diagnostics: diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,209536,209900);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,209536,209900);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209776,209900);

f_10314_209776_209899(trueExpr.Syntax, trueExpr, currentScope, whenFalseEscape, checkingReceiver: false, diagnostics: diagnostics);
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,209536,209900);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,209924,209999);

f_10314_209924_209998(
                    diagnostics, ErrorCode.ERR_MismatchedRefEscapeInTernary, f_10314_209984_209997(node));
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210021,210038);

hasErrors = true;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,209323,210057);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,208997,210072);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210088,210167);

trueExpr = f_10314_210099_210166(this, trueExpr, diagnostics, reportNoTargetType: false);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210181,210262);

falseExpr = f_10314_210193_210261(this, falseExpr, diagnostics, reportNoTargetType: false);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210276,210433);

return f_10314_210283_210432(node, isRef: true, condition, trueExpr, falseExpr, constantValueOpt: null, type, wasTargetTyped: false, type, hasErrors);
DynAbs.Tracing.TraceSender.TraceExitMethod(10314,207351,210444);

Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
f_10314_207592_207606(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
this_param)
{
var return_v = this_param.Condition;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 207592, 207606);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_207570_207620(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = this_param.BindBooleanExpression( node, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207570, 207620);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_207662_207749(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207662, 207749);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_207792_207880(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
node,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
valueKind)
{
var return_v = this_param.BindValue( node, diagnostics, valueKind);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 207792, 207880);
return return_v;
}


bool
f_10314_207912_207930(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasErrors ;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 207912, 207930);
return return_v;
}


bool
f_10314_207933_207952(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.HasErrors;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 207933, 207952);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_207989_208002(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 207989, 208002);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
f_10314_208040_208054(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.Type;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 208040, 208054);
return return_v;
}


bool
f_10314_208106_208160(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type1,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type2)
{
var return_v = Conversions.HasIdentityConversion( type1, type2);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208106, 208160);
return return_v;
}


Microsoft.CodeAnalysis.Location
f_10314_208291_208316(Microsoft.CodeAnalysis.SyntaxNode
this_param)
{
var return_v = this_param.Location;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 208291, 208316);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_208231_208327(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location,params object[]
args)
{
var return_v = diagnostics.Add( code, location, args);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208231, 208327);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
f_10314_208355_208372(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.CreateErrorType();
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208355, 208372);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Conversions
f_10314_208623_208639(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.Conversions;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 208623, 208639);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
f_10314_208549_208694(Microsoft.CodeAnalysis.CSharp.BoundExpression
expr1,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr2,Microsoft.CodeAnalysis.CSharp.Conversions
conversions,out bool
hadMultipleCandidates,ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
useSiteDiagnostics)
{
var return_v = BestTypeInferrer.InferBestTypeForConditionalOperator( expr1, expr2, (Microsoft.CodeAnalysis.CSharp.ConversionsBase)conversions, out hadMultipleCandidates, ref useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208549, 208694);
return return_v;
}


bool
f_10314_208713_208754(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
node,System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
useSiteDiagnostics)
{
var return_v = diagnostics.Add( (Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208713, 208754);
return return_v;
}


int
f_10314_208775_208800(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208775, 208800);
return 0;
}


bool
f_10314_208832_208881(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type1,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type2)
{
var return_v = Conversions.HasIdentityConversion( type1, type2);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208832, 208881);
return return_v;
}


int
f_10314_208819_208882(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208819, 208882);
return 0;
}


bool
f_10314_208914_208964(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
type1,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type2)
{
var return_v = Conversions.HasIdentityConversion( type1, type2);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208914, 208964);
return return_v;
}


int
f_10314_208901_208965(bool
condition)
{
Debug.Assert( condition);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 208901, 208965);
return 0;
}


uint
f_10314_209064_209084(Microsoft.CodeAnalysis.CSharp.Binder
this_param)
{
var return_v = this_param.LocalScopeDepth;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 209064, 209084);
return return_v;
}


uint
f_10314_209187_209223(Microsoft.CodeAnalysis.CSharp.BoundExpression
expr,uint
scopeOfTheContainingExpression)
{
var return_v = GetValEscape( expr, scopeOfTheContainingExpression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 209187, 209223);
return return_v;
}


uint
f_10314_209265_209302(Microsoft.CodeAnalysis.CSharp.BoundExpression
expr,uint
scopeOfTheContainingExpression)
{
var return_v = GetValEscape( expr, scopeOfTheContainingExpression);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 209265, 209302);
return return_v;
}


bool
f_10314_209599_209723(Microsoft.CodeAnalysis.SyntaxNode
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr,uint
escapeFrom,uint
escapeTo,bool
checkingReceiver,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckValEscape( node, expr, escapeFrom, escapeTo, checkingReceiver: checkingReceiver, diagnostics: diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 209599, 209723);
return return_v;
}


bool
f_10314_209776_209899(Microsoft.CodeAnalysis.SyntaxNode
node,Microsoft.CodeAnalysis.CSharp.BoundExpression
expr,uint
escapeFrom,uint
escapeTo,bool
checkingReceiver,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckValEscape( node, expr, escapeFrom, escapeTo, checkingReceiver: checkingReceiver, diagnostics: diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 209776, 209899);
return return_v;
}


Microsoft.CodeAnalysis.Location
f_10314_209984_209997(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
this_param)
{
var return_v = this_param.Location;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 209984, 209997);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
f_10314_209924_209998(Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,Microsoft.CodeAnalysis.CSharp.ErrorCode
code,Microsoft.CodeAnalysis.Location
location)
{
var return_v = diagnostics.Add( code, location);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 209924, 209998);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_210099_210166(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,bool
reportNoTargetType)
{
var return_v = this_param.BindToNaturalType( expression, diagnostics, reportNoTargetType: reportNoTargetType);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 210099, 210166);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundExpression
f_10314_210193_210261(Microsoft.CodeAnalysis.CSharp.Binder
this_param,Microsoft.CodeAnalysis.CSharp.BoundExpression
expression,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics,bool
reportNoTargetType)
{
var return_v = this_param.BindToNaturalType( expression, diagnostics, reportNoTargetType: reportNoTargetType);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 210193, 210261);
return return_v;
}


Microsoft.CodeAnalysis.CSharp.BoundConditionalOperator
f_10314_210283_210432(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax
syntax,bool
isRef,Microsoft.CodeAnalysis.CSharp.BoundExpression
condition,Microsoft.CodeAnalysis.CSharp.BoundExpression
consequence,Microsoft.CodeAnalysis.CSharp.BoundExpression
alternative,Microsoft.CodeAnalysis.ConstantValue?
constantValueOpt,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
naturalTypeOpt,bool
wasTargetTyped,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
type,bool
hasErrors)
{
var return_v = new Microsoft.CodeAnalysis.CSharp.BoundConditionalOperator( (Microsoft.CodeAnalysis.SyntaxNode)syntax, isRef: isRef, condition, consequence, alternative, constantValueOpt: constantValueOpt, naturalTypeOpt, wasTargetTyped: wasTargetTyped, type, hasErrors);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 210283, 210432);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,207351,210444);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,207351,210444);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private static ConstantValue FoldConditionalOperator(BoundExpression condition, BoundExpression trueExpr, BoundExpression falseExpr)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,210574,211650);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210731,210780);

ConstantValue 
trueValue = f_10314_210757_210779(trueExpr)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210794,210900) || true) && (trueValue == null ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 210798, 210834)||f_10314_210819_210834(trueValue)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,210794,210900);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210868,210885);

return trueValue;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,210794,210900);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210916,210967);

ConstantValue 
falseValue = f_10314_210943_210966(falseExpr)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,210981,211090) || true) && (falseValue == null ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 210985, 211023)||f_10314_211007_211023(falseValue)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,210981,211090);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211057,211075);

return falseValue;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,210981,211090);
}
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211106,211161);

ConstantValue 
conditionValue = f_10314_211137_211160(condition)
;

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211175,211639) || true) && (conditionValue == null ||(DynAbs.Tracing.TraceSender.Expression_False(10314, 211179, 211225)||f_10314_211205_211225(conditionValue)))
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211175,211639);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211259,211281);

return conditionValue;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211175,211639);
}

else 
{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211175,211639);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211315,211639) || true) && (conditionValue == f_10314_211337_211355())
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211315,211639);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211389,211406);

return trueValue;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211315,211639);
}

else 
{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211315,211639);

if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211440,211639) || true) && (conditionValue == f_10314_211462_211481())
)

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211440,211639);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211515,211533);

return falseValue;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211440,211639);
}

else

{DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211440,211639);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211599,211624);

return f_10314_211606_211623();
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211440,211639);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211315,211639);
}
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211175,211639);
}
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,210574,211650);

Microsoft.CodeAnalysis.ConstantValue?
f_10314_210757_210779(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 210757, 210779);
return return_v;
}


bool
f_10314_210819_210834(Microsoft.CodeAnalysis.ConstantValue
this_param)
{
var return_v = this_param.IsBad;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 210819, 210834);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue?
f_10314_210943_210966(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 210943, 210966);
return return_v;
}


bool
f_10314_211007_211023(Microsoft.CodeAnalysis.ConstantValue
this_param)
{
var return_v = this_param.IsBad;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211007, 211023);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue?
f_10314_211137_211160(Microsoft.CodeAnalysis.CSharp.BoundExpression
this_param)
{
var return_v = this_param.ConstantValue;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211137, 211160);
return return_v;
}


bool
f_10314_211205_211225(Microsoft.CodeAnalysis.ConstantValue
this_param)
{
var return_v = this_param.IsBad;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211205, 211225);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_211337_211355()
{
var return_v = ConstantValue.True;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211337, 211355);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_211462_211481()
{
var return_v = ConstantValue.False;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211462, 211481);
return return_v;
}


Microsoft.CodeAnalysis.ConstantValue
f_10314_211606_211623()
{
var return_v = ConstantValue.Bad;
DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10314, 211606, 211623);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,210574,211650);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,210574,211650);
}
			throw new System.Exception("Slicer error: unreachable code");
		}

private static void CheckNativeIntegerFeatureAvailability(BinaryOperatorKind operatorKind, SyntaxNode syntax, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,211662,212138);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,211823,212127);

switch (operatorKind & BinaryOperatorKind.TypeMask)
            {

case BinaryOperatorKind.NInt:
                case BinaryOperatorKind.NUInt:
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,211823,212127);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,212006,212084);

f_10314_212006_212083(syntax, MessageID.IDS_FeatureNativeInt, diagnostics);
DynAbs.Tracing.TraceSender.TraceBreak(10314,212106,212112);

break;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,211823,212127);
            }
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,211662,212138);

bool
f_10314_212006_212083(Microsoft.CodeAnalysis.SyntaxNode
syntax,Microsoft.CodeAnalysis.CSharp.MessageID
feature,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckFeatureAvailability( syntax, feature, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 212006, 212083);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,211662,212138);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,211662,212138);
}
		}

private static void CheckNativeIntegerFeatureAvailability(UnaryOperatorKind operatorKind, SyntaxNode syntax, DiagnosticBag diagnostics)
		{
			try
        {
DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10314,212150,212622);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,212310,212611);

switch (operatorKind & UnaryOperatorKind.TypeMask)
            {

case UnaryOperatorKind.NInt:
                case UnaryOperatorKind.NUInt:
DynAbs.Tracing.TraceSender.TraceEnterCondition(10314,212310,212611);
DynAbs.Tracing.TraceSender.TraceSimpleStatement(10314,212490,212568);

f_10314_212490_212567(syntax, MessageID.IDS_FeatureNativeInt, diagnostics);
DynAbs.Tracing.TraceSender.TraceBreak(10314,212590,212596);

break;
DynAbs.Tracing.TraceSender.TraceExitCondition(10314,212310,212611);
            }
DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10314,212150,212622);

bool
f_10314_212490_212567(Microsoft.CodeAnalysis.SyntaxNode
syntax,Microsoft.CodeAnalysis.CSharp.MessageID
feature,Microsoft.CodeAnalysis.DiagnosticBag
diagnostics)
{
var return_v = CheckFeatureAvailability( syntax, feature, diagnostics);
DynAbs.Tracing.TraceSender.TraceEndInvocation(10314, 212490, 212567);
return return_v;
}

        }
catch
{
DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10314,212150,212622);
throw;
}
finally
{
DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10314,212150,212622);
}
		}
}
}
