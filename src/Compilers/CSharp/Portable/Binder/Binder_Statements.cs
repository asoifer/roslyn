// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

#nullable disable

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using Microsoft.CodeAnalysis.CSharp.Symbols;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.PooledObjects;
using Roslyn.Utilities;

namespace Microsoft.CodeAnalysis.CSharp
{
    internal partial class Binder
    {
        internal virtual ImmutableHashSet<Symbol> LockedOrDisposedVariables
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 1191, 1237);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1197, 1235);

                    return f_10318_1204_1234(f_10318_1204_1208());
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 1191, 1237);

                    Microsoft.CodeAnalysis.CSharp.Binder?
                    f_10318_1204_1208()
                    {
                        var return_v = Next;
                        DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 1204, 1208);
                        return return_v;
                    }


                    System.Collections.Immutable.ImmutableHashSet<Microsoft.CodeAnalysis.CSharp.Symbol>
                    f_10318_1204_1234(Microsoft.CodeAnalysis.CSharp.Binder?
                    this_param)
                    {
                        var return_v = this_param.LockedOrDisposedVariables;
                        DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 1204, 1234);
                        return return_v;
                    }

                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 1099, 1248);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 1099, 1248);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        public virtual BoundStatement BindStatement(StatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 1404, 8219);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1521, 2299) || true) && (node.AttributeLists.Count > 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 1521, 2299);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1588, 1631);

                    var
                    attributeList = f_10318_1608_1627(node)[0]
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1730, 2284) || true) && (f_10318_1734_1745(node) == SyntaxKind.LocalFunctionStatement)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 1730, 2284);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1824, 1923);

                        f_10318_1824_1922(attributeList, MessageID.IDS_FeatureLocalFunctionAttributes, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 1730, 2284);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 1730, 2284);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 1965, 2284) || true) && (f_10318_1969_1980(node) != SyntaxKind.Block)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 1965, 2284);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2195, 2265);

                            f_10318_2195_2264(diagnostics, ErrorCode.ERR_AttributesNotAllowed, attributeList);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 1965, 2284);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 1730, 2284);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 1521, 2299);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2315, 2342);

                f_10318_2315_2341(node != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2356, 2378);

                BoundStatement
                result
                = default(BoundStatement);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2392, 7253);

                switch (f_10318_2400_2411(node))
                {

                    case SyntaxKind.Block:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2489, 2540);

                        result = f_10318_2498_2539(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 2562, 2568);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.LocalDeclarationStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2650, 2741);

                        result = f_10318_2659_2740(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 2763, 2769);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.LocalFunctionStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 2848, 2933);

                        result = f_10318_2857_2932(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 2955, 2961);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ExpressionStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3037, 3116);

                        result = f_10318_3046_3115(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3138, 3144);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.IfStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3212, 3275);

                        result = f_10318_3221_3274(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3297, 3303);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.SwitchStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3375, 3446);

                        result = f_10318_3384_3445(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3468, 3474);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.DoStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3542, 3596);

                        result = f_10318_3551_3595(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3618, 3624);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.WhileStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3695, 3755);

                        result = f_10318_3704_3754(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3777, 3783);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ForStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 3852, 3908);

                        result = f_10318_3861_3907(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 3930, 3936);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ForEachStatement:
                    case SyntaxKind.ForEachVariableStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4068, 4138);

                        result = f_10318_4077_4137(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4160, 4166);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.BreakStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4237, 4297);

                        result = f_10318_4246_4296(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4319, 4325);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ContinueStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4399, 4465);

                        result = f_10318_4408_4464(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4487, 4493);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ReturnStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4565, 4627);

                        result = f_10318_4574_4626(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4649, 4655);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.FixedStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4726, 4795);

                        result = f_10318_4735_4794(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4817, 4823);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.LabeledStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 4896, 4960);

                        result = f_10318_4905_4959(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 4982, 4988);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.GotoStatement:
                    case SyntaxKind.GotoCaseStatement:
                    case SyntaxKind.GotoDefaultStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 5165, 5223);

                        result = f_10318_5174_5222(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 5245, 5251);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.TryStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 5320, 5385);

                        result = f_10318_5329_5384(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 5407, 5413);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.EmptyStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 5484, 5531);

                        result = f_10318_5493_5530(node);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 5553, 5559);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.ThrowStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 5630, 5690);

                        result = f_10318_5639_5689(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 5712, 5718);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.UnsafeStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 5790, 5861);

                        result = f_10318_5799_5860(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 5883, 5889);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.UncheckedStatement:
                    case SyntaxKind.CheckedStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 6015, 6088);

                        result = f_10318_6024_6087(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 6110, 6116);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.UsingStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 6187, 6256);

                        result = f_10318_6196_6255(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 6278, 6284);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.YieldBreakStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 6360, 6434);

                        result = f_10318_6369_6433(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 6456, 6462);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.YieldReturnStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 6539, 6614);

                        result = f_10318_6548_6613(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 6636, 6642);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    case SyntaxKind.LockStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 6712, 6779);

                        result = f_10318_6721_6778(this, node, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 6801, 6807);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 2392, 7253);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 7123, 7210);

                        result = f_10318_7132_7209(node, ImmutableArray<BoundNode>.Empty, hasErrors: true);
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 7232, 7238);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 2392, 7253);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 7269, 7286);

                BoundBlock
                block
                = default(BoundBlock);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 7300, 7620);

                f_10318_7300_7619(f_10318_7313_7340(result) == false || (DynAbs.Tracing.TraceSender.Expression_False(10318, 7313, 7579) || (f_10318_7380_7391(result) == BoundKind.Block && (DynAbs.Tracing.TraceSender.Expression_True(10318, 7380, 7492) && (block = (BoundBlock)result).Statements.Length == 1) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 7380, 7578) && f_10318_7523_7569(block.Statements.Single()) == false))), "Synthetic node would not get cached");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 7636, 7747);

                f_10318_7636_7746(result.Syntax is StatementSyntax, "BoundStatement should be associated with a statement syntax.");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 7763, 8178);

                f_10318_7763_8177(f_10318_7776_7847(f_10318_7808_7840(result.Syntax), node), @"Bound statement (or one of its parents)
                                                                            should have same syntax as the given syntax node.
                                                                            Otherwise it may be confusing to the binder cache that uses syntax node as keys.");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8194, 8208);

                return result;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 1404, 8219);

                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
                f_10318_1608_1627(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                this_param)
                {
                    var return_v = this_param.AttributeLists;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 1608, 1627);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_1734_1745(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 1734, 1745);
                    return return_v;
                }


                bool
                f_10318_1824_1922(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.MessageID
                feature, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = CheckFeatureAvailability((Microsoft.CodeAnalysis.SyntaxNode)syntax, feature, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 1824, 1922);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_1969_1980(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 1969, 1980);
                    return return_v;
                }


                int
                f_10318_2195_2264(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2195, 2264);
                    return 0;
                }


                int
                f_10318_2315_2341(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2315, 2341);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_2400_2411(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2400, 2411);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_2498_2539(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBlock((Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2498, 2539);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_2659_2740(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLocalDeclarationStatement((Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2659, 2740);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_2857_2932(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLocalFunctionStatement((Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 2857, 2932);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_3046_3115(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionStatement((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3046, 3115);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_3221_3274(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindIfStatement((Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3221, 3274);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_3384_3445(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindSwitchStatement((Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3384, 3445);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_3551_3595(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDo((Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3551, 3595);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_3704_3754(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindWhile((Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3704, 3754);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundForStatement
                f_10318_3861_3907(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindFor((Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 3861, 3907);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_4077_4137(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindForEach((Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4077, 4137);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_4246_4296(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBreak((Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4246, 4296);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_4408_4464(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindContinue((Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4408, 4464);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_4574_4626(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindReturn((Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4574, 4626);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_4735_4794(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindFixedStatement((Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4735, 4794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLabeledStatement
                f_10318_4905_4959(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLabeled((Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 4905, 4959);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_5174_5222(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindGoto((Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 5174, 5222);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundTryStatement
                f_10318_5329_5384(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindTryStatement((Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 5329, 5384);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_5493_5530(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node)
                {
                    var return_v = BindEmpty((Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 5493, 5530);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_5639_5689(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindThrow((Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 5639, 5689);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_5799_5860(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindUnsafeStatement((Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 5799, 5860);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_6024_6087(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindCheckedStatement((Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 6024, 6087);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_6196_6255(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindUsingStatement((Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 6196, 6255);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_6369_6433(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindYieldBreakStatement((Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 6369, 6433);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_6548_6613(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindYieldReturnStatement((Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 6548, 6613);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_6721_6778(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLockStatement((Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 6721, 6778);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadStatement
                f_10318_7132_7209(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                childBoundNodes, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBadStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, childBoundNodes, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7132, 7209);
                    return return_v;
                }


                bool
                f_10318_7313_7340(Microsoft.CodeAnalysis.CSharp.BoundStatement
                this_param)
                {
                    var return_v = this_param.WasCompilerGenerated;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 7313, 7340);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_7380_7391(Microsoft.CodeAnalysis.CSharp.BoundStatement
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 7380, 7391);
                    return return_v;
                }


                bool
                f_10318_7523_7569(Microsoft.CodeAnalysis.CSharp.BoundStatement
                this_param)
                {
                    var return_v = this_param.WasCompilerGenerated;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 7523, 7569);
                    return return_v;
                }


                int
                f_10318_7300_7619(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7300, 7619);
                    return 0;
                }


                int
                f_10318_7636_7746(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7636, 7746);
                    return 0;
                }


                System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                f_10318_7808_7840(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.AncestorsAndSelf();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7808, 7840);
                    return return_v;
                }


                bool
                f_10318_7776_7847(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode>
                source, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                value)
                {
                    var return_v = source.Contains<Microsoft.CodeAnalysis.SyntaxNode>((Microsoft.CodeAnalysis.SyntaxNode)value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7776, 7847);
                    return return_v;
                }


                int
                f_10318_7763_8177(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 7763, 8177);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 1404, 8219);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 1404, 8219);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindCheckedStatement(CheckedStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 8231, 8416);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8355, 8405);

                return f_10318_8362_8404(this, f_10318_8380_8390(node), diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 8231, 8416);

                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_8380_8390(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax
                this_param)
                {
                    var return_v = this_param.Block;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8380, 8390);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_8362_8404(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 8362, 8404);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 8231, 8416);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 8231, 8416);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindUnsafeStatement(UnsafeStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 8428, 9231);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8550, 8590);

                var
                unsafeBinder = f_10318_8569_8589(this, node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8606, 9154) || true) && (f_10318_8610_8647_M(!f_10318_8611_8635(f_10318_8611_8627(this)).AllowUnsafe))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 8606, 9154);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8681, 8749);

                    f_10318_8681_8748(diagnostics, ErrorCode.ERR_IllegalUnsafe, f_10318_8729_8747(node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 8606, 9154);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 8606, 9154);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 8783, 9154) || true) && (f_10318_8787_8814(this))
                    ) // called *after* we know the binder map has been created.

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 8783, 9154);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9066, 9139);

                        f_10318_9066_9138(diagnostics, ErrorCode.ERR_IllegalInnerUnsafe, f_10318_9119_9137(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 8783, 9154);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 8606, 9154);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9170, 9220);

                return f_10318_9177_9219(this, f_10318_9195_9205(node), diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 8428, 9231);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_8569_8589(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 8569, 8589);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_8611_8627(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8611, 8627);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions
                f_10318_8611_8635(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.Options;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8611, 8635);
                    return return_v;
                }


                bool
                f_10318_8610_8647_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8610, 8647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_8729_8747(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
                this_param)
                {
                    var return_v = this_param.UnsafeKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8729, 8747);
                    return return_v;
                }


                int
                f_10318_8681_8748(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 8681, 8748);
                    return 0;
                }


                bool
                f_10318_8787_8814(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsIndirectlyInIterator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 8787, 8814);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_9119_9137(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
                this_param)
                {
                    var return_v = this_param.UnsafeKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 9119, 9137);
                    return return_v;
                }


                int
                f_10318_9066_9138(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9066, 9138);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_9195_9205(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax
                this_param)
                {
                    var return_v = this_param.Block;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 9195, 9205);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_9177_9219(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9177, 9219);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 8428, 9231);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 8428, 9231);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindFixedStatement(FixedStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 9243, 9611);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9363, 9402);

                var
                fixedBinder = f_10318_9381_9401(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9416, 9450);

                f_10318_9416_9449(fixedBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9466, 9522);

                f_10318_9466_9521(
                            fixedBinder, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9538, 9600);

                return f_10318_9545_9599(fixedBinder, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 9243, 9611);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_9381_9401(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9381, 9401);
                    return return_v;
                }


                int
                f_10318_9416_9449(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9416, 9449);
                    return 0;
                }


                bool
                f_10318_9466_9521(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ReportUnsafeIfNotAllowed((Microsoft.CodeAnalysis.SyntaxNode)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9466, 9521);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_9545_9599(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindFixedStatementParts(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9545, 9599);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 9243, 9611);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 9243, 9611);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindFixedStatementParts(FixedStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 9623, 10576);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9748, 9811);

                VariableDeclarationSyntax
                declarationSyntax = f_10318_9794_9810(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9827, 9878);

                ImmutableArray<BoundLocalDeclaration>
                declarations
                = default(ImmutableArray<BoundLocalDeclaration>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 9892, 10012);

                f_10318_9892_10011(this, declarationSyntax, LocalDeclarationKind.FixedVariable, diagnostics, out declarations);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10028, 10064);

                f_10318_10028_10063(f_10318_10041_10062_M(!declarations.IsEmpty));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10080, 10207);

                BoundMultipleLocalDeclarations
                boundMultipleDeclarations = f_10318_10139_10206(declarationSyntax, declarations)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10223, 10309);

                BoundStatement
                boundBody = f_10318_10250_10308(this, f_10318_10280_10294(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10325, 10565);

                return f_10318_10332_10564(node, f_10318_10406_10437(this, node), boundMultipleDeclarations, boundBody);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 9623, 10576);

                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                f_10318_9794_9810(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 9794, 9810);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_9892_10011(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                nodeOpt, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                localKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                declarations)
                {
                    var return_v = this_param.BindForOrUsingOrFixedDeclarations(nodeOpt, localKind, diagnostics, out declarations);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 9892, 10011);
                    return return_v;
                }


                bool
                f_10318_10041_10062_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10041, 10062);
                    return return_v;
                }


                int
                f_10318_10028_10063(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10028, 10063);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations
                f_10318_10139_10206(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                localDeclarations)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations((Microsoft.CodeAnalysis.SyntaxNode)syntax, localDeclarations);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10139, 10206);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10318_10280_10294(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10280, 10294);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_10250_10308(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindPossibleEmbeddedStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10250, 10308);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_10406_10437(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10406, 10437);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundFixedStatement
                f_10318_10332_10564(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations
                declarations, Microsoft.CodeAnalysis.CSharp.BoundStatement
                body)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundFixedStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, declarations, body);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10332, 10564);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 9623, 10576);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 9623, 10576);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void CheckRequiredLangVersionForAsyncIteratorMethods(DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 10588, 11035);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10700, 10757);

                var
                method = (MethodSymbol)f_10318_10727_10756(this)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10771, 11024) || true) && (f_10318_10775_10789(method))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 10771, 11024);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 10823, 11009);

                    f_10318_10823_11008(MessageID.IDS_FeatureAsyncStreams, diagnostics, f_10318_10938_10965(method), f_10318_10988_11004(method)[0]);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 10771, 11024);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 10588, 11035);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_10727_10756(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10727, 10756);
                    return return_v;
                }


                bool
                f_10318_10775_10789(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                this_param)
                {
                    var return_v = this_param.IsAsync;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10775, 10789);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_10938_10965(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.DeclaringCompilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10938, 10965);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                f_10318_10988_11004(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.Locations;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 10988, 11004);
                    return return_v;
                }


                bool
                f_10318_10823_11008(Microsoft.CodeAnalysis.CSharp.MessageID
                feature, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = feature.CheckFeatureAvailability(diagnostics, (Microsoft.CodeAnalysis.Compilation)compilation, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 10823, 11008);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 10588, 11035);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 10588, 11035);
            }
        }

        protected virtual void ValidateYield(YieldStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 11047, 11212);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11162, 11201);

                DynAbs.Tracing.TraceSender.TraceInvocationWrapper(() => DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_11162_11166(), 10318, 11162, 11200)?.ValidateYield(node, diagnostics), 10318, 11167, 11200);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 11047, 11212);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_11162_11166()
                {
                    var return_v = Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 11162, 11166);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 11047, 11212);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 11047, 11212);
            }
        }

        private BoundStatement BindYieldReturnStatement(YieldStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 11224, 13244);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11350, 11383);

                f_10318_11350_11382(this, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11397, 11452);

                TypeSymbol
                elementType = f_10318_11422_11446(this).Type
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11466, 11663);

                BoundExpression
                argument = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 11493, 11518) || (((f_10318_11494_11509(node) == null)
                && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 11538, 11581)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 11601, 11662))) ? f_10318_11538_11581(f_10318_11538_11557(this, node)) : f_10318_11601_11662(this, f_10318_11611_11626(node), diagnostics, BindValueKind.RValue)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11677, 11770);

                argument = f_10318_11688_11769(this, argument, ExternalScope, isByRef: false, diagnostics: diagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11786, 12054) || true) && (f_10318_11790_11812_M(!argument.HasAnyErrors))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 11786, 12054);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11846, 11925);

                    argument = f_10318_11857_11924(this, elementType, argument, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 11786, 12054);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 11786, 12054);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 11991, 12039);

                    argument = f_10318_12002_12038(this, argument);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 11786, 12054);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12359, 13089) || true) && (f_10318_12363_12410(this.Flags, BinderFlags.InFinallyBlock))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12359, 13089);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12444, 12515);

                    f_10318_12444_12514(diagnostics, ErrorCode.ERR_BadYieldInFinally, f_10318_12496_12513(node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12359, 13089);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12359, 13089);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12549, 13089) || true) && (f_10318_12553_12606(this.Flags, BinderFlags.InTryBlockOfTryCatch))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12549, 13089);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12640, 12714);

                        f_10318_12640_12713(diagnostics, ErrorCode.ERR_BadYieldInTryOfCatch, f_10318_12695_12712(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12549, 13089);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12549, 13089);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12748, 13089) || true) && (f_10318_12752_12797(this.Flags, BinderFlags.InCatchBlock))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12748, 13089);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12831, 12900);

                            f_10318_12831_12899(diagnostics, ErrorCode.ERR_BadYieldInCatch, f_10318_12881_12898(node));
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12748, 13089);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12748, 13089);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12934, 13089) || true) && (f_10318_12938_12963())
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 12934, 13089);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 12997, 13074);

                                f_10318_12997_13073(diagnostics, ErrorCode.ERR_YieldNotAllowedInScript, f_10318_13055_13072(node));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12934, 13089);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12748, 13089);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12549, 13089);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 12359, 13089);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13105, 13166);

                f_10318_13105_13165(this, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13180, 13233);

                return f_10318_13187_13232(node, argument);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 11224, 13244);

                int
                f_10318_11350_11382(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ValidateYield(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11350, 11382);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_11422_11446(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.GetIteratorElementType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11422, 11446);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_11494_11509(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 11494, 11509);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10318_11538_11557(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                syntax)
                {
                    var return_v = this_param.BadExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11538, 11557);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                f_10318_11538_11581(Microsoft.CodeAnalysis.CSharp.BoundBadExpression
                node)
                {
                    var return_v = node.MakeCompilerGenerated<Microsoft.CodeAnalysis.CSharp.BoundBadExpression>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11538, 11581);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_11611_11626(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 11611, 11626);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_11601_11662(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11601, 11662);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_11688_11769(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                escapeTo, bool
                isByRef, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateEscape(expr, escapeTo, isByRef: isByRef, diagnostics: diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11688, 11769);
                    return return_v;
                }


                bool
                f_10318_11790_11812_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 11790, 11812);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_11857_11924(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.GenerateConversionForAssignment(targetType, expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 11857, 11924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_12002_12038(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12002, 12038);
                    return return_v;
                }


                bool
                f_10318_12363_12410(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12363, 12410);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_12496_12513(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 12496, 12513);
                    return return_v;
                }


                int
                f_10318_12444_12514(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12444, 12514);
                    return 0;
                }


                bool
                f_10318_12553_12606(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12553, 12606);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_12695_12712(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 12695, 12712);
                    return return_v;
                }


                int
                f_10318_12640_12713(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12640, 12713);
                    return 0;
                }


                bool
                f_10318_12752_12797(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12752, 12797);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_12881_12898(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 12881, 12898);
                    return return_v;
                }


                int
                f_10318_12831_12899(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12831, 12899);
                    return 0;
                }


                bool
                f_10318_12938_12963()
                {
                    var return_v = BindingTopLevelScriptCode;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 12938, 12963);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_13055_13072(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 13055, 13072);
                    return return_v;
                }


                int
                f_10318_12997_13073(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 12997, 13073);
                    return 0;
                }


                int
                f_10318_13105_13165(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.CheckRequiredLangVersionForAsyncIteratorMethods(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13105, 13165);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundYieldReturnStatement
                f_10318_13187_13232(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundYieldReturnStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13187, 13232);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 11224, 13244);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 11224, 13244);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindYieldBreakStatement(YieldStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 13256, 13917);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13381, 13726) || true) && (f_10318_13385_13432(this.Flags, BinderFlags.InFinallyBlock))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 13381, 13726);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13466, 13537);

                    f_10318_13466_13536(diagnostics, ErrorCode.ERR_BadYieldInFinally, f_10318_13518_13535(node));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 13381, 13726);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 13381, 13726);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13571, 13726) || true) && (f_10318_13575_13600())
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 13571, 13726);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13634, 13711);

                        f_10318_13634_13710(diagnostics, ErrorCode.ERR_YieldNotAllowedInScript, f_10318_13692_13709(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 13571, 13726);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 13381, 13726);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13742, 13775);

                f_10318_13742_13774(this, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13789, 13850);

                f_10318_13789_13849(this, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 13864, 13906);

                return f_10318_13871_13905(node);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 13256, 13917);

                bool
                f_10318_13385_13432(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13385, 13432);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_13518_13535(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 13518, 13535);
                    return return_v;
                }


                int
                f_10318_13466_13536(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13466, 13536);
                    return 0;
                }


                bool
                f_10318_13575_13600()
                {
                    var return_v = BindingTopLevelScriptCode;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 13575, 13600);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_13692_13709(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                this_param)
                {
                    var return_v = this_param.YieldKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 13692, 13709);
                    return return_v;
                }


                int
                f_10318_13634_13710(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13634, 13710);
                    return 0;
                }


                int
                f_10318_13742_13774(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ValidateYield(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13742, 13774);
                    return 0;
                }


                int
                f_10318_13789_13849(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.CheckRequiredLangVersionForAsyncIteratorMethods(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13789, 13849);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundYieldBreakStatement
                f_10318_13871_13905(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax
                syntax)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundYieldBreakStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 13871, 13905);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 13256, 13917);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 13256, 13917);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindLockStatement(LockStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 13929, 14223);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14047, 14085);

                var
                lockBinder = f_10318_14064_14084(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14099, 14132);

                f_10318_14099_14131(lockBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14146, 14212);

                return f_10318_14153_14211(lockBinder, diagnostics, lockBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 13929, 14223);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_14064_14084(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14064, 14084);
                    return return_v;
                }


                int
                f_10318_14099_14131(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14099, 14131);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_14153_14211(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindLockStatementParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14153, 14211);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 13929, 14223);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 13929, 14223);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundStatement BindLockStatementParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 14235, 14444);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14364, 14433);

                return f_10318_14371_14432(f_10318_14371_14380(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 14235, 14444);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_14371_14380(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 14371, 14380);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_14371_14432(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindLockStatementParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14371, 14432);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 14235, 14444);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 14235, 14444);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindUsingStatement(UsingStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 14458, 14759);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14578, 14617);

                var
                usingBinder = f_10318_14596_14616(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14631, 14665);

                f_10318_14631_14664(usingBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14679, 14748);

                return f_10318_14686_14747(usingBinder, diagnostics, usingBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 14458, 14759);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_14596_14616(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14596, 14616);
                    return return_v;
                }


                int
                f_10318_14631_14664(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14631, 14664);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_14686_14747(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindUsingStatementParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14686, 14747);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 14458, 14759);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 14458, 14759);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundStatement BindUsingStatementParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 14771, 14982);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 14901, 14971);

                return f_10318_14908_14970(f_10318_14908_14917(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 14771, 14982);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_14908_14917(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 14908, 14917);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_14908_14970(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindUsingStatementParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 14908, 14970);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 14771, 14982);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 14771, 14982);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundStatement BindPossibleEmbeddedStatement(StatementSyntax node, DiagnosticBag diagnostics)
        {
            Binder binder;

            switch (node.Kind())
            {
                case SyntaxKind.LocalDeclarationStatement:
                    // Local declarations are not legal in contexts where we need embedded statements.
                    diagnostics.Add(ErrorCode.ERR_BadEmbeddedStmt, node.GetLocation());

                    // fall through
                    goto case SyntaxKind.ExpressionStatement;

                case SyntaxKind.ExpressionStatement:
                case SyntaxKind.LockStatement:
                case SyntaxKind.IfStatement:
                case SyntaxKind.YieldReturnStatement:
                case SyntaxKind.ReturnStatement:
                case SyntaxKind.ThrowStatement:
                    binder = this.GetBinder(node);
                    Debug.Assert(binder != null);
                    return binder.WrapWithVariablesIfAny(node, binder.BindStatement(node, diagnostics));

                case SyntaxKind.LabeledStatement:
                case SyntaxKind.LocalFunctionStatement:
                    // Labeled statements and local function statements are not legal in contexts where we need embedded statements.
                    diagnostics.Add(ErrorCode.ERR_BadEmbeddedStmt, node.GetLocation());

                    binder = this.GetBinder(node);
                    Debug.Assert(binder != null);
                    return binder.WrapWithVariablesAndLocalFunctionsIfAny(node, binder.BindStatement(node, diagnostics));

                case SyntaxKind.SwitchStatement:
                    var switchStatement = (SwitchStatementSyntax)node;
                    binder = this.GetBinder(switchStatement.Expression);
                    Debug.Assert(binder != null);
                    return binder.WrapWithVariablesIfAny(switchStatement.Expression, binder.BindStatement(node, diagnostics));

                case SyntaxKind.EmptyStatement:
                    var emptyStatement = (EmptyStatementSyntax)node;
                    if (!emptyStatement.SemicolonToken.IsMissing)
                    {
                        switch (node.Parent.Kind())
                        {
                            case SyntaxKind.ForStatement:
                            case SyntaxKind.ForEachStatement:
                            case SyntaxKind.ForEachVariableStatement:
                            case SyntaxKind.WhileStatement:
                                // For loop constructs, only warn if we see a block following the statement.
                                // That indicates code like:  "while (x) ; { }"
                                // which is most likely a bug.
                                if (emptyStatement.SemicolonToken.GetNextToken().Kind() != SyntaxKind.OpenBraceToken)
                                {
                                    break;
                                }

                                goto default;

                            default:
                                // For non-loop constructs, always warn.  This is for code like:
                                // "if (x) ;" which is almost certainly a bug.
                                diagnostics.Add(ErrorCode.WRN_PossibleMistakenNullStatement, node.GetLocation());
                                break;
                        }
                    }

                    // fall through
                    goto default;

                default:
                    return BindStatement(node, diagnostics);
            }
        }

        private BoundExpression BindThrownExpression(ExpressionSyntax exprSyntax, DiagnosticBag diagnostics, ref bool hasErrors)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 18699, 20920);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 18844, 18917);

                var
                boundExpr = f_10318_18860_18916(this, exprSyntax, diagnostics, BindValueKind.RValue)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 18931, 20876) || true) && (f_10318_18935_18962(f_10318_18935_18946()) < f_10318_18965_19020(MessageID.IDS_FeatureSwitchExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 18931, 20876);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 19623, 20519) || true) && (!f_10318_19628_19653(boundExpr))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 19623, 20519);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 19695, 19749);

                        boundExpr = f_10318_19707_19748(this, boundExpr, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 19771, 19797);

                        var
                        type = f_10318_19782_19796(boundExpr)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20020, 20070);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20094, 20500) || true) && ((object)type == null || (DynAbs.Tracing.TraceSender.Expression_False(10318, 20098, 20241) || !f_10318_20123_20141(type) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 20122, 20241) && !f_10318_20146_20241(f_10318_20146_20157(), f_10318_20174_20216(type, ref useSiteDiagnostics), ref useSiteDiagnostics))))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 20094, 20500);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20291, 20360);

                            f_10318_20291_20359(diagnostics, ErrorCode.ERR_BadExceptionType, f_10318_20339_20358(exprSyntax));
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20386, 20403);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20429, 20477);

                            f_10318_20429_20476(diagnostics, exprSyntax, useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 20094, 20500);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 19623, 20519);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 18931, 20876);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 18931, 20876);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20718, 20861);

                    boundExpr = f_10318_20730_20860(this, f_10318_20762_20835(this, WellKnownType.System_Exception, diagnostics, exprSyntax), boundExpr, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 18931, 20876);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 20892, 20909);

                return boundExpr;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 18699, 20920);

                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_18860_18916(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 18860, 18916);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_18935_18946()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 18935, 18946);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LanguageVersion
                f_10318_18935_18962(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.LanguageVersion;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 18935, 18962);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LanguageVersion
                f_10318_18965_19020(Microsoft.CodeAnalysis.CSharp.MessageID
                feature)
                {
                    var return_v = feature.RequiredVersion();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 18965, 19020);
                    return return_v;
                }


                bool
                f_10318_19628_19653(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 19628, 19653);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_19707_19748(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 19707, 19748);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_19782_19796(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 19782, 19796);
                    return return_v;
                }


                bool
                f_10318_20123_20141(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20123, 20141);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_20146_20157()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 20146, 20157);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_20174_20216(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.EffectiveType(ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20174, 20216);
                    return return_v;
                }


                bool
                f_10318_20146_20241(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.IsExceptionType(type, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20146, 20241);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_20339_20358(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 20339, 20358);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_20291_20359(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20291, 20359);
                    return return_v;
                }


                bool
                f_10318_20429_20476(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20429, 20476);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_20762_20835(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.WellKnownType
                type, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetWellKnownType(type, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20762, 20835);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_20730_20860(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                targetType, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.GenerateConversionForAssignment((Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)targetType, expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 20730, 20860);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 18699, 20920);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 18699, 20920);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindThrow(ThrowStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 20932, 22385);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21043, 21076);

                BoundExpression
                boundExpr = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21090, 21113);

                bool
                hasErrors = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21129, 21175);

                ExpressionSyntax
                exprSyntax = f_10318_21159_21174(node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21189, 22299) || true) && (exprSyntax != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 21189, 22299);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21245, 21318);

                    boundExpr = f_10318_21257_21317(this, exprSyntax, diagnostics, ref hasErrors);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 21189, 22299);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 21189, 22299);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21352, 22299) || true) && (!f_10318_21357_21402(this.Flags, BinderFlags.InCatchBlock))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 21352, 22299);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21436, 21514);

                        f_10318_21436_21513(diagnostics, ErrorCode.ERR_BadEmptyThrow, node.ThrowKeyword.GetLocation());
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21532, 21549);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 21352, 22299);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 21352, 22299);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 21583, 22299) || true) && (f_10318_21587_21640(this.Flags, BinderFlags.InNestedFinallyBlock))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 21583, 22299);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22162, 22249);

                            f_10318_22162_22248(                // There's a special error code for a rethrow in a finally clause in a catch clause.
                                                                // Best guess interpretation: if an exception occurs within the nested try block
                                                                // (i.e. the one in the catch clause, to which the finally clause is attached),
                                                                // then it's not clear whether the runtime will try to rethrow the "inner" exception
                                                                // or the "outer" exception. For this reason, the case is disallowed.

                                            diagnostics, ErrorCode.ERR_BadEmptyThrowInFinally, node.ThrowKeyword.GetLocation());
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22267, 22284);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 21583, 22299);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 21352, 22299);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 21189, 22299);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22315, 22374);

                return f_10318_22322_22373(node, boundExpr, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 20932, 22385);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_21159_21174(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 21159, 21174);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_21257_21317(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                exprSyntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, ref bool
                hasErrors)
                {
                    var return_v = this_param.BindThrownExpression(exprSyntax, diagnostics, ref hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 21257, 21317);
                    return return_v;
                }


                bool
                f_10318_21357_21402(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 21357, 21402);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_21436_21513(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 21436, 21513);
                    return return_v;
                }


                bool
                f_10318_21587_21640(Microsoft.CodeAnalysis.CSharp.BinderFlags
                self, Microsoft.CodeAnalysis.CSharp.BinderFlags
                other)
                {
                    var return_v = self.Includes(other);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 21587, 21640);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_22162_22248(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 22162, 22248);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundThrowStatement
                f_10318_22322_22373(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                expressionOpt, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundThrowStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expressionOpt, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 22322, 22373);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 20932, 22385);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 20932, 22385);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static BoundStatement BindEmpty(EmptyStatementSyntax node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 22397, 22564);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22488, 22553);

                return f_10318_22495_22552(node, NoOpStatementFlavor.Default);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 22397, 22564);

                Microsoft.CodeAnalysis.CSharp.BoundNoOpStatement
                f_10318_22495_22552(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.NoOpStatementFlavor
                flavor)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNoOpStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, flavor);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 22495, 22552);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 22397, 22564);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 22397, 22564);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundLabeledStatement BindLabeled(LabeledStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 22576, 24870);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22814, 22836);

                bool
                hasError = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22852, 22892);

                var
                result = f_10318_22865_22891()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22906, 22956);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 22970, 23138);

                var
                binder = f_10318_22983_23137(this, result, node.Identifier.ValueText, arity: 0, useSiteDiagnostics: ref useSiteDiagnostics, options: LookupOptions.LabelsOnly)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 23415, 23630);

                var
                symbol = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 23428, 23476) || ((f_10318_23428_23448(f_10318_23428_23442(result)) > 0 && (DynAbs.Tracing.TraceSender.Expression_True(10318, 23428, 23476) && f_10318_23456_23476(result)) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 23496, 23531)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 23551, 23629))) ? (LabelSymbol)f_10318_23509_23531(f_10318_23509_23523(result)) : f_10318_23551_23629((MethodSymbol)f_10318_23587_23611(), f_10318_23613_23628(node))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 23646, 23924) || true) && (f_10318_23650_23687_M(!symbol.IdentifierNodeOrToken.IsToken) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 23650, 23748) || symbol.IdentifierNodeOrToken.AsToken() != f_10318_23733_23748(node)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 23646, 23924);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 23782, 23875);

                    f_10318_23782_23874(diagnostics, ErrorCode.ERR_DuplicateLabel, f_10318_23831_23846(node), node.Identifier.ValueText);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 23893, 23909);

                    hasError = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 23646, 23924);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24033, 24626) || true) && (binder != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 24033, 24626);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24085, 24100);

                    f_10318_24085_24099(result);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24118, 24280);

                    f_10318_24118_24279(f_10318_24118_24129(binder), result, node.Identifier.ValueText, arity: 0, useSiteDiagnostics: ref useSiteDiagnostics, options: LookupOptions.LabelsOnly);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24298, 24611) || true) && (f_10318_24302_24322(result))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 24298, 24611);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24464, 24554);

                        f_10318_24464_24553(diagnostics, ErrorCode.ERR_LabelShadow, f_10318_24510_24525(node), node.Identifier.ValueText);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24576, 24592);

                        hasError = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 24298, 24611);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 24033, 24626);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24642, 24684);

                f_10318_24642_24683(
                            diagnostics, node, useSiteDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24698, 24712);

                f_10318_24698_24711(result);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24728, 24782);

                var
                body = f_10318_24739_24781(this, f_10318_24753_24767(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24796, 24859);

                return f_10318_24803_24858(node, symbol, body, hasError);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 22576, 24870);

                Microsoft.CodeAnalysis.CSharp.LookupResult
                f_10318_22865_22891()
                {
                    var return_v = LookupResult.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 22865, 22891);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10318_22983_23137(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.LookupResult
                result, string
                name, int
                arity, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    var return_v = this_param.LookupSymbolsWithFallback(result, name, arity: arity, useSiteDiagnostics: ref useSiteDiagnostics, options: options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 22983, 23137);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10318_23428_23442(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23428, 23442);
                    return return_v;
                }


                int
                f_10318_23428_23448(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param)
                {
                    var return_v = this_param.Count;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23428, 23448);
                    return return_v;
                }


                bool
                f_10318_23456_23476(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.IsMultiViable;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23456, 23476);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10318_23509_23523(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.Symbols;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23509, 23523);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_23509_23531(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.Symbol>
                this_param)
                {
                    var return_v = this_param.First();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 23509, 23531);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_23587_23611()
                {
                    var return_v = ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23587, 23611);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_23613_23628(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23613, 23628);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLabelSymbol
                f_10318_23551_23629(Microsoft.CodeAnalysis.CSharp.Symbol?
                containingMethod, Microsoft.CodeAnalysis.SyntaxToken
                identifierNodeOrToken)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.SourceLabelSymbol((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)containingMethod, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)identifierNodeOrToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 23551, 23629);
                    return return_v;
                }


                bool
                f_10318_23650_23687_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23650, 23687);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_23733_23748(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23733, 23748);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_23831_23846(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 23831, 23846);
                    return return_v;
                }


                int
                f_10318_23782_23874(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token, params object[]
                args)
                {
                    Error(diagnostics, code, token, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 23782, 23874);
                    return 0;
                }


                int
                f_10318_24085_24099(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    this_param.Clear();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24085, 24099);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_24118_24129(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 24118, 24129);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10318_24118_24279(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.LookupResult
                result, string
                name, int
                arity, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics, Microsoft.CodeAnalysis.CSharp.LookupOptions
                options)
                {
                    var return_v = this_param.LookupSymbolsWithFallback(result, name, arity: arity, useSiteDiagnostics: ref useSiteDiagnostics, options: options);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24118, 24279);
                    return return_v;
                }


                bool
                f_10318_24302_24322(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    var return_v = this_param.IsMultiViable;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 24302, 24322);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_24510_24525(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 24510, 24525);
                    return return_v;
                }


                int
                f_10318_24464_24553(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token, params object[]
                args)
                {
                    Error(diagnostics, code, token, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24464, 24553);
                    return 0;
                }


                bool
                f_10318_24642_24683(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24642, 24683);
                    return return_v;
                }


                int
                f_10318_24698_24711(Microsoft.CodeAnalysis.CSharp.LookupResult
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24698, 24711);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10318_24753_24767(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 24753, 24767);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_24739_24781(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24739, 24781);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLabeledStatement
                f_10318_24803_24858(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.LabelSymbol
                label, Microsoft.CodeAnalysis.CSharp.BoundStatement
                body, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLabeledStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, label, body, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24803, 24858);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 22576, 24870);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 22576, 24870);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindGoto(GotoStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 24882, 27166);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 24991, 27155);

                switch (f_10318_24999_25010(node))
                {

                    case SyntaxKind.GotoStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 24991, 27155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25096, 25153);

                        var
                        expression = f_10318_25113_25152(this, f_10318_25123_25138(node), diagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25175, 25217);

                        var
                        boundLabel = expression as BoundLabel
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25239, 25478) || true) && (boundLabel == null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 25239, 25478);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25368, 25455);

                            return f_10318_25375_25454(node, f_10318_25403_25447(expression), true);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 25239, 25478);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25500, 25530);

                        var
                        symbol = f_10318_25513_25529(boundLabel)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 25552, 25614);

                        return f_10318_25559_25613(node, symbol, null, boundLabel);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 24991, 27155);

                    case SyntaxKind.GotoCaseStatement:
                    case SyntaxKind.GotoDefaultStatement:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 24991, 27155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26008, 26052);

                        SwitchBinder
                        binder = f_10318_26030_26051(this)
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26074, 26953) || true) && (binder == null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 26074, 26953);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26142, 26198);

                            f_10318_26142_26197(diagnostics, ErrorCode.ERR_InvalidGotoCase, node);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26224, 26261);

                            ImmutableArray<BoundNode>
                            childNodes
                            = default(ImmutableArray<BoundNode>);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26287, 26851) || true) && (f_10318_26291_26306(node) != null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 26287, 26851);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26372, 26423);

                                var
                                dummyDiagnostics = f_10318_26395_26422()
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26453, 26528);

                                var
                                value = f_10318_26465_26527(this, f_10318_26493_26508(node), dummyDiagnostics)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26558, 26611);

                                childNodes = f_10318_26571_26610(value);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26641, 26665);

                                f_10318_26641_26664(dummyDiagnostics);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 26287, 26851);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 26287, 26851);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26779, 26824);

                                childNodes = ImmutableArray<BoundNode>.Empty;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 26287, 26851);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26877, 26930);

                            return f_10318_26884_26929(node, childNodes, true);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 26074, 26953);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 26975, 27036);

                        return f_10318_26982_27035(binder, node, this, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 24991, 27155);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 24991, 27155);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27086, 27140);

                        throw f_10318_27092_27139(f_10318_27127_27138(node));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 24991, 27155);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 24882, 27166);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_24999_25010(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 24999, 25010);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_25123_25138(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 25123, 25138);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_25113_25152(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindLabel(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 25113, 25152);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                f_10318_25403_25447(Microsoft.CodeAnalysis.CSharp.BoundExpression
                item)
                {
                    var return_v = ImmutableArray.Create<BoundNode>((Microsoft.CodeAnalysis.CSharp.BoundNode)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 25403, 25447);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadStatement
                f_10318_25375_25454(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                childBoundNodes, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBadStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, childBoundNodes, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 25375, 25454);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LabelSymbol
                f_10318_25513_25529(Microsoft.CodeAnalysis.CSharp.BoundLabel
                this_param)
                {
                    var return_v = this_param.Label;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 25513, 25529);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundGotoStatement
                f_10318_25559_25613(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.LabelSymbol
                label, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                caseExpressionOpt, Microsoft.CodeAnalysis.CSharp.BoundLabel
                labelExpressionOpt)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundGotoStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, label, caseExpressionOpt, labelExpressionOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 25559, 25613);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SwitchBinder
                f_10318_26030_26051(Microsoft.CodeAnalysis.CSharp.Binder
                binder)
                {
                    var return_v = GetSwitchBinder(binder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26030, 26051);
                    return return_v;
                }


                int
                f_10318_26142_26197(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26142, 26197);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_26291_26306(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 26291, 26306);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_26395_26422()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26395, 26422);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_26493_26508(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 26493, 26508);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_26465_26527(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindRValueWithoutTargetType(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26465, 26527);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                f_10318_26571_26610(Microsoft.CodeAnalysis.CSharp.BoundExpression
                item)
                {
                    var return_v = ImmutableArray.Create<BoundNode>((Microsoft.CodeAnalysis.CSharp.BoundNode)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26571, 26610);
                    return return_v;
                }


                int
                f_10318_26641_26664(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26641, 26664);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadStatement
                f_10318_26884_26929(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                childBoundNodes, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBadStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, childBoundNodes, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26884, 26929);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_26982_27035(Microsoft.CodeAnalysis.CSharp.SwitchBinder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                node, Microsoft.CodeAnalysis.CSharp.Binder
                gotoBinder, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindGotoCaseOrDefault(node, gotoBinder, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 26982, 27035);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_27127_27138(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27127, 27138);
                    return return_v;
                }


                System.Exception
                f_10318_27092_27139(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27092, 27139);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 24882, 27166);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 24882, 27166);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindLocalFunctionStatement(LocalFunctionStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 27178, 30888);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27373, 27433);

                var
                localSymbol = f_10318_27391_27432(this, f_10318_27416_27431(node))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27449, 27573);

                var
                hasErrors = f_10318_27465_27572(f_10318_27465_27488(localSymbol), localSymbol, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27589, 27617);

                BoundBlock
                blockBody = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27631, 27664);

                BoundBlock
                expressionBody = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27678, 28611) || true) && (f_10318_27682_27691(node) != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 27678, 28611);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27733, 27813);

                    blockBody = f_10318_27745_27812(f_10318_27757_27798(this, f_10318_27775_27784(node), diagnostics), diagnostics);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27833, 28130) || true) && (f_10318_27837_27856(node) != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 27833, 28130);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27906, 27958);

                        var
                        expressionBodyDiagnostics = f_10318_27938_27957()
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 27980, 28111);

                        expressionBody = f_10318_27997_28110(f_10318_28009_28082(this, f_10318_28035_28054(node), expressionBodyDiagnostics), expressionBodyDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 27833, 28130);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 27678, 28611);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 27678, 28611);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28164, 28611) || true) && (f_10318_28168_28187(node) != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 28164, 28611);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28229, 28332);

                        expressionBody = f_10318_28246_28331(f_10318_28258_28317(this, f_10318_28284_28303(node), diagnostics), diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 28164, 28611);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 28164, 28611);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28366, 28611) || true) && (!hasErrors && (DynAbs.Tracing.TraceSender.Expression_True(10318, 28370, 28432) && (f_10318_28385_28406_M(!localSymbol.IsExtern) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 28385, 28431) || f_10318_28410_28431_M(!localSymbol.IsStatic)))))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 28366, 28611);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28466, 28483);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28501, 28596);

                            f_10318_28501_28595(diagnostics, ErrorCode.ERR_LocalFunctionMissingBody, f_10318_28557_28578(localSymbol)[0], localSymbol);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 28366, 28611);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 28164, 28611);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 27678, 28611);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28627, 28882) || true) && (!hasErrors && (DynAbs.Tracing.TraceSender.Expression_True(10318, 28631, 28690) && (blockBody != null || (DynAbs.Tracing.TraceSender.Expression_False(10318, 28646, 28689) || expressionBody != null))) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 28631, 28714) && f_10318_28694_28714(localSymbol)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 28627, 28882);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28748, 28765);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28783, 28867);

                    f_10318_28783_28866(diagnostics, ErrorCode.ERR_ExternHasBody, f_10318_28828_28849(localSymbol)[0], localSymbol);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 28627, 28882);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 28898, 29019);

                f_10318_28898_29018(blockBody != null || (DynAbs.Tracing.TraceSender.Expression_False(10318, 28911, 28954) || expressionBody != null) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 28911, 29004) || (f_10318_28959_28979(localSymbol) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 28959, 29003) && f_10318_28983_29003(localSymbol)))) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 28911, 29017) || hasErrors));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 29035, 29086);

                f_10318_29035_29085(
                            localSymbol, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 29102, 29209);

                f_10318_29102_29208(f_10318_29158_29167(node), f_10318_29169_29188(node), node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 29225, 29321);

                return f_10318_29232_29320(node, localSymbol, blockBody, expressionBody, hasErrors);

                BoundBlock runAnalysis(BoundBlock block, DiagnosticBag blockDiagnostics)
                {
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 29337, 30877);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 29442, 30829) || true) && (block != null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 29442, 30829);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30096, 30138);

                            var
                            ignored = f_10318_30110_30137()
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30160, 30268);

                            var
                            endIsReachable = f_10318_30181_30267(f_10318_30205_30237(localSymbol), localSymbol, block, ignored)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30290, 30305);

                            f_10318_30290_30304(ignored);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30327, 30810) || true) && (endIsReachable)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 30327, 30810);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30395, 30787) || true) && (f_10318_30399_30432(this, localSymbol))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 30395, 30787);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30490, 30556);

                                    block = f_10318_30498_30555(block, localSymbol);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 30395, 30787);
                                }

                                else

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 30395, 30787);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30670, 30760);

                                    f_10318_30670_30759(blockDiagnostics, ErrorCode.ERR_ReturnExpected, f_10318_30721_30742(localSymbol)[0], localSymbol);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 30395, 30787);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 30327, 30810);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 29442, 30829);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30849, 30862);

                        return block;
                        DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 29337, 30877);

                        Microsoft.CodeAnalysis.DiagnosticBag
                        f_10318_30110_30137()
                        {
                            var return_v = DiagnosticBag.GetInstance();
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30110, 30137);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                        f_10318_30205_30237(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                        this_param)
                        {
                            var return_v = this_param.DeclaringCompilation;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 30205, 30237);
                            return return_v;
                        }


                        bool
                        f_10318_30181_30267(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                        compilation, Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                        member, Microsoft.CodeAnalysis.CSharp.BoundBlock
                        block, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics)
                        {
                            var return_v = ControlFlowPass.Analyze(compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)member, block, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30181, 30267);
                            return return_v;
                        }


                        int
                        f_10318_30290_30304(Microsoft.CodeAnalysis.DiagnosticBag
                        this_param)
                        {
                            this_param.Free();
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30290, 30304);
                            return 0;
                        }


                        bool
                        f_10318_30399_30432(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                        method)
                        {
                            var return_v = this_param.ImplicitReturnIsOkay((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)method);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30399, 30432);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.BoundBlock
                        f_10318_30498_30555(Microsoft.CodeAnalysis.CSharp.BoundBlock
                        body, Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                        method)
                        {
                            var return_v = FlowAnalysisPass.AppendImplicitReturn(body, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)method);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30498, 30555);
                            return return_v;
                        }


                        System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                        f_10318_30721_30742(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                        this_param)
                        {
                            var return_v = this_param.Locations;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 30721, 30742);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                        f_10318_30670_30759(Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                        code, Microsoft.CodeAnalysis.Location
                        location, params object[]
                        args)
                        {
                            var return_v = diagnostics.Add(code, location, args);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 30670, 30759);
                            return return_v;
                        }

                    }
                    catch
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 29337, 30877);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 29337, 30877);
                    }
                    throw new System.Exception("Slicer error: unreachable code");
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 27178, 30888);

                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_27416_27431(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 27416, 27431);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                f_10318_27391_27432(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                nameToken)
                {
                    var return_v = this_param.LookupLocalFunction(nameToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27391, 27432);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10318_27465_27488(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.ScopeBinder
                    ;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 27465, 27488);
                    return return_v;
                }


                bool
                f_10318_27465_27572(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateDeclarationNameConflictsInScope((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27465, 27572);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_27682_27691(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 27682, 27691);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_27775_27784(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 27775, 27784);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_27757_27798(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27757, 27798);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_27745_27812(Microsoft.CodeAnalysis.CSharp.BoundBlock
                block, Microsoft.CodeAnalysis.DiagnosticBag
                blockDiagnostics)
                {
                    var return_v = runAnalysis(block, blockDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27745, 27812);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_27837_27856(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 27837, 27856);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_27938_27957()
                {
                    var return_v = new Microsoft.CodeAnalysis.DiagnosticBag();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27938, 27957);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                f_10318_28035_28054(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28035, 28054);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_28009_28082(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionBodyAsBlock(expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28009, 28082);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_27997_28110(Microsoft.CodeAnalysis.CSharp.BoundBlock
                block, Microsoft.CodeAnalysis.DiagnosticBag
                blockDiagnostics)
                {
                    var return_v = runAnalysis(block, blockDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 27997, 28110);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_28168_28187(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28168, 28187);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                f_10318_28284_28303(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28284, 28303);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_28258_28317(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionBodyAsBlock(expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28258, 28317);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_28246_28331(Microsoft.CodeAnalysis.CSharp.BoundBlock
                block, Microsoft.CodeAnalysis.DiagnosticBag
                blockDiagnostics)
                {
                    var return_v = runAnalysis(block, blockDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28246, 28331);
                    return return_v;
                }


                bool
                f_10318_28385_28406_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28385, 28406);
                    return return_v;
                }


                bool
                f_10318_28410_28431_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28410, 28431);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                f_10318_28557_28578(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.Locations;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28557, 28578);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_28501_28595(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    var return_v = diagnostics.Add(code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28501, 28595);
                    return return_v;
                }


                bool
                f_10318_28694_28714(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.IsExtern;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28694, 28714);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Location>
                f_10318_28828_28849(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.Locations;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28828, 28849);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_28783_28866(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    var return_v = diagnostics.Add(code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28783, 28866);
                    return return_v;
                }


                bool
                f_10318_28959_28979(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.IsExtern;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28959, 28979);
                    return return_v;
                }


                bool
                f_10318_28983_29003(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 28983, 29003);
                    return return_v;
                }


                int
                f_10318_28898_29018(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 28898, 29018);
                    return 0;
                }


                int
                f_10318_29035_29085(Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                addTo)
                {
                    this_param.GetDeclarationDiagnostics(addTo);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 29035, 29085);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_29158_29167(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 29158, 29167);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_29169_29188(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 29169, 29188);
                    return return_v;
                }


                int
                f_10318_29102_29208(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                block, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                expression, Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    Symbol.CheckForBlockAndExpressionBody((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?)block, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?)expression, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 29102, 29208);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement
                f_10318_29232_29320(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                symbol, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                blockBody, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                expressionBody, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, symbol, blockBody, expressionBody, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 29232, 29320);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 27178, 30888);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 27178, 30888);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool ImplicitReturnIsOkay(MethodSymbol method)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 30900, 31086);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 30979, 31075);

                return f_10318_30986_31004(method) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 30986, 31025) || f_10318_31008_31025(method)) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 30986, 31074) || f_10318_31029_31074(method, f_10318_31057_31073(this)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 30900, 31086);

                bool
                f_10318_30986_31004(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ReturnsVoid;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 30986, 31004);
                    return return_v;
                }


                bool
                f_10318_31008_31025(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.IsIterator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 31008, 31025);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_31057_31073(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 31057, 31073);
                    return return_v;
                }


                bool
                f_10318_31029_31074(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = method.IsAsyncReturningTask(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31029, 31074);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 30900, 31086);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 30900, 31086);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public BoundStatement BindExpressionStatement(ExpressionStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 31098, 31331);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31227, 31320);

                return f_10318_31234_31319(this, node, f_10318_31264_31279(node), f_10318_31281_31305(node), diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 31098, 31331);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_31264_31279(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 31264, 31279);
                    return return_v;
                }


                bool
                f_10318_31281_31305(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
                this_param)
                {
                    var return_v = this_param.AllowsAnyExpression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 31281, 31305);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_31234_31319(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax
                node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, bool
                allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionStatement((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, syntax, allowsAnyExpression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31234, 31319);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 31098, 31331);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 31098, 31331);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpressionStatement BindExpressionStatement(CSharpSyntaxNode node, ExpressionSyntax syntax, bool allowsAnyExpression, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 31343, 32358);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31525, 31570);

                BoundExpressionStatement
                expressionStatement
                = default(BoundExpressionStatement);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31586, 31652);

                var
                expression = f_10318_31603_31651(this, syntax, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31666, 31717);

                f_10318_31666_31716(this, expression, diagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31731, 32235) || true) && (!allowsAnyExpression && (DynAbs.Tracing.TraceSender.Expression_True(10318, 31735, 31806) && !f_10318_31760_31806(syntax, expression)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 31731, 32235);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31840, 31979) || true) && (f_10318_31844_31859_M(!node.HasErrors))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 31840, 31979);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31901, 31960);

                        f_10318_31901_31959(diagnostics, ErrorCode.ERR_IllegalStatement, syntax);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 31840, 31979);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 31999, 32085);

                    expressionStatement = f_10318_32021_32084(node, expression, hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 31731, 32235);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 31731, 32235);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 32151, 32220);

                    expressionStatement = f_10318_32173_32219(node, expression);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 31731, 32235);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 32251, 32304);

                f_10318_32251_32303(this, expression, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 32320, 32347);

                return expressionStatement;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 31343, 32358);

                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_31603_31651(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindRValueWithoutTargetType(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31603, 31651);
                    return return_v;
                }


                int
                f_10318_31666_31716(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportSuppressionIfNeeded(expr, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31666, 31716);
                    return 0;
                }


                bool
                f_10318_31760_31806(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = IsValidStatementExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31760, 31806);
                    return return_v;
                }


                bool
                f_10318_31844_31859_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 31844, 31859);
                    return return_v;
                }


                int
                f_10318_31901_31959(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 31901, 31959);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_32021_32084(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 32021, 32084);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_32173_32219(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 32173, 32219);
                    return return_v;
                }


                int
                f_10318_32251_32303(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.CheckForUnobservedAwaitable(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 32251, 32303);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 31343, 32358);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 31343, 32358);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void CheckForUnobservedAwaitable(BoundExpression expression, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 32686, 32979);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 32806, 32968) || true) && (f_10318_32810_32836(this, expression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 32806, 32968);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 32870, 32953);

                    f_10318_32870_32952(diagnostics, ErrorCode.WRN_UnobservedAwaitableExpression, expression.Syntax);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 32806, 32968);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 32686, 32979);

                bool
                f_10318_32810_32836(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.CouldBeAwaited(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 32810, 32836);
                    return return_v;
                }


                int
                f_10318_32870_32952(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 32870, 32952);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 32686, 32979);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 32686, 32979);
            }
        }

        internal BoundStatement BindLocalDeclarationStatement(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 32991, 33409);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33134, 33398) || true) && (f_10318_33138_33155(node) != default)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 33134, 33398);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33200, 33261);

                    return f_10318_33207_33260(this, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 33134, 33398);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 33134, 33398);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33327, 33383);

                    return f_10318_33334_33382(this, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 33134, 33398);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 32991, 33409);

                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_33138_33155(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.UsingKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 33138, 33155);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_33207_33260(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindUsingDeclarationStatementParts(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 33207, 33260);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_33334_33382(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDeclarationStatementParts(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 33334, 33382);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 32991, 33409);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 32991, 33409);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindUsingDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 33421, 33879);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33568, 33754);

                var
                usingDeclaration = f_10318_33591_33753(node, f_10318_33659_33676(node), f_10318_33678_33695(node), originalBinder: this, usingBinderOpt: null, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33768, 33830);

                f_10318_33768_33829(usingDeclaration is BoundUsingLocalDeclarations);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 33844, 33868);

                return usingDeclaration;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 33421, 33879);

                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_33659_33676(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.UsingKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 33659, 33676);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_33678_33695(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.AwaitKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 33678, 33695);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_33591_33753(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                syntax, Microsoft.CodeAnalysis.SyntaxToken
                usingKeyword, Microsoft.CodeAnalysis.SyntaxToken
                awaitKeyword, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder, Microsoft.CodeAnalysis.CSharp.UsingStatementBinder?
                usingBinderOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = UsingStatementBinder.BindUsingStatementOrDeclarationFromParts((Microsoft.CodeAnalysis.SyntaxNode)syntax, usingKeyword, awaitKeyword, originalBinder: originalBinder, usingBinderOpt: usingBinderOpt, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 33591, 33753);
                    return return_v;
                }


                int
                f_10318_33768_33829(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 33768, 33829);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 33421, 33879);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 33421, 33879);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 33891, 35539);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34033, 34087);

                var
                typeSyntax = f_10318_34050_34086(f_10318_34050_34071(f_10318_34050_34066(node)), out _)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34101, 34129);

                bool
                isConst = f_10318_34116_34128(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34145, 34156);

                bool
                isVar
                = default(bool);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34170, 34188);

                AliasSymbol
                alias
                = default(AliasSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34202, 34357);

                TypeWithAnnotations
                declType = f_10318_34233_34356(this, f_10318_34265_34281(node), diagnostics, typeSyntax, ref isConst, isVar: out isVar, alias: out alias)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34373, 34463);

                var
                kind = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 34384, 34391) || ((isConst && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 34394, 34423)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 34426, 34462))) ? LocalDeclarationKind.Constant : LocalDeclarationKind.RegularVariable
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34477, 34523);

                var
                variableList = f_10318_34496_34522(f_10318_34496_34512(node))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34537, 34576);

                int
                variableCount = variableList.Count
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34590, 35528) || true) && (variableCount == 1)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 34590, 35528);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34646, 34801);

                    return f_10318_34653_34800(this, kind, isVar, variableList[0], typeSyntax, declType, alias, diagnostics, includeBoundType: true, associatedSyntaxNode: node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 34590, 35528);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 34590, 35528);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34867, 34952);

                    BoundLocalDeclaration[]
                    boundDeclarations = new BoundLocalDeclaration[variableCount]
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34970, 34980);

                    int
                    i = 0
                    ;
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 34998, 35408);
                        foreach (var variableDeclarationSyntax in f_10318_35040_35052_I(variableList))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 34998, 35408);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 35094, 35125);

                            bool
                            includeBoundType = i == 0
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 35240, 35389);

                            boundDeclarations[i++] = f_10318_35265_35388(this, kind, isVar, variableDeclarationSyntax, typeSyntax, declType, alias, diagnostics, includeBoundType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 34998, 35408);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 411);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 411);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 35426, 35513);

                    return f_10318_35433_35512(node, f_10318_35474_35511(boundDeclarations));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 34590, 35528);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 33891, 35539);

                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                f_10318_34050_34066(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34050, 34066);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_34050_34071(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34050, 34071);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_34050_34086(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = syntax.SkipRef(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 34050, 34086);
                    return return_v;
                }


                bool
                f_10318_34116_34128(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.IsConst;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34116, 34128);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                f_10318_34265_34281(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34265, 34281);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_34233_34356(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                declarationNode, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, ref bool
                isConst, out bool
                isVar, out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                alias)
                {
                    var return_v = this_param.BindVariableTypeWithAnnotations((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)declarationNode, diagnostics, typeSyntax, ref isConst, out isVar, out alias);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 34233, 34356);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                f_10318_34496_34512(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34496, 34512);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax>
                f_10318_34496_34522(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Variables;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 34496, 34522);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration
                f_10318_34653_34800(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                kind, bool
                isVar, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                declTypeOpt, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                aliasOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                includeBoundType, Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                associatedSyntaxNode)
                {
                    var return_v = this_param.BindVariableDeclaration(kind, isVar, declarator, typeSyntax, declTypeOpt, aliasOpt, diagnostics, includeBoundType: includeBoundType, associatedSyntaxNode: (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)associatedSyntaxNode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 34653, 34800);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration
                f_10318_35265_35388(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                kind, bool
                isVar, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                declTypeOpt, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                aliasOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                includeBoundType)
                {
                    var return_v = this_param.BindVariableDeclaration(kind, isVar, declarator, typeSyntax, declTypeOpt, aliasOpt, diagnostics, includeBoundType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 35265, 35388);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax>
                f_10318_35040_35052_I(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 35040, 35052);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                f_10318_35474_35511(Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration[]
                items)
                {
                    var return_v = items.AsImmutableOrNull<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 35474, 35511);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations
                f_10318_35433_35512(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                localDeclarations)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations((Microsoft.CodeAnalysis.SyntaxNode)syntax, localDeclarations);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 35433, 35512);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 33891, 35539);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 33891, 35539);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal MethodSymbol TryFindDisposePatternMethod(BoundExpression expr, SyntaxNode syntaxNode, bool hasAwait, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 36107, 37957);
                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol disposeMethod = default(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 36268, 36297);

                f_10318_36268_36296(expr is object);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 36311, 36345);

                f_10318_36311_36344(f_10318_36324_36333(expr) is object);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 36359, 36409);

                f_10318_36359_36408(f_10318_36372_36395(f_10318_36372_36381(expr)) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 36372, 36407) || hasAwait));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 36503, 36906);

                var
                result = f_10318_36516_36905(this, expr, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 36602, 36610) || ((hasAwait && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 36613, 36656)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 36659, 36697))) ? WellKnownMemberNames.DisposeAsyncMethodName : WellKnownMemberNames.DisposeMethodName, syntaxNode, diagnostics, out disposeMethod)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 36922, 37909) || true) && (f_10318_36926_36958_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(disposeMethod, 10318, 36926, 36958)?.IsExtensionMethod) == true)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 36922, 37909);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37259, 37280);

                    disposeMethod = null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 36922, 37909);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 36922, 37909);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37314, 37909) || true) && ((!hasAwait && (DynAbs.Tracing.TraceSender.Expression_True(10318, 37319, 37367) && f_10318_37332_37358_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(disposeMethod, 10318, 37332, 37358)?.ReturnsVoid) == false))
                    || (DynAbs.Tracing.TraceSender.Expression_False(10318, 37318, 37429) || result == PatternLookupResult.NotAMethod))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 37314, 37909);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37463, 37513);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37531, 37787) || true) && (f_10318_37535_37591(this, disposeMethod, ref useSiteDiagnostics))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 37531, 37787);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37633, 37768);

                            f_10318_37633_37767(diagnostics, ErrorCode.WRN_PatternBadSignature, f_10318_37684_37703(syntaxNode), f_10318_37705_37714(expr), f_10318_37716_37751(MessageID.IDS_Disposable), disposeMethod);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 37531, 37787);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37807, 37855);

                        f_10318_37807_37854(
                                        diagnostics, syntaxNode, useSiteDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37873, 37894);

                        disposeMethod = null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 37314, 37909);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 36922, 37909);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 37925, 37946);

                return disposeMethod;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 36107, 37957);

                int
                f_10318_36268_36296(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 36268, 36296);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_36324_36333(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 36324, 36333);
                    return return_v;
                }


                int
                f_10318_36311_36344(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 36311, 36344);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_36372_36381(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 36372, 36381);
                    return return_v;
                }


                bool
                f_10318_36372_36395(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.IsRefLikeType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 36372, 36395);
                    return return_v;
                }


                int
                f_10318_36359_36408(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 36359, 36408);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.PatternLookupResult
                f_10318_36516_36905(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                receiver, string
                methodName, Microsoft.CodeAnalysis.SyntaxNode
                syntaxNode, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                result)
                {
                    var return_v = this_param.PerformPatternMethodLookup(receiver, methodName, syntaxNode, diagnostics, out result);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 36516, 36905);
                    return return_v;
                }


                bool?
                f_10318_36926_36958_M(bool?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 36926, 36958);
                    return return_v;
                }


                bool?
                f_10318_37332_37358_M(bool?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 37332, 37358);
                    return return_v;
                }


                bool
                f_10318_37535_37591(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?
                symbol, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.IsAccessible((Microsoft.CodeAnalysis.CSharp.Symbol?)symbol, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 37535, 37591);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_37684_37703(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 37684, 37703);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_37705_37714(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 37705, 37714);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LocalizableErrorArgument
                f_10318_37716_37751(Microsoft.CodeAnalysis.CSharp.MessageID
                id)
                {
                    var return_v = id.Localize();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 37716, 37751);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_37633_37767(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    var return_v = diagnostics.Add(code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 37633, 37767);
                    return return_v;
                }


                bool
                f_10318_37807_37854(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 37807, 37854);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 36107, 37957);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 36107, 37957);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private TypeWithAnnotations BindVariableTypeWithAnnotations(CSharpSyntaxNode declarationNode, DiagnosticBag diagnostics, TypeSyntax typeSyntax, ref bool isConst, out bool isVar, out AliasSymbol alias)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 37969, 42066);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 38194, 38503);

                f_10318_38194_38502(declarationNode is VariableDesignationSyntax || (DynAbs.Tracing.TraceSender.Expression_False(10318, 38225, 38346) || f_10318_38290_38312(declarationNode) == SyntaxKind.VariableDeclaration) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 38225, 38425) || f_10318_38367_38389(declarationNode) == SyntaxKind.DeclarationExpression) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 38225, 38501) || f_10318_38446_38468(declarationNode) == SyntaxKind.DiscardDesignation));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 38810, 38924);

                TypeWithAnnotations
                declType = f_10318_38841_38923(this, f_10318_38862_38887(typeSyntax, out _), diagnostics, out isVar, out alias)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 38938, 38978);

                f_10318_38938_38977(declType.HasType || (DynAbs.Tracing.TraceSender.Expression_False(10318, 38951, 38976) || isVar));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 38994, 42023) || true) && (isVar)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 38994, 42023);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 39236, 39499) || true) && (isConst)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 39236, 39499);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 39289, 39377);

                        f_10318_39289_39376(diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableCannotBeConst, declarationNode);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 39464, 39480);

                        isConst = false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 39236, 39499);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 40627, 40973) || true) && (f_10318_40631_40660(f_10318_40631_40653(declarationNode)) == SyntaxKind.LocalDeclarationStatement && (DynAbs.Tracing.TraceSender.Expression_True(10318, 40631, 40789) && ((VariableDeclarationSyntax)declarationNode).Variables.Count > 1) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 40631, 40819) && f_10318_40793_40819_M(!declarationNode.HasErrors)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 40627, 40973);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 40861, 40954);

                        f_10318_40861_40953(diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableMultipleDeclarator, declarationNode);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 40627, 40973);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 38994, 42023);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 38994, 42023);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 41544, 41708) || true) && (declType.IsStatic)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 41544, 41708);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 41607, 41689);

                        f_10318_41607_41688(diagnostics, ErrorCode.ERR_VarDeclIsStaticClass, typeSyntax, declType.Type);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 41544, 41708);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 41728, 42008) || true) && (isConst && (DynAbs.Tracing.TraceSender.Expression_True(10318, 41732, 41770) && !f_10318_41744_41770(declType.Type)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 41728, 42008);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 41812, 41886);

                        f_10318_41812_41885(diagnostics, ErrorCode.ERR_BadConstType, typeSyntax, declType.Type);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 41973, 41989);

                        isConst = false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 41728, 42008);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 38994, 42023);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42039, 42055);

                return declType;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 37969, 42066);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_38290_38312(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38290, 38312);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_38367_38389(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38367, 38389);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_38446_38468(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38446, 38468);
                    return return_v;
                }


                int
                f_10318_38194_38502(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38194, 38502);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_38862_38887(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = syntax.SkipRef(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38862, 38887);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_38841_38923(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out bool
                isVar, out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                alias)
                {
                    var return_v = this_param.BindTypeOrVarKeyword(syntax, diagnostics, out isVar, out alias);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38841, 38923);
                    return return_v;
                }


                int
                f_10318_38938_38977(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 38938, 38977);
                    return 0;
                }


                int
                f_10318_39289_39376(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 39289, 39376);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10318_40631_40653(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 40631, 40653);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_40631_40660(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 40631, 40660);
                    return return_v;
                }


                bool
                f_10318_40793_40819_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 40793, 40819);
                    return return_v;
                }


                int
                f_10318_40861_40953(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 40861, 40953);
                    return 0;
                }


                int
                f_10318_41607_41688(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 41607, 41688);
                    return 0;
                }


                bool
                f_10318_41744_41770(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                typeSymbol)
                {
                    var return_v = typeSymbol.CanBeConst();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 41744, 41770);
                    return return_v;
                }


                int
                f_10318_41812_41885(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 41812, 41885);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 37969, 42066);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 37969, 42066);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundExpression BindInferredVariableInitializer(DiagnosticBag diagnostics, RefKind refKind, EqualsValueClauseSyntax initializer,
                    CSharpSyntaxNode errorSyntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 42078, 42668);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42283, 42307);

                BindValueKind
                valueKind
                = default(BindValueKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42321, 42344);

                ExpressionSyntax
                value
                = default(ExpressionSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42358, 42458);

                f_10318_42358_42457(initializer, initializer, refKind, diagnostics, out valueKind, out value);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42565, 42657);

                return f_10318_42572_42656(this, diagnostics, value, valueKind, refKind, errorSyntax);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 42078, 42668);

                bool
                f_10318_42358_42457(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                initializer, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                node, Microsoft.CodeAnalysis.RefKind
                variableRefKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                value)
                {
                    var return_v = IsInitializerRefKindValid(initializer, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, variableRefKind, diagnostics, out valueKind, out value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 42358, 42457);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_42572_42656(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                initializer, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                errorSyntax)
                {
                    var return_v = this_param.BindInferredVariableInitializer(diagnostics, initializer, valueKind, refKind, errorSyntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 42572, 42656);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 42078, 42668);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 42078, 42668);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected BoundExpression BindInferredVariableInitializer(DiagnosticBag diagnostics, ExpressionSyntax initializer, BindValueKind valueKind, RefKind refKind, CSharpSyntaxNode errorSyntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 42763, 44330);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 42974, 43253) || true) && (initializer == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 42974, 43253);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43031, 43206) || true) && (f_10318_43035_43057_M(!errorSyntax.HasErrors))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 43031, 43206);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43099, 43187);

                        f_10318_43099_43186(diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableWithNoInitializer, errorSyntax);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 43031, 43206);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43226, 43238);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 42974, 43253);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43269, 43647) || true) && (f_10318_43273_43291(initializer) == SyntaxKind.ArrayInitializerExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 43269, 43647);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43366, 43562);

                    var
                    result = f_10318_43379_43561(this, initializer, diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableAssignedArrayInitializer, errorSyntax)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43582, 43632);

                    return f_10318_43589_43631(this, result, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 43269, 43647);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43663, 43771);

                BoundExpression
                expression = f_10318_43692_43770(this, f_10318_43710_43756(this, initializer, diagnostics, valueKind), diagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 43990, 44285) || true) && (f_10318_43994_44018_M(!expression.HasAnyErrors) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 43994, 44053) && !f_10318_44023_44053(expression)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 43990, 44285);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44163, 44270);

                    f_10318_44163_44269(diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableAssignedBadValue, errorSyntax, f_10318_44250_44268(expression));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 43990, 44285);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44301, 44319);

                return expression;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 42763, 44330);

                bool
                f_10318_43035_43057_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 43035, 43057);
                    return return_v;
                }


                int
                f_10318_43099_43186(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43099, 43186);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_43273_43291(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43273, 43291);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundArrayInitialization
                f_10318_43379_43561(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                errorCode, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                errorNode)
                {
                    var return_v = this_param.BindUnexpectedArrayInitializer((Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)node, diagnostics, errorCode, errorNode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43379, 43561);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_43589_43631(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundArrayInitialization
                expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckValue((Microsoft.CodeAnalysis.CSharp.BoundExpression)expr, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43589, 43631);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_43710_43756(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43710, 43756);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_43692_43770(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 43692, 43770);
                    return return_v;
                }


                bool
                f_10318_43994_44018_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 43994, 44018);
                    return return_v;
                }


                bool
                f_10318_44023_44053(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasExpressionType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 44023, 44053);
                    return return_v;
                }


                object
                f_10318_44250_44268(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 44250, 44268);
                    return return_v;
                }


                int
                f_10318_44163_44269(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 44163, 44269);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 42763, 44330);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 42763, 44330);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsInitializerRefKindValid(
                    EqualsValueClauseSyntax initializer,
                    CSharpSyntaxNode node,
                    RefKind variableRefKind,
                    DiagnosticBag diagnostics,
                    out BindValueKind valueKind,
                    out ExpressionSyntax value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 44342, 45918);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44660, 44701);

                RefKind
                expressionRefKind = RefKind.None
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44738, 44857);

                value = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 44746, 44765) || ((initializer != null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 44768, 44849)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 44852, 44856))) ? f_10318_44768_44849(f_10318_44768_44785(initializer), diagnostics, out expressionRefKind) : null;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44871, 45879) || true) && (variableRefKind == RefKind.None)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 44871, 45879);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44940, 44973);

                    valueKind = BindValueKind.RValue;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 44991, 45202) || true) && (expressionRefKind == RefKind.Ref)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 44991, 45202);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45069, 45148);

                        f_10318_45069_45147(diagnostics, ErrorCode.ERR_InitializeByValueVariableWithReference, node);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45170, 45183);

                        return false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 44991, 45202);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 44871, 45879);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 44871, 45879);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45268, 45414);

                    valueKind = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 45280, 45318) || ((variableRefKind == RefKind.RefReadOnly
                    && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 45342, 45367)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 45391, 45413))) ? BindValueKind.ReadonlyRef
                    : BindValueKind.RefOrOut;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45434, 45864) || true) && (initializer == null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 45434, 45864);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45499, 45576);

                        f_10318_45499_45575(diagnostics, ErrorCode.ERR_ByReferenceVariableMustBeInitialized, node);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45598, 45611);

                        return false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 45434, 45864);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 45434, 45864);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45653, 45864) || true) && (expressionRefKind != RefKind.Ref)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 45653, 45864);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45731, 45810);

                            f_10318_45731_45809(diagnostics, ErrorCode.ERR_InitializeByReferenceVariableWithValue, node);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45832, 45845);

                            return false;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 45653, 45864);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 45434, 45864);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 44871, 45879);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 45895, 45907);

                return true;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 44342, 45918);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_44768_44785(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                this_param)
                {
                    var return_v = this_param.Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 44768, 44785);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_44768_44849(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = syntax.CheckAndUnwrapRefExpression(diagnostics, out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 44768, 44849);
                    return return_v;
                }


                int
                f_10318_45069_45147(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 45069, 45147);
                    return 0;
                }


                int
                f_10318_45499_45575(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 45499, 45575);
                    return 0;
                }


                int
                f_10318_45731_45809(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax)
                {
                    Error(diagnostics, code, syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 45731, 45809);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 44342, 45918);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 44342, 45918);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected BoundLocalDeclaration BindVariableDeclaration(
                    LocalDeclarationKind kind,
                    bool isVar,
                    VariableDeclaratorSyntax declarator,
                    TypeSyntax typeSyntax,
                    TypeWithAnnotations declTypeOpt,
                    AliasSymbol aliasOpt,
                    DiagnosticBag diagnostics,
                    bool includeBoundType,
                    CSharpSyntaxNode associatedSyntaxNode = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 45930, 47038);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 46378, 46411);

                f_10318_46378_46410(declarator != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 46427, 47027);

                return f_10318_46434_47026(this, f_10318_46458_46516(this, declarator, typeSyntax, kind), kind, isVar, declarator, typeSyntax, declTypeOpt, aliasOpt, diagnostics, includeBoundType, associatedSyntaxNode);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 45930, 47038);

                int
                f_10318_46378_46410(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 46378, 46410);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                f_10318_46458_46516(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                outerKind)
                {
                    var return_v = this_param.LocateDeclaredVariableSymbol(declarator, typeSyntax, outerKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 46458, 46516);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration
                f_10318_46434_47026(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                localSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                kind, bool
                isVar, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                declTypeOpt, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                aliasOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                includeBoundType, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                associatedSyntaxNode)
                {
                    var return_v = this_param.BindVariableDeclaration(localSymbol, kind, isVar, declarator, typeSyntax, declTypeOpt, aliasOpt, diagnostics, includeBoundType, associatedSyntaxNode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 46434, 47026);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 45930, 47038);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 45930, 47038);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected BoundLocalDeclaration BindVariableDeclaration(
                    SourceLocalSymbol localSymbol,
                    LocalDeclarationKind kind,
                    bool isVar,
                    VariableDeclaratorSyntax declarator,
                    TypeSyntax typeSyntax,
                    TypeWithAnnotations declTypeOpt,
                    AliasSymbol aliasOpt,
                    DiagnosticBag diagnostics,
                    bool includeBoundType,
                    CSharpSyntaxNode associatedSyntaxNode = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 47050, 56036);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 47542, 47575);

                f_10318_47542_47574(declarator != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 47589, 47632);

                f_10318_47589_47631(declTypeOpt.HasType || (DynAbs.Tracing.TraceSender.Expression_False(10318, 47602, 47630) || isVar));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 47646, 47679);

                f_10318_47646_47678(typeSyntax != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 47695, 47746);

                var
                localDiagnostics = f_10318_47718_47745()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 47830, 47888);

                associatedSyntaxNode = associatedSyntaxNode ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?>(10318, 47853, 47887) ?? declarator);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48098, 48208);

                bool
                nameConflict = f_10318_48118_48207(f_10318_48118_48141(localSymbol), localSymbol, diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48222, 48245);

                bool
                hasErrors = false
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48261, 48428) || true) && (f_10318_48265_48284(localSymbol) != RefKind.None)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 48261, 48428);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48334, 48413);

                    f_10318_48334_48412(this, f_10318_48371_48398(localSymbol), diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 48261, 48428);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48444, 48512);

                EqualsValueClauseSyntax
                equalsClauseSyntax = f_10318_48489_48511(declarator)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48528, 48552);

                BindValueKind
                valueKind
                = default(BindValueKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48566, 48589);

                ExpressionSyntax
                value
                = default(ExpressionSyntax);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48603, 48791) || true) && (!f_10318_48608_48725(equalsClauseSyntax, declarator, f_10318_48666_48685(localSymbol), diagnostics, out valueKind, out value))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 48603, 48791);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48759, 48776);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 48603, 48791);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48807, 48838);

                BoundExpression
                initializerOpt
                = default(BoundExpression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48852, 51325) || true) && (isVar)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 48852, 51325);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48895, 48911);

                    aliasOpt = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 48931, 49044);

                    initializerOpt = f_10318_48948_49043(this, diagnostics, value, valueKind, f_10318_49011_49030(localSymbol), declarator);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49150, 49200);

                    TypeSymbol
                    initializerType = f_10318_49179_49199_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(initializerOpt, 10318, 49179, 49199)?.Type)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49218, 50303) || true) && ((object)initializerType != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 49218, 50303);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49295, 49353);

                        declTypeOpt = TypeWithAnnotations.Create(initializerType);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49377, 49721) || true) && (declTypeOpt.IsVoidType())
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 49377, 49721);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49455, 49564);

                            f_10318_49455_49563(localDiagnostics, ErrorCode.ERR_ImplicitlyTypedVariableAssignedBadValue, declarator, declTypeOpt.Type);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49590, 49655);

                            declTypeOpt = TypeWithAnnotations.Create(f_10318_49631_49653(this, "var"));
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49681, 49698);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 49377, 49721);
                        }

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49745, 50098) || true) && (!f_10318_49750_49780(declTypeOpt.Type))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 49745, 50098);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49830, 50075) || true) && (declTypeOpt.IsStatic)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 49830, 50075);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 49912, 50001);

                                f_10318_49912_50000(localDiagnostics, ErrorCode.ERR_VarDeclIsStaticClass, typeSyntax, initializerType);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50031, 50048);

                                hasErrors = true;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 49830, 50075);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 49745, 50098);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 49218, 50303);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 49218, 50303);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50180, 50245);

                        declTypeOpt = TypeWithAnnotations.Create(f_10318_50221_50243(this, "var"));
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50267, 50284);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 49218, 50303);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 48852, 51325);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 48852, 51325);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50369, 51310) || true) && (f_10318_50373_50414(equalsClauseSyntax, null))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 50369, 51310);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50456, 50478);

                        initializerOpt = null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 50369, 51310);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 50369, 51310);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50657, 50752);

                        initializerOpt = f_10318_50674_50751(this, value, declTypeOpt.Type, valueKind, diagnostics);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50774, 51291) || true) && (kind != LocalDeclarationKind.FixedVariable)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 50774, 51291);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 50996, 51268);

                            initializerOpt = f_10318_51013_51267(this, declTypeOpt.Type, initializerOpt, localDiagnostics, isRefAssignment: f_10318_51231_51250(localSymbol) != RefKind.None);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 50774, 51291);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 50369, 51310);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 48852, 51325);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51341, 51375);

                f_10318_51341_51374(declTypeOpt.HasType);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51391, 52467) || true) && (kind == LocalDeclarationKind.FixedVariable)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51391, 52467);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51553, 51838) || true) && (isVar)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51553, 51838);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51604, 51819) || true) && (!hasErrors)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51604, 51819);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51668, 51753);

                            f_10318_51668_51752(localDiagnostics, ErrorCode.ERR_ImplicitlyTypedLocalCannotBeFixed, declarator);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51779, 51796);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51604, 51819);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51553, 51838);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51858, 52452) || true) && (!f_10318_51863_51895(declTypeOpt.Type))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51858, 52452);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 51937, 52227) || true) && (!hasErrors)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51937, 52227);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52001, 52161);

                            f_10318_52001_52160(localDiagnostics, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 52025, 52061) || ((f_10318_52025_52061(declTypeOpt.Type) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 52064, 52114)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 52117, 52147))) ? ErrorCode.ERR_CannotUseFunctionPointerAsFixedLocal : ErrorCode.ERR_BadFixedInitType, declarator);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52187, 52204);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51937, 52227);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51858, 52452);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 51858, 52452);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52269, 52452) || true) && (!f_10318_52274_52374(this, declTypeOpt.Type, localSymbol, ref initializerOpt, localDiagnostics))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 52269, 52452);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52416, 52433);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 52269, 52452);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51858, 52452);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 51391, 52467);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52483, 52664) || true) && (f_10318_52487_52598(f_10318_52520_52549(this), declTypeOpt.Type, localDiagnostics, typeSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 52483, 52664);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52632, 52649);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 52483, 52664);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52680, 52728);

                f_10318_52680_52727(
                            localSymbol, declTypeOpt);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52744, 53132) || true) && (initializerOpt != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 52744, 53132);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52804, 52839);

                    var
                    currentScope = f_10318_52823_52838()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52859, 52928);

                    f_10318_52859_52927(
                                    localSymbol, f_10318_52884_52926(initializerOpt, currentScope));

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 52948, 53117) || true) && (f_10318_52952_52971(localSymbol) != RefKind.None)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 52948, 53117);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53029, 53098);

                        f_10318_53029_53097(localSymbol, f_10318_53054_53096(initializerOpt, currentScope));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 52948, 53117);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 52744, 53132);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53148, 53246);

                ImmutableArray<BoundExpression>
                arguments = f_10318_53192_53245(this, declarator, localDiagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53262, 54512) || true) && (kind == LocalDeclarationKind.FixedVariable || (DynAbs.Tracing.TraceSender.Expression_False(10318, 53266, 53354) || kind == LocalDeclarationKind.UsingVariable))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 53262, 54512);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53719, 53910) || true) && (initializerOpt == null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 53719, 53910);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53787, 53852);

                        f_10318_53787_53851(localDiagnostics, ErrorCode.ERR_FixedMustInit, declarator);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53874, 53891);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 53719, 53910);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 53262, 54512);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 53262, 54512);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 53944, 54512) || true) && (kind == LocalDeclarationKind.Constant && (DynAbs.Tracing.TraceSender.Expression_True(10318, 53948, 54011) && initializerOpt != null) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 53948, 54055) && !f_10318_54016_54055(localDiagnostics)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 53944, 54512);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54089, 54176);

                        var
                        constantValueDiagnostics = f_10318_54120_54175(localSymbol, initializerOpt)
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54194, 54497);
                            foreach (var diagnostic in f_10318_54221_54245_I(constantValueDiagnostics))
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 54194, 54497);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54287, 54315);

                                f_10318_54287_54314(diagnostics, diagnostic);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54337, 54478) || true) && (f_10318_54341_54360(diagnostic) == DiagnosticSeverity.Error)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 54337, 54478);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54438, 54455);

                                    hasErrors = true;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 54337, 54478);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 54194, 54497);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 304);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 304);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 53944, 54512);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 53262, 54512);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54528, 54574);

                f_10318_54528_54573(
                            diagnostics, localDiagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54590, 54631);

                BoundTypeExpression
                boundDeclType = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54647, 55579) || true) && (includeBoundType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 54647, 55579);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54701, 54769);

                    var
                    invalidDimensions = f_10318_54725_54768()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 54789, 55393);

                    f_10318_54789_55392(
                                    typeSyntax, (rankSpecifier, args) =>
                                    {
                                        bool _ = false;
                                        foreach (var expressionSyntax in rankSpecifier.Sizes)
                                        {
                                            var size = args.binder.BindArrayDimension(expressionSyntax, args.diagnostics, ref _);
                                            if (size != null)
                                            {
                                                args.invalidDimensions.Add(size);
                                            }
                                        }
                                    }, (binder: this, invalidDimensions: invalidDimensions, diagnostics: diagnostics));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 55413, 55564);

                    boundDeclType = f_10318_55429_55563(typeSyntax, aliasOpt, dimensionsOpt: f_10318_55490_55528(invalidDimensions), typeWithAnnotations: declTypeOpt);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 54647, 55579);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 55595, 56025);

                return f_10318_55602_56024(syntax: associatedSyntaxNode, localSymbol: localSymbol, declaredTypeOpt: boundDeclType, initializerOpt: (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 55801, 55810) || ((hasErrors && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 55813, 55872)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 55875, 55889))) ? f_10318_55813_55872_I(f_10318_55813_55855(this, initializerOpt).WithHasErrors()) : initializerOpt, argumentsOpt: arguments, inferredType: isVar, hasErrors: hasErrors | nameConflict);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 47050, 56036);

                int
                f_10318_47542_47574(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 47542, 47574);
                    return 0;
                }


                int
                f_10318_47589_47631(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 47589, 47631);
                    return 0;
                }


                int
                f_10318_47646_47678(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 47646, 47678);
                    return 0;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_47718_47745()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 47718, 47745);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder
                f_10318_48118_48141(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.ScopeBinder;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 48118, 48141);
                    return return_v;
                }


                bool
                f_10318_48118_48207(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateDeclarationNameConflictsInScope((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 48118, 48207);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_48265_48284(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 48265, 48284);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_48371_48398(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.IdentifierToken;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 48371, 48398);
                    return return_v;
                }


                bool
                f_10318_48334_48412(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                identifierToken, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckRefLocalInAsyncOrIteratorMethod(identifierToken, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 48334, 48412);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax?
                f_10318_48489_48511(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 48489, 48511);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_48666_48685(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 48666, 48685);
                    return return_v;
                }


                bool
                f_10318_48608_48725(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax?
                initializer, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                node, Microsoft.CodeAnalysis.RefKind
                variableRefKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, out Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                value)
                {
                    var return_v = IsInitializerRefKindValid(initializer, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, variableRefKind, diagnostics, out valueKind, out value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 48608, 48725);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_49011_49030(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 49011, 49030);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_48948_49043(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                initializer, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                errorSyntax)
                {
                    var return_v = this_param.BindInferredVariableInitializer(diagnostics, initializer, valueKind, refKind, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)errorSyntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 48948, 49043);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_49179_49199_M(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 49179, 49199);
                    return return_v;
                }


                int
                f_10318_49455_49563(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 49455, 49563);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_49631_49653(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, string
                name)
                {
                    var return_v = this_param.CreateErrorType(name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 49631, 49653);
                    return return_v;
                }


                bool
                f_10318_49750_49780(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 49750, 49780);
                    return return_v;
                }


                int
                f_10318_49912_50000(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 49912, 50000);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_50221_50243(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, string
                name)
                {
                    var return_v = this_param.CreateErrorType(name);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 50221, 50243);
                    return return_v;
                }


                bool
                f_10318_50373_50414(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax?
                objA, object?
                objB)
                {
                    var return_v = ReferenceEquals((object?)objA, objB);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 50373, 50414);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_50674_50751(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destinationType, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindPossibleArrayInitializer(node, destinationType, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 50674, 50751);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_51231_51250(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 51231, 51250);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_51013_51267(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                isRefAssignment)
                {
                    var return_v = this_param.GenerateConversionForAssignment(targetType, expression, diagnostics, isRefAssignment: isRefAssignment);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 51013, 51267);
                    return return_v;
                }


                int
                f_10318_51341_51374(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 51341, 51374);
                    return 0;
                }


                int
                f_10318_51668_51752(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 51668, 51752);
                    return 0;
                }


                bool
                f_10318_51863_51895(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsPointerType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 51863, 51895);
                    return return_v;
                }


                bool
                f_10318_52025_52061(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsFunctionPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52025, 52061);
                    return return_v;
                }


                int
                f_10318_52001_52160(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52001, 52160);
                    return 0;
                }


                bool
                f_10318_52274_52374(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                declType, Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                localSymbol, ref Microsoft.CodeAnalysis.CSharp.BoundExpression?
                initializerOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.IsValidFixedVariableInitializer(declType, localSymbol, ref initializerOpt, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52274, 52374);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_52520_52549(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 52520, 52549);
                    return return_v;
                }


                bool
                f_10318_52487_52598(Microsoft.CodeAnalysis.CSharp.Symbol?
                containingSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax)
                {
                    var return_v = CheckRestrictedTypeInAsyncMethod(containingSymbol, type, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52487, 52598);
                    return return_v;
                }


                int
                f_10318_52680_52727(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                newType)
                {
                    this_param.SetTypeWithAnnotations(newType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52680, 52727);
                    return 0;
                }


                uint
                f_10318_52823_52838()
                {
                    var return_v = LocalScopeDepth;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 52823, 52838);
                    return return_v;
                }


                uint
                f_10318_52884_52926(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                scopeOfTheContainingExpression)
                {
                    var return_v = GetValEscape(expr, scopeOfTheContainingExpression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52884, 52926);
                    return return_v;
                }


                int
                f_10318_52859_52927(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param, uint
                value)
                {
                    this_param.SetValEscape(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 52859, 52927);
                    return 0;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_52952_52971(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 52952, 52971);
                    return return_v;
                }


                uint
                f_10318_53054_53096(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                scopeOfTheContainingExpression)
                {
                    var return_v = GetRefEscape(expr, scopeOfTheContainingExpression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 53054, 53096);
                    return return_v;
                }


                int
                f_10318_53029_53097(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param, uint
                value)
                {
                    this_param.SetRefEscape(value);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 53029, 53097);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10318_53192_53245(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDeclaratorArguments(declarator, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 53192, 53245);
                    return return_v;
                }


                int
                f_10318_53787_53851(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 53787, 53851);
                    return 0;
                }


                bool
                f_10318_54016_54055(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    var return_v = this_param.HasAnyResolvedErrors();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54016, 54055);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                f_10318_54120_54175(Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundInitValue)
                {
                    var return_v = this_param.GetConstantValueDiagnostics(boundInitValue);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54120, 54175);
                    return return_v;
                }


                int
                f_10318_54287_54314(Microsoft.CodeAnalysis.DiagnosticBag
                this_param, Microsoft.CodeAnalysis.Diagnostic
                diag)
                {
                    this_param.Add(diag);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54287, 54314);
                    return 0;
                }


                Microsoft.CodeAnalysis.DiagnosticSeverity
                f_10318_54341_54360(Microsoft.CodeAnalysis.Diagnostic
                this_param)
                {
                    var return_v = this_param.Severity;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 54341, 54360);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                f_10318_54221_54245_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54221, 54245);
                    return return_v;
                }


                int
                f_10318_54528_54573(Microsoft.CodeAnalysis.DiagnosticBag
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                bag)
                {
                    this_param.AddRangeAndFree(bag);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54528, 54573);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10318_54725_54768()
                {
                    var return_v = ArrayBuilder<BoundExpression>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54725, 54768);
                    return return_v;
                }


                int
                f_10318_54789_55392(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                type, System.Action<Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax, (Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundExpression> invalidDimensions, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)>
                action, (Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundExpression> invalidDimensions, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)
                argument)
                {
                    type.VisitRankSpecifiers<(Microsoft.CodeAnalysis.CSharp.Binder binder, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundExpression> invalidDimensions, Microsoft.CodeAnalysis.DiagnosticBag diagnostics)>(action, argument);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 54789, 55392);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10318_55490_55528(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 55490, 55528);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundTypeExpression
                f_10318_55429_55563(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol?
                aliasOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                dimensionsOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                typeWithAnnotations)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundTypeExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax, aliasOpt, dimensionsOpt: dimensionsOpt, typeWithAnnotations: typeWithAnnotations);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 55429, 55563);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_55813_55855(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                expression)
                {
                    var return_v = this_param?.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 55813, 55855);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_55813_55872_I(Microsoft.CodeAnalysis.CSharp.BoundExpression?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 55813, 55872);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration
                f_10318_55602_56024(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                localSymbol, Microsoft.CodeAnalysis.CSharp.BoundTypeExpression?
                declaredTypeOpt, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                initializerOpt, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                argumentsOpt, bool
                inferredType, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration(syntax: (Microsoft.CodeAnalysis.SyntaxNode)syntax, localSymbol: (Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol)localSymbol, declaredTypeOpt: declaredTypeOpt, initializerOpt: initializerOpt, argumentsOpt: argumentsOpt, inferredType: inferredType, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 55602, 56024);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 47050, 56036);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 47050, 56036);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected bool CheckRefLocalInAsyncOrIteratorMethod(SyntaxToken identifierToken, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 56048, 56583);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56180, 56543) || true) && (f_10318_56184_56201(this))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 56180, 56543);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56235, 56304);

                    f_10318_56235_56303(diagnostics, ErrorCode.ERR_BadAsyncLocalType, identifierToken);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56322, 56334);

                    return true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 56180, 56543);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 56180, 56543);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56368, 56543) || true) && (f_10318_56372_56392())
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 56368, 56543);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56426, 56498);

                        f_10318_56426_56497(diagnostics, ErrorCode.ERR_BadIteratorLocalType, identifierToken);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56516, 56528);

                        return true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 56368, 56543);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 56180, 56543);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 56559, 56572);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 56048, 56583);

                bool
                f_10318_56184_56201(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsInAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 56184, 56201);
                    return return_v;
                }


                int
                f_10318_56235_56303(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 56235, 56303);
                    return 0;
                }


                bool
                f_10318_56372_56392()
                {
                    var return_v = IsDirectlyInIterator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 56372, 56392);
                    return return_v;
                }


                int
                f_10318_56426_56497(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 56426, 56497);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 56048, 56583);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 56048, 56583);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal ImmutableArray<BoundExpression> BindDeclaratorArguments(VariableDeclaratorSyntax declarator, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 56595, 57806);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57315, 57372);

                var
                arguments = default(ImmutableArray<BoundExpression>)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57388, 57762) || true) && (f_10318_57392_57415(declarator) != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 57388, 57762);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57457, 57527);

                    AnalyzedArguments
                    analyzedArguments = f_10318_57495_57526()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57545, 57624);

                    f_10318_57545_57623(this, f_10318_57567_57590(declarator), diagnostics, analyzedArguments);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57642, 57704);

                    arguments = f_10318_57654_57703(this, analyzedArguments);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57722, 57747);

                    f_10318_57722_57746(analyzedArguments);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 57388, 57762);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57778, 57795);

                return arguments;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 56595, 57806);

                Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax?
                f_10318_57392_57415(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 57392, 57415);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                f_10318_57495_57526()
                {
                    var return_v = AnalyzedArguments.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 57495, 57526);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
                f_10318_57567_57590(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 57567, 57590);
                    return return_v;
                }


                int
                f_10318_57545_57623(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
                argumentListOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                result)
                {
                    this_param.BindArgumentsAndNames(argumentListOpt, diagnostics, result);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 57545, 57623);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10318_57654_57703(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                analyzedArguments)
                {
                    var return_v = this_param.BuildArgumentsForErrorRecovery(analyzedArguments);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 57654, 57703);
                    return return_v;
                }


                int
                f_10318_57722_57746(Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 57722, 57746);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 56595, 57806);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 56595, 57806);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private SourceLocalSymbol LocateDeclaredVariableSymbol(VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, LocalDeclarationKind outerKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 57818, 58267);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 57989, 58141);

                LocalDeclarationKind
                kind = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 58017, 58064) || ((outerKind == LocalDeclarationKind.UsingVariable && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 58067, 58101)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 58104, 58140))) ? LocalDeclarationKind.UsingVariable : LocalDeclarationKind.RegularVariable
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 58155, 58256);

                return f_10318_58162_58255(this, f_10318_58191_58212(declarator), typeSyntax, f_10318_58226_58248(declarator), kind);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 57818, 58267);

                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_58191_58212(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 58191, 58212);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax?
                f_10318_58226_58248(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 58226, 58248);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                f_10318_58162_58255(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax?
                equalsValue, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                kind)
                {
                    var return_v = this_param.LocateDeclaredVariableSymbol(identifier, typeSyntax, equalsValue, kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 58162, 58255);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 57818, 58267);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 57818, 58267);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private SourceLocalSymbol LocateDeclaredVariableSymbol(SyntaxToken identifier, TypeSyntax typeSyntax, EqualsValueClauseSyntax equalsValue, LocalDeclarationKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 58279, 59170);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 58469, 58530);

                SourceLocalSymbol
                localSymbol = f_10318_58501_58529(this, identifier)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 58752, 59124) || true) && ((object)localSymbol == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 58752, 59124);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 58817, 59109);

                    localSymbol = f_10318_58831_59108(f_10318_58881_58905(), this, false, typeSyntax, identifier, kind, equalsValue);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 58752, 59124);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 59140, 59159);

                return localSymbol;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 58279, 59170);

                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                f_10318_58501_58529(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                nameToken)
                {
                    var return_v = this_param.LookupLocal(nameToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 58501, 58529);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_58881_58905()
                {
                    var return_v = ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 58881, 58905);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                f_10318_58831_59108(Microsoft.CodeAnalysis.CSharp.Symbol?
                containingSymbol, Microsoft.CodeAnalysis.CSharp.Binder
                scopeBinder, bool
                allowRefKind, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.SyntaxToken
                identifierToken, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                declarationKind, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax
                initializer)
                {
                    var return_v = SourceLocalSymbol.MakeLocal(containingSymbol, scopeBinder, allowRefKind, typeSyntax, identifierToken, declarationKind, initializer);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 58831, 59108);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 58279, 59170);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 58279, 59170);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private bool IsValidFixedVariableInitializer(TypeSymbol declType, SourceLocalSymbol localSymbol, ref BoundExpression initializerOpt, DiagnosticBag diagnostics)
        {
            Debug.Assert(!ReferenceEquals(declType, null));
            Debug.Assert(declType.IsPointerType());

            if (initializerOpt?.HasAnyErrors != false)
            {
                return false;
            }

            TypeSymbol initializerType = initializerOpt.Type;
            SyntaxNode initializerSyntax = initializerOpt.Syntax;

            if ((object)initializerType == null)
            {
                Error(diagnostics, ErrorCode.ERR_ExprCannotBeFixed, initializerSyntax);
                return false;
            }

            TypeSymbol elementType;
            bool hasErrors = false;
            MethodSymbol fixedPatternMethod = null;

            switch (initializerOpt.Kind)
            {
                case BoundKind.AddressOfOperator:
                    elementType = ((BoundAddressOfOperator)initializerOpt).Operand.Type;
                    break;

                case BoundKind.FieldAccess:
                    var fa = (BoundFieldAccess)initializerOpt;
                    if (fa.FieldSymbol.IsFixedSizeBuffer)
                    {
                        elementType = ((PointerTypeSymbol)fa.Type).PointedAtType;
                        break;
                    }

                    goto default;

                default:
                    //  fixed (T* variable = <expr>) ...

                    // check for arrays
                    if (initializerType.IsArray())
                    {
                        // See ExpressionBinder::BindPtrToArray (though most of that functionality is now in LocalRewriter).
                        elementType = ((ArrayTypeSymbol)initializerType).ElementType;
                        break;
                    }

                    // check for a special ref-returning method
                    var additionalDiagnostics = DiagnosticBag.GetInstance();
                    fixedPatternMethod = GetFixedPatternMethodOpt(initializerOpt, additionalDiagnostics);

                    // check for String
                    // NOTE: We will allow the pattern method to take precedence, but only if it is an instance member of System.String
                    if (initializerType.SpecialType == SpecialType.System_String &&
                        ((object)fixedPatternMethod == null || fixedPatternMethod.ContainingType.SpecialType != SpecialType.System_String))
                    {
                        fixedPatternMethod = null;
                        elementType = this.GetSpecialType(SpecialType.System_Char, diagnostics, initializerSyntax);
                        additionalDiagnostics.Free();
                        break;
                    }

                    // if the feature was enabled, but something went wrong with the method, report that, otherwise don't.
                    // If feature is not enabled, additional errors would be just noise.
                    bool extensibleFixedEnabled = ((CSharpParseOptions)initializerOpt.SyntaxTree.Options)?.IsFeatureEnabled(MessageID.IDS_FeatureExtensibleFixedStatement) != false;
                    if (extensibleFixedEnabled)
                    {
                        diagnostics.AddRange(additionalDiagnostics);
                    }

                    additionalDiagnostics.Free();

                    if ((object)fixedPatternMethod != null)
                    {
                        elementType = fixedPatternMethod.ReturnType;
                        CheckFeatureAvailability(initializerOpt.Syntax, MessageID.IDS_FeatureExtensibleFixedStatement, diagnostics);
                        break;
                    }
                    else
                    {
                        Error(diagnostics, ErrorCode.ERR_ExprCannotBeFixed, initializerSyntax);
                        return false;
                    }
            }

            if (CheckManagedAddr(Compilation, elementType, initializerSyntax.Location, diagnostics))
            {
                hasErrors = true;
            }

            initializerOpt = BindToNaturalType(initializerOpt, diagnostics, reportNoTargetType: false);
            initializerOpt = GetFixedLocalCollectionInitializer(initializerOpt, elementType, declType, fixedPatternMethod, hasErrors, diagnostics);
            return true;
        }

        private MethodSymbol GetFixedPatternMethodOpt(BoundExpression initializer, DiagnosticBag additionalDiagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 63734, 64949);
                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol patternMethodSymbol = default(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 63870, 63964) || true) && (f_10318_63874_63903(f_10318_63874_63890(initializer)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 63870, 63964);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 63937, 63949);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 63870, 63964);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 63980, 64029);

                const string
                methodName = "GetPinnableReference"
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64045, 64182);

                var
                result = f_10318_64058_64181(this, initializer, methodName, initializer.Syntax, additionalDiagnostics, out patternMethodSymbol)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64198, 64290) || true) && (patternMethodSymbol is null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 64198, 64290);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64263, 64275);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 64198, 64290);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64306, 64895) || true) && (f_10318_64310_64362(patternMethodSymbol) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 64310, 64414) || f_10318_64383_64414(patternMethodSymbol)) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 64310, 64484) || !f_10318_64436_64484(f_10318_64436_64463(patternMethodSymbol))) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 64310, 64622) || !(f_10318_64507_64541(patternMethodSymbol) == 0 || (DynAbs.Tracing.TraceSender.Expression_False(10318, 64507, 64621) || f_10318_64550_64578(patternMethodSymbol) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 64550, 64621) && f_10318_64582_64616(patternMethodSymbol) == 1)))))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 64306, 64895);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64712, 64850);

                    f_10318_64712_64849(                // the method does not fit the pattern
                                    additionalDiagnostics, ErrorCode.WRN_PatternBadSignature, f_10318_64773_64800(initializer.Syntax), f_10318_64802_64818(initializer), "fixed", patternMethodSymbol);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64868, 64880);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 64306, 64895);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 64911, 64938);

                return patternMethodSymbol;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 63734, 64949);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_63874_63890(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 63874, 63890);
                    return return_v;
                }


                bool
                f_10318_63874_63903(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 63874, 63903);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.PatternLookupResult
                f_10318_64058_64181(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                receiver, string
                methodName, Microsoft.CodeAnalysis.SyntaxNode
                syntaxNode, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                result)
                {
                    var return_v = this_param.PerformPatternMethodLookup(receiver, methodName, syntaxNode, diagnostics, out result);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 64058, 64181);
                    return return_v;
                }


                bool
                f_10318_64310_64362(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method)
                {
                    var return_v = HasOptionalOrVariableParameters(method);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 64310, 64362);
                    return return_v;
                }


                bool
                f_10318_64383_64414(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ReturnsVoid;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64383, 64414);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_64436_64463(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64436, 64463);
                    return return_v;
                }


                bool
                f_10318_64436_64484(Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = refKind.IsManagedReference();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 64436, 64484);
                    return return_v;
                }


                int
                f_10318_64507_64541(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64507, 64541);
                    return return_v;
                }


                bool
                f_10318_64550_64578(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64550, 64578);
                    return return_v;
                }


                int
                f_10318_64582_64616(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64582, 64616);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_64773_64800(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64773, 64800);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_64802_64818(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 64802, 64818);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_64712_64849(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    var return_v = diagnostics.Add(code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 64712, 64849);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 63734, 64949);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 63734, 64949);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression GetFixedLocalCollectionInitializer(
                    BoundExpression initializer,
                    TypeSymbol elementType,
                    TypeSymbol declType,
                    MethodSymbol patternMethodOpt,
                    bool hasErrors,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 65189, 66557);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65499, 65533);

                f_10318_65499_65532(initializer != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65549, 65599);

                SyntaxNode
                initializerSyntax = initializer.Syntax
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65615, 65703);

                TypeSymbol
                pointerType = f_10318_65640_65702(TypeWithAnnotations.Create(elementType))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65717, 65767);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65781, 65903);

                Conversion
                elementConversion = f_10318_65812_65902(f_10318_65812_65828(this), pointerType, declType, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65917, 65972);

                f_10318_65917_65971(diagnostics, initializerSyntax, useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 65988, 66259) || true) && (f_10318_65992_66018_M(!elementConversion.IsValid) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 65992, 66051) || f_10318_66022_66051_M(!elementConversion.IsImplicit)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 65988, 66259);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66085, 66209);

                    f_10318_66085_66208(diagnostics, f_10318_66130_66146(this), initializerSyntax, elementConversion, pointerType, declType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66227, 66244);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 65988, 66259);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66275, 66546);

                return f_10318_66282_66545(initializerSyntax, pointerType, elementConversion, initializer, patternMethodOpt, declType, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 65189, 66557);

                int
                f_10318_65499_65532(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 65499, 65532);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PointerTypeSymbol
                f_10318_65640_65702(Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                pointedAtType)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.Symbols.PointerTypeSymbol(pointedAtType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 65640, 65702);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_65812_65828(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 65812, 65828);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_65812_65902(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromType(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 65812, 65902);
                    return return_v;
                }


                bool
                f_10318_65917_65971(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 65917, 65971);
                    return return_v;
                }


                bool
                f_10318_65992_66018_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 65992, 66018);
                    return return_v;
                }


                bool
                f_10318_66022_66051_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66022, 66051);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_66130_66146(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66130, 66146);
                    return return_v;
                }


                int
                f_10318_66085_66208(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                sourceType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    GenerateImplicitConversionError(diagnostics, compilation, syntax, conversion, sourceType, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66085, 66208);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundFixedLocalCollectionInitializer
                f_10318_66282_66545(Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                elementPointerType, Microsoft.CodeAnalysis.CSharp.Conversion
                elementPointerTypeConversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                getPinnableOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundFixedLocalCollectionInitializer(syntax, elementPointerType, elementPointerTypeConversion, expression, getPinnableOpt, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66282, 66545);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 65189, 66557);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 65189, 66557);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindAssignment(AssignmentExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 66569, 68833);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66692, 66719);

                f_10318_66692_66718(node != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66733, 66765);

                f_10318_66733_66764(f_10318_66746_66755(node) != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66779, 66812);

                f_10318_66779_66811(f_10318_66792_66802(node) != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66828, 66889);

                f_10318_66828_66888(f_10318_66828_66837(node), diagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 66905, 67105) || true) && (f_10318_66909_66925(f_10318_66909_66918(node)) == SyntaxKind.TupleExpression || (DynAbs.Tracing.TraceSender.Expression_False(10318, 66909, 67011) || f_10318_66959_66975(f_10318_66959_66968(node)) == SyntaxKind.DeclarationExpression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 66905, 67105);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67045, 67090);

                    return f_10318_67052_67089(this, node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 66905, 67105);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67121, 67143);

                BindValueKind
                lhsKind
                = default(BindValueKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67157, 67179);

                BindValueKind
                rhsKind
                = default(BindValueKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67193, 67218);

                ExpressionSyntax
                rhsExpr
                = default(ExpressionSyntax);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67232, 67251);

                bool
                isRef = false
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67267, 67755) || true) && (f_10318_67271_67288(f_10318_67271_67281(node)) == SyntaxKind.RefExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 67267, 67755);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67350, 67363);

                    isRef = true;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67381, 67419);

                    lhsKind = BindValueKind.RefAssignable;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67437, 67478);

                    rhsKind = BindValueKind.RefersToLocation;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67496, 67551);

                    rhsExpr = f_10318_67506_67550(((RefExpressionSyntax)f_10318_67528_67538(node)));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 67267, 67755);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 67267, 67755);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67617, 67652);

                    lhsKind = BindValueKind.Assignable;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67670, 67701);

                    rhsKind = BindValueKind.RValue;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67719, 67740);

                    rhsExpr = f_10318_67729_67739(node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 67267, 67755);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67771, 67824);

                var
                op1 = f_10318_67781_67823(this, f_10318_67791_67800(node), diagnostics, lhsKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67838, 67882);

                f_10318_67838_67881(this, op1, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 67898, 67928);

                var
                lhsRefKind = RefKind.None
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68052, 68430) || true) && (lhsKind == BindValueKind.RefAssignable && (DynAbs.Tracing.TraceSender.Expression_True(10318, 68056, 68112) && f_10318_68098_68112_M(!op1.HasErrors)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 68052, 68430);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68212, 68242);

                    lhsRefKind = f_10318_68225_68241(op1);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68260, 68415) || true) && (lhsRefKind == RefKind.Ref || (DynAbs.Tracing.TraceSender.Expression_False(10318, 68264, 68318) || lhsRefKind == RefKind.Out))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 68260, 68415);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68360, 68396);

                        rhsKind |= BindValueKind.Assignable;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 68260, 68415);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 68052, 68430);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68446, 68497);

                var
                op2 = f_10318_68456_68496(this, rhsExpr, diagnostics, rhsKind)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68513, 68748) || true) && (f_10318_68517_68525(op1) == BoundKind.DiscardExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 68513, 68748);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68590, 68632);

                    op2 = f_10318_68596_68631(this, op2, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68650, 68733);

                    op1 = f_10318_68656_68732(this, op1, op2, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 68513, 68748);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68764, 68822);

                return f_10318_68771_68821(this, node, op1, op2, isRef, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 66569, 68833);

                int
                f_10318_66692_66718(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66692, 66718);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_66746_66755(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66746, 66755);
                    return return_v;
                }


                int
                f_10318_66733_66764(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66733, 66764);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_66792_66802(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66792, 66802);
                    return return_v;
                }


                int
                f_10318_66779_66811(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66779, 66811);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_66828_66837(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66828, 66837);
                    return return_v;
                }


                int
                f_10318_66828_66888(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    expression.CheckDeconstructionCompatibleArgument(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66828, 66888);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_66909_66918(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66909, 66918);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_66909_66925(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66909, 66925);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_66959_66968(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 66959, 66968);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_66959_66975(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 66959, 66975);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_67052_67089(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindDeconstruction(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 67052, 67089);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_67271_67281(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 67271, 67281);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_67271_67288(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 67271, 67288);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_67528_67538(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 67528, 67538);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_67506_67550(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 67506, 67550);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_67729_67739(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 67729, 67739);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_67791_67800(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Left;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 67791, 67800);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_67781_67823(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 67781, 67823);
                    return return_v;
                }


                int
                f_10318_67838_67881(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportSuppressionIfNeeded(expr, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 67838, 67881);
                    return 0;
                }


                bool
                f_10318_68098_68112_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 68098, 68112);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_68225_68241(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.GetRefKind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 68225, 68241);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_68456_68496(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 68456, 68496);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_68517_68525(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 68517, 68525);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_68596_68631(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 68596, 68631);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_68656_68732(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                op1, Microsoft.CodeAnalysis.CSharp.BoundExpression
                op2, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.InferTypeForDiscardAssignment((Microsoft.CodeAnalysis.CSharp.BoundDiscardExpression)op1, op2, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 68656, 68732);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator
                f_10318_68771_68821(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.BoundExpression
                op1, Microsoft.CodeAnalysis.CSharp.BoundExpression
                op2, bool
                isRef, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindAssignment((Microsoft.CodeAnalysis.SyntaxNode)node, op1, op2, isRef, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 68771, 68821);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 66569, 68833);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 66569, 68833);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression InferTypeForDiscardAssignment(BoundDiscardExpression op1, BoundExpression op2, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 68845, 69438);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 68999, 69027);

                var
                inferredType = f_10318_69018_69026(op2)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69041, 69166) || true) && ((object)inferredType == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 69041, 69166);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69107, 69151);

                    return f_10318_69114_69150(op1, this, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 69041, 69166);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69182, 69327) || true) && (f_10318_69186_69211(inferredType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 69182, 69327);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69245, 69312);

                    f_10318_69245_69311(diagnostics, ErrorCode.ERR_VoidAssignment, f_10318_69291_69310(op1.Syntax));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 69182, 69327);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69343, 69427);

                return f_10318_69350_69426(op1, TypeWithAnnotations.Create(inferredType));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 68845, 69438);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_69018_69026(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 69018, 69026);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundDiscardExpression
                f_10318_69114_69150(Microsoft.CodeAnalysis.CSharp.BoundDiscardExpression
                this_param, Microsoft.CodeAnalysis.CSharp.Binder
                binder, Microsoft.CodeAnalysis.DiagnosticBag
                diagnosticsOpt)
                {
                    var return_v = this_param.FailInference(binder, diagnosticsOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69114, 69150);
                    return return_v;
                }


                bool
                f_10318_69186_69211(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69186, 69211);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_69291_69310(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 69291, 69310);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_69245_69311(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69245, 69311);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_69350_69426(Microsoft.CodeAnalysis.CSharp.BoundDiscardExpression
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                type)
                {
                    var return_v = this_param.SetInferredTypeWithAnnotations(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69350, 69426);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 68845, 69438);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 68845, 69438);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundAssignmentOperator BindAssignment(
                    SyntaxNode node,
                    BoundExpression op1,
                    BoundExpression op2,
                    bool isRef,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 69450, 72257);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69685, 69711);

                f_10318_69685_69710(op1 != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69725, 69751);

                f_10318_69725_69750(op2 != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69767, 69821);

                bool
                hasErrors = f_10318_69784_69800(op1) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 69784, 69820) || f_10318_69804_69820(op2))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 69837, 71691) || true) && (f_10318_69841_69858_M(!op1.HasAnyErrors))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 69837, 71691);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70059, 70160);

                    var
                    conversion = f_10318_70076_70159(this, f_10318_70108_70116(op1), op2, diagnostics, isRefAssignment: isRef)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70443, 70834) || true) && (f_10318_70447_70455(op1) != BoundKind.DynamicIndexerAccess && (DynAbs.Tracing.TraceSender.Expression_True(10318, 70447, 70555) && f_10318_70514_70522(op1) != BoundKind.DynamicMemberAccess) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 70447, 70632) && f_10318_70580_70588(op1) != BoundKind.DynamicObjectInitializerMember))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 70443, 70834);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70674, 70691);

                        op2 = conversion;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 70443, 70834);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 70443, 70834);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70773, 70815);

                        op2 = f_10318_70779_70814(this, op2, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 70443, 70834);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70854, 71324) || true) && (isRef)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 70854, 71324);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70905, 70957);

                        var
                        leftEscape = f_10318_70922_70956(op1, f_10318_70940_70955())
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 70979, 71032);

                        var
                        rightEscape = f_10318_70997_71031(op2, f_10318_71015_71030())
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71054, 71305) || true) && (leftEscape < rightEscape)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 71054, 71305);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71132, 71229);

                            f_10318_71132_71228(diagnostics, ErrorCode.ERR_RefAssignNarrower, node, f_10318_71190_71215(f_10318_71190_71210(op1)), op2.Syntax);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71255, 71282);

                            op2 = f_10318_71261_71281(this, op2);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 71054, 71305);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 70854, 71324);
                    }

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71344, 71572) || true) && (f_10318_71348_71370(f_10318_71348_71356(op1)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 71344, 71572);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71412, 71464);

                        var
                        leftEscape = f_10318_71429_71463(op1, f_10318_71447_71462())
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71486, 71553);

                        op2 = f_10318_71492_71552(this, op2, leftEscape, isByRef: false, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 71344, 71572);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 69837, 71691);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 69837, 71691);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71638, 71676);

                    op2 = f_10318_71644_71675(this, op2);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 69837, 71691);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71707, 71723);

                TypeSymbol
                type
                = default(TypeSymbol);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71737, 72155) || true) && ((f_10318_71742_71750(op1) == BoundKind.EventAccess) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 71741, 71854) && f_10318_71797_71854(f_10318_71797_71832(((BoundEventAccess)op1)))))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 71737, 72155);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 71987, 72058);

                    type = f_10318_71994_72057(this, SpecialType.System_Void, diagnostics, node);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 71737, 72155);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 71737, 72155);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72124, 72140);

                    type = f_10318_72131_72139(op1);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 71737, 72155);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72171, 72246);

                return f_10318_72178_72245(node, op1, op2, isRef, type, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 69450, 72257);

                int
                f_10318_69685_69710(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69685, 69710);
                    return 0;
                }


                int
                f_10318_69725_69750(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 69725, 69750);
                    return 0;
                }


                bool
                f_10318_69784_69800(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 69784, 69800);
                    return return_v;
                }


                bool
                f_10318_69804_69820(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 69804, 69820);
                    return return_v;
                }


                bool
                f_10318_69841_69858_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 69841, 69858);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_70108_70116(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 70108, 70116);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_70076_70159(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                targetType, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                isRefAssignment)
                {
                    var return_v = this_param.GenerateConversionForAssignment(targetType, expression, diagnostics, isRefAssignment: isRefAssignment);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 70076, 70159);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_70447_70455(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 70447, 70455);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_70514_70522(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 70514, 70522);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_70580_70588(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 70580, 70588);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_70779_70814(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 70779, 70814);
                    return return_v;
                }


                uint
                f_10318_70940_70955()
                {
                    var return_v = LocalScopeDepth;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 70940, 70955);
                    return return_v;
                }


                uint
                f_10318_70922_70956(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                scopeOfTheContainingExpression)
                {
                    var return_v = GetRefEscape(expr, scopeOfTheContainingExpression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 70922, 70956);
                    return return_v;
                }


                uint
                f_10318_71015_71030()
                {
                    var return_v = LocalScopeDepth;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71015, 71030);
                    return return_v;
                }


                uint
                f_10318_70997_71031(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                scopeOfTheContainingExpression)
                {
                    var return_v = GetRefEscape(expr, scopeOfTheContainingExpression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 70997, 71031);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_71190_71210(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ExpressionSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71190, 71210);
                    return return_v;
                }


                string
                f_10318_71190_71215(Microsoft.CodeAnalysis.CSharp.Symbol?
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71190, 71215);
                    return return_v;
                }


                int
                f_10318_71132_71228(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71132, 71228);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_71261_71281(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr)
                {
                    var return_v = this_param.ToBadExpression(expr);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71261, 71281);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_71348_71356(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71348, 71356);
                    return return_v;
                }


                bool
                f_10318_71348_71370(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                this_param)
                {
                    var return_v = this_param.IsRefLikeType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71348, 71370);
                    return return_v;
                }


                uint
                f_10318_71447_71462()
                {
                    var return_v = LocalScopeDepth;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71447, 71462);
                    return return_v;
                }


                uint
                f_10318_71429_71463(Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                scopeOfTheContainingExpression)
                {
                    var return_v = GetValEscape(expr, scopeOfTheContainingExpression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71429, 71463);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_71492_71552(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                escapeTo, bool
                isByRef, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateEscape(expr, escapeTo, isByRef: isByRef, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71492, 71552);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_71644_71675(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71644, 71675);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_71742_71750(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71742, 71750);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                f_10318_71797_71832(Microsoft.CodeAnalysis.CSharp.BoundEventAccess
                this_param)
                {
                    var return_v = this_param.EventSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71797, 71832);
                    return return_v;
                }


                bool
                f_10318_71797_71854(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.IsWindowsRuntimeEvent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 71797, 71854);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_71994_72057(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 71994, 72057);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_72131_72139(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 72131, 72139);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator
                f_10318_72178_72245(Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                left, Microsoft.CodeAnalysis.CSharp.BoundExpression
                right, bool
                isRef, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                type, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator(syntax, left, right, isRef, type, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 72178, 72245);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 69450, 72257);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 69450, 72257);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static PropertySymbol GetPropertySymbol(BoundExpression expr, out BoundExpression receiver, out SyntaxNode propertySyntax)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 72269, 74649);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72424, 72454);

                PropertySymbol
                propertySymbol
                = default(PropertySymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72468, 73734);

                switch (f_10318_72476_72485(expr))
                {

                    case BoundKind.PropertyAccess:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 72468, 73734);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72598, 72645);

                            var
                            propertyAccess = (BoundPropertyAccess)expr
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72671, 72709);

                            receiver = f_10318_72682_72708(propertyAccess);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72735, 72782);

                            propertySymbol = f_10318_72752_72781(propertyAccess);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 72827, 72833);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 72468, 73734);

                    case BoundKind.IndexerAccess:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 72468, 73734);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 72929, 72974);

                            var
                            indexerAccess = (BoundIndexerAccess)expr
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73000, 73037);

                            receiver = f_10318_73011_73036(indexerAccess);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73063, 73102);

                            propertySymbol = f_10318_73080_73101(indexerAccess);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 73147, 73153);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 72468, 73734);

                    case BoundKind.IndexOrRangePatternIndexerAccess:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 72468, 73734);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73268, 73333);

                            var
                            patternIndexer = (BoundIndexOrRangePatternIndexerAccess)expr
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73359, 73394);

                            receiver = f_10318_73370_73393(patternIndexer);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73420, 73482);

                            propertySymbol = (PropertySymbol)f_10318_73453_73481(patternIndexer);
                        }
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 73527, 73533);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 72468, 73734);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 72468, 73734);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73581, 73597);

                        receiver = null;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73619, 73641);

                        propertySymbol = null;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73663, 73685);

                        propertySyntax = null;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73707, 73719);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 72468, 73734);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73750, 73775);

                var
                syntax = expr.Syntax
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73789, 74600);

                switch (f_10318_73797_73810(syntax))
                {

                    case SyntaxKind.SimpleMemberAccessExpression:
                    case SyntaxKind.PointerMemberAccessExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 73789, 74600);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 73975, 74036);

                        propertySyntax = f_10318_73992_74035(((MemberAccessExpressionSyntax)syntax));
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 74058, 74064);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 73789, 74600);

                    case SyntaxKind.IdentifierName:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 73789, 74600);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74135, 74159);

                        propertySyntax = syntax;
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 74181, 74187);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 73789, 74600);

                    case SyntaxKind.ElementAccessExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 73789, 74600);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74267, 74337);

                        propertySyntax = f_10318_74284_74336(((ElementAccessExpressionSyntax)syntax));
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 74359, 74365);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 73789, 74600);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 73789, 74600);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74533, 74557);

                        propertySyntax = syntax;
                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 74579, 74585);

                        break;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 73789, 74600);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74616, 74638);

                return propertySymbol;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 72269, 74649);

                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_72476_72485(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 72476, 72485);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_72682_72708(Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 72682, 72708);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10318_72752_72781(Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess
                this_param)
                {
                    var return_v = this_param.PropertySymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 72752, 72781);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_73011_73036(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 73011, 73036);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10318_73080_73101(Microsoft.CodeAnalysis.CSharp.BoundIndexerAccess
                this_param)
                {
                    var return_v = this_param.Indexer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 73080, 73101);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_73370_73393(Microsoft.CodeAnalysis.CSharp.BoundIndexOrRangePatternIndexerAccess
                this_param)
                {
                    var return_v = this_param.Receiver;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 73370, 73393);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_73453_73481(Microsoft.CodeAnalysis.CSharp.BoundIndexOrRangePatternIndexerAccess
                this_param)
                {
                    var return_v = this_param.PatternSymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 73453, 73481);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_73797_73810(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 73797, 73810);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                f_10318_73992_74035(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 73992, 74035);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax
                f_10318_74284_74336(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 74284, 74336);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 72269, 74649);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 72269, 74649);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static SyntaxNode GetEventName(BoundEventAccess expr)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 74661, 75564);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74747, 74779);

                SyntaxNode
                syntax = expr.Syntax
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74793, 75553);

                switch (f_10318_74801_74814(syntax))
                {

                    case SyntaxKind.SimpleMemberAccessExpression:
                    case SyntaxKind.PointerMemberAccessExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 74793, 75553);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 74979, 75030);

                        return f_10318_74986_75029(((MemberAccessExpressionSyntax)syntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 74793, 75553);

                    case SyntaxKind.QualifiedName:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 74793, 75553);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75174, 75217);

                        return f_10318_75181_75216(((QualifiedNameSyntax)syntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 74793, 75553);

                    case SyntaxKind.IdentifierName:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 74793, 75553);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75288, 75302);

                        return syntax;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 74793, 75553);

                    case SyntaxKind.MemberBindingExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 74793, 75553);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75382, 75434);

                        return f_10318_75389_75433(((MemberBindingExpressionSyntax)syntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 74793, 75553);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 74793, 75553);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75482, 75538);

                        throw f_10318_75488_75537(f_10318_75523_75536(syntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 74793, 75553);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 74661, 75564);

                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_74801_74814(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 74801, 74814);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                f_10318_74986_75029(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 74986, 75029);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                f_10318_75181_75216(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 75181, 75216);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                f_10318_75389_75433(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Name;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 75389, 75433);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_75523_75536(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 75523, 75536);
                    return return_v;
                }


                System.Exception
                f_10318_75488_75537(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 75488, 75537);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 74661, 75564);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 74661, 75564);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private DiagnosticInfo GetBadEventUsageDiagnosticInfo(EventSymbol eventSymbol)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 75757, 76231);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75860, 75953);

                var
                leastOverridden = (EventSymbol)f_10318_75895_75952(eventSymbol, f_10318_75932_75951(this))
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 75967, 76220);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 75974, 76008) || ((f_10318_75974_76008(leastOverridden) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 76028, 76126)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 76146, 76219))) ? f_10318_76028_76126(ErrorCode.ERR_BadEventUsage, leastOverridden, f_10318_76095_76125(leastOverridden)) : f_10318_76146_76219(ErrorCode.ERR_BadEventUsageNoField, leastOverridden);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 75757, 76231);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10318_75932_75951(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 75932, 75951);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_75895_75952(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                member, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                accessingTypeOpt)
                {
                    var return_v = member.GetLeastOverriddenMember(accessingTypeOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 75895, 75952);
                    return return_v;
                }


                bool
                f_10318_75974_76008(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.HasAssociatedField;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 75974, 76008);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_76095_76125(Microsoft.CodeAnalysis.CSharp.Symbols.EventSymbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76095, 76125);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_76028_76126(Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, params object[]
                args)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo(code, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 76028, 76126);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_76146_76219(Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, params object[]
                args)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo(code, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 76146, 76219);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 75757, 76231);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 75757, 76231);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static bool AccessingAutoPropertyFromConstructor(BoundPropertyAccess propertyAccess, Symbol fromMember)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 76243, 76506);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 76380, 76495);

                return f_10318_76387_76494(f_10318_76424_76450(propertyAccess), f_10318_76452_76481(propertyAccess), fromMember);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 76243, 76506);

                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_76424_76450(Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess
                this_param)
                {
                    var return_v = this_param.ReceiverOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76424, 76450);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10318_76452_76481(Microsoft.CodeAnalysis.CSharp.BoundPropertyAccess
                this_param)
                {
                    var return_v = this_param.PropertySymbol;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76452, 76481);
                    return return_v;
                }


                bool
                f_10318_76387_76494(Microsoft.CodeAnalysis.CSharp.BoundExpression?
                receiver, Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                propertySymbol, Microsoft.CodeAnalysis.CSharp.Symbol
                fromMember)
                {
                    var return_v = AccessingAutoPropertyFromConstructor(receiver, propertySymbol, fromMember);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 76387, 76494);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 76243, 76506);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 76243, 76506);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool AccessingAutoPropertyFromConstructor(BoundExpression receiver, PropertySymbol propertySymbol, Symbol fromMember)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 76518, 77539);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 76675, 76955) || true) && (f_10318_76679_76707_M(!propertySymbol.IsDefinition) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 76679, 76855) && f_10318_76711_76855(f_10318_76711_76740(propertySymbol), f_10318_76748_76796(f_10318_76748_76777(propertySymbol)), TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 76675, 76955);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 76889, 76940);

                    propertySymbol = f_10318_76906_76939(propertySymbol);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 76675, 76955);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 76971, 77035);

                var
                sourceProperty = propertySymbol as SourcePropertySymbolBase
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 77049, 77096);

                var
                propertyIsStatic = f_10318_77072_77095(propertySymbol)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 77112, 77528);

                return (object)sourceProperty != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 77119, 77218) && f_10318_77174_77218(sourceProperty)) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 77119, 77355) && f_10318_77243_77355(f_10318_77261_77290(sourceProperty), f_10318_77292_77317(fromMember), TypeCompareKind.ConsiderEverything2)) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 77119, 77440) && f_10318_77380_77440(fromMember, isStatic: propertyIsStatic)) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 77119, 77527) && (propertyIsStatic || (DynAbs.Tracing.TraceSender.Expression_False(10318, 77466, 77526) || f_10318_77486_77499(receiver) == BoundKind.ThisReference)));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 76518, 77539);

                bool
                f_10318_76679_76707_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76679, 76707);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_76711_76740(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76711, 76740);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_76748_76777(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76748, 76777);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_76748_76796(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.OriginalDefinition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76748, 76796);
                    return return_v;
                }


                bool
                f_10318_76711_76855(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                t2, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = this_param.Equals((Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)t2, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 76711, 76855);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                f_10318_76906_76939(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                this_param)
                {
                    var return_v = this_param.OriginalDefinition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 76906, 76939);
                    return return_v;
                }


                bool
                f_10318_77072_77095(Microsoft.CodeAnalysis.CSharp.Symbols.PropertySymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77072, 77095);
                    return return_v;
                }


                bool
                f_10318_77174_77218(Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbolBase
                this_param)
                {
                    var return_v = this_param.IsAutoPropertyWithGetAccessor;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77174, 77218);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_77261_77290(Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertySymbolBase
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77261, 77290);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_77292_77317(Microsoft.CodeAnalysis.CSharp.Symbol
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77292, 77317);
                    return return_v;
                }


                bool
                f_10318_77243_77355(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals((Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)left, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 77243, 77355);
                    return return_v;
                }


                bool
                f_10318_77380_77440(Microsoft.CodeAnalysis.CSharp.Symbol
                member, bool
                isStatic)
                {
                    var return_v = IsConstructorOrField(member, isStatic: isStatic);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 77380, 77440);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_77486_77499(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77486, 77499);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 76518, 77539);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 76518, 77539);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsConstructorOrField(Symbol member, bool isStatic)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 77551, 78248);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 77646, 78237);

                return
                                // LAFHIS
                                ((DynAbs.Tracing.TraceSender.Conditional_F1(10318, 77699, 77723) || (((member is MethodSymbol) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 77726, 77959)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 77962, 77967))) ? f_10318_77726_77759(((MethodSymbol)member)) == ((DynAbs.Tracing.TraceSender.Conditional_F1(10318, 77764, 77772) || ((isStatic && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 77840, 77868)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 77936, 77958))) ? MethodKind.StaticConstructor : MethodKind.Constructor) : false)
                || (DynAbs.Tracing.TraceSender.Expression_False(10318, 77698, 78236) ||                    // LAFHIS
                                                                                                           //(member as FieldSymbol)?.IsStatic == isStatic
                                    ((DynAbs.Tracing.TraceSender.Conditional_F1(10318, 78159, 78182) || (((member is FieldSymbol) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 78185, 78227)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 78230, 78235))) ? f_10318_78185_78215(((FieldSymbol)member)) == isStatic : false));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 77551, 78248);

                Microsoft.CodeAnalysis.MethodKind
                f_10318_77726_77759(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.MethodKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 77726, 77759);
                    return return_v;
                }


                bool
                f_10318_78185_78215(Microsoft.CodeAnalysis.CSharp.Symbols.FieldSymbol
                this_param)
                {
                    var return_v = this_param.IsStatic;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 78185, 78215);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 77551, 78248);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 77551, 78248);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private TypeSymbol GetAccessThroughType(BoundExpression receiver)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 78260, 78853);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78350, 78842) || true) && (receiver == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 78350, 78842);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78404, 78431);

                    return f_10318_78411_78430(this);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 78350, 78842);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 78350, 78842);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78465, 78842) || true) && (f_10318_78469_78482(receiver) == BoundKind.BaseReference)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 78465, 78842);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78666, 78678);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 78465, 78842);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 78465, 78842);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78744, 78788);

                        f_10318_78744_78787((object)f_10318_78765_78778(receiver) != null);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 78806, 78827);

                        return f_10318_78813_78826(receiver);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 78465, 78842);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 78350, 78842);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 78260, 78853);

                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10318_78411_78430(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 78411, 78430);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_78469_78482(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 78469, 78482);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_78765_78778(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 78765, 78778);
                    return return_v;
                }


                int
                f_10318_78744_78787(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 78744, 78787);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_78813_78826(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 78813, 78826);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 78260, 78853);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 78260, 78853);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindPossibleArrayInitializer(
                    ExpressionSyntax node,
                    TypeSymbol destinationType,
                    BindValueKind valueKind,
                    DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 78865, 79924);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79098, 79125);

                f_10318_79098_79124(node != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79141, 79293) || true) && (f_10318_79145_79156(node) != SyntaxKind.ArrayInitializerExpression)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 79141, 79293);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79231, 79278);

                    return f_10318_79238_79277(this, node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 79141, 79293);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79309, 79332);

                BoundExpression
                result
                = default(BoundExpression);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79346, 79847) || true) && (f_10318_79350_79370(destinationType) == SymbolKind.ArrayType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 79346, 79847);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79428, 79639);

                    result = f_10318_79437_79638(this, diagnostics, null, node, destinationType, ImmutableArray<BoundExpression>.Empty);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 79346, 79847);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 79346, 79847);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79705, 79832);

                    result = f_10318_79714_79831(this, node, diagnostics, ErrorCode.ERR_ArrayInitToNonArrayType);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 79346, 79847);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 79863, 79913);

                return f_10318_79870_79912(this, result, valueKind, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 78865, 79924);

                int
                f_10318_79098_79124(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79098, 79124);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_79145_79156(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79145, 79156);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_79238_79277(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79238, 79277);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind
                f_10318_79350_79370(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 79350, 79370);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundArrayCreation
                f_10318_79437_79638(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                creationSyntax, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                initSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                sizes)
                {
                    var return_v = this_param.BindArrayCreationWithInitializer(diagnostics, creationSyntax, (Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)initSyntax, (Microsoft.CodeAnalysis.CSharp.Symbols.ArrayTypeSymbol)type, sizes);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79437, 79638);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundArrayInitialization
                f_10318_79714_79831(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                errorCode)
                {
                    var return_v = this_param.BindUnexpectedArrayInitializer((Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)node, diagnostics, errorCode);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79714, 79831);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_79870_79912(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CheckValue(expr, valueKind, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 79870, 79912);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 78865, 79924);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 78865, 79924);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected virtual SourceLocalSymbol LookupLocal(SyntaxToken nameToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 79936, 80077);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80031, 80066);

                return f_10318_80038_80065(f_10318_80038_80042(), nameToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 79936, 80077);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_80038_80042()
                {
                    var return_v = Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 80038, 80042);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceLocalSymbol
                f_10318_80038_80065(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                nameToken)
                {
                    var return_v = this_param.LookupLocal(nameToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 80038, 80065);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 79936, 80077);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 79936, 80077);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected virtual LocalFunctionSymbol LookupLocalFunction(SyntaxToken nameToken)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 80089, 80248);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80194, 80237);

                return f_10318_80201_80236(f_10318_80201_80205(), nameToken);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 80089, 80248);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_80201_80205()
                {
                    var return_v = Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 80201, 80205);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol
                f_10318_80201_80236(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.SyntaxToken
                nameToken)
                {
                    var return_v = this_param.LookupLocalFunction(nameToken);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 80201, 80236);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 80089, 80248);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 80089, 80248);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual uint LocalScopeDepth
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 80543, 80566);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80546, 80566);
                    return f_10318_80546_80566(f_10318_80546_80550()); DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 80543, 80566);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 80543, 80566);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 80543, 80566);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        internal virtual BoundBlock BindEmbeddedBlock(BlockSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 80579, 80741);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80694, 80730);

                return f_10318_80701_80729(this, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 80579, 80741);

                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_80701_80729(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 80701, 80729);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 80579, 80741);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 80579, 80741);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundBlock BindBlock(BlockSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 80753, 81175);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80851, 81012) || true) && (node.AttributeLists.Count > 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 80851, 81012);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 80918, 80997);

                    f_10318_80918_80996(diagnostics, ErrorCode.ERR_AttributesNotAllowed, f_10318_80973_80992(node)[0]);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 80851, 81012);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81028, 81057);

                var
                binder = f_10318_81041_81056(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81071, 81100);

                f_10318_81071_81099(binder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81116, 81164);

                return f_10318_81123_81163(binder, node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 80753, 81175);

                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax>
                f_10318_80973_80992(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                this_param)
                {
                    var return_v = this_param.AttributeLists;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 80973, 80992);
                    return return_v;
                }


                int
                f_10318_80918_80996(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 80918, 80996);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_81041_81056(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81041, 81056);
                    return return_v;
                }


                int
                f_10318_81071_81099(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81071, 81099);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_81123_81163(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBlockParts(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81123, 81163);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 80753, 81175);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 80753, 81175);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundBlock BindBlockParts(BlockSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 81187, 81837);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81290, 81329);

                var
                syntaxStatements = f_10318_81313_81328(node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81343, 81384);

                int
                nStatements = syntaxStatements.Count
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81400, 81501);

                ArrayBuilder<BoundStatement>
                boundStatements = f_10318_81447_81500(nStatements)
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81526, 81531);

                    for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81517, 81725) || true) && (i < nStatements)
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81550, 81553)
        , i++, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 81517, 81725))

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 81517, 81725);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81587, 81656);

                        var
                        boundStatement = f_10318_81608_81655(this, syntaxStatements[i], diagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81674, 81710);

                        f_10318_81674_81709(boundStatements, boundStatement);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 209);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 209);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 81741, 81826);

                return f_10318_81748_81825(this, node, f_10318_81775_81811(boundStatements), diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 81187, 81837);

                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax>
                f_10318_81313_81328(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                this_param)
                {
                    var return_v = this_param.Statements;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 81313, 81328);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_81447_81500(int
                capacity)
                {
                    var return_v = ArrayBuilder<BoundStatement>.GetInstance(capacity);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81447, 81500);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_81608_81655(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81608, 81655);
                    return return_v;
                }


                int
                f_10318_81674_81709(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param, Microsoft.CodeAnalysis.CSharp.BoundStatement
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81674, 81709);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_81775_81811(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81775, 81811);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_81748_81825(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                boundStatements, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FinishBindBlockParts((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, boundStatements, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 81748, 81825);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 81187, 81837);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 81187, 81837);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundBlock FinishBindBlockParts(CSharpSyntaxNode node, ImmutableArray<BoundStatement> boundStatements, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 81849, 82721);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82011, 82080);

                ImmutableArray<LocalSymbol>
                locals = f_10318_82048_82079(this, node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82096, 82531) || true) && (f_10318_82100_82120())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 82096, 82531);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82154, 82208);

                    var
                    method = f_10318_82167_82191() as MethodSymbol
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82226, 82516) || true) && ((object)method != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 82226, 82516);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82294, 82363);

                        method.IteratorElementTypeWithAnnotations = f_10318_82338_82362(this);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 82226, 82516);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 82226, 82516);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82445, 82497);

                        f_10318_82445_82496(f_10318_82458_82495_M(!diagnostics.IsEmptyWithoutResolution));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 82226, 82516);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 82096, 82531);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82547, 82710);

                return f_10318_82554_82709(node, locals, f_10318_82635_82674(this, node), boundStatements);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 81849, 82721);

                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_82048_82079(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82048, 82079);
                    return return_v;
                }


                bool
                f_10318_82100_82120()
                {
                    var return_v = IsDirectlyInIterator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 82100, 82120);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_82167_82191()
                {
                    var return_v = ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 82167, 82191);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_82338_82362(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.GetIteratorElementType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82338, 82362);
                    return return_v;
                }


                bool
                f_10318_82458_82495_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 82458, 82495);
                    return return_v;
                }


                int
                f_10318_82445_82496(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82445, 82496);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol>
                f_10318_82635_82674(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalFunctionsForScope(scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82635, 82674);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_82554_82709(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalFunctionSymbol>
                localFunctions, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                statements)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBlock((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, localFunctions, statements);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82554, 82709);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 81849, 82721);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 81849, 82721);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundExpression GenerateConversionForAssignment(TypeSymbol targetType, BoundExpression expression, DiagnosticBag diagnostics, bool isDefaultParameter = false, bool isRefAssignment = false)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 82733, 85201);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 82955, 82996);

                f_10318_82955_82995((object)targetType != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83010, 83043);

                f_10318_83010_83042(expression != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83586, 83742) || true) && (f_10318_83590_83613(expression) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 83590, 83659) && f_10318_83617_83632(expression) != BoundKind.UnboundLambda))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 83586, 83742);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83693, 83727);

                    diagnostics = f_10318_83707_83726();
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 83586, 83742);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83758, 83808);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83822, 83937);

                var
                conversion = f_10318_83839_83936(f_10318_83839_83855(this), expression, targetType, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 83951, 84006);

                f_10318_83951_84005(diagnostics, expression.Syntax, useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84022, 85041) || true) && (isRefAssignment)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84022, 85041);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84075, 84387) || true) && (conversion.Kind != ConversionKind.Identity)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84075, 84387);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84163, 84268);

                        f_10318_84163_84267(diagnostics, ErrorCode.ERR_RefAssignmentMustHaveIdentityConversion, expression.Syntax, targetType);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84075, 84387);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84075, 84387);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84350, 84368);

                        return expression;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84075, 84387);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84022, 85041);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84022, 85041);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84421, 85041) || true) && (f_10318_84425_84447_M(!conversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 84425, 84470) || f_10318_84451_84470_M(!conversion.IsValid)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84421, 85041);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84732, 84916) || true) && (!isDefaultParameter)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 84732, 84916);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84797, 84897);

                            f_10318_84797_84896(this, diagnostics, expression.Syntax, conversion, expression, targetType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84732, 84916);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 84992, 85026);

                        diagnostics = f_10318_85006_85025();
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84421, 85041);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 84022, 85041);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85057, 85190);

                return f_10318_85064_85189(this, expression.Syntax, expression, conversion, isCast: false, conversionGroupOpt: null, targetType, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 82733, 85201);

                int
                f_10318_82955_82995(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 82955, 82995);
                    return 0;
                }


                int
                f_10318_83010_83042(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 83010, 83042);
                    return 0;
                }


                bool
                f_10318_83590_83613(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 83590, 83613);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_83617_83632(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 83617, 83632);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_83707_83726()
                {
                    var return_v = new Microsoft.CodeAnalysis.DiagnosticBag();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 83707, 83726);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_83839_83855(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 83839, 83855);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_83839_83936(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 83839, 83936);
                    return return_v;
                }


                bool
                f_10318_83951_84005(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 83951, 84005);
                    return return_v;
                }


                int
                f_10318_84163_84267(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 84163, 84267);
                    return 0;
                }


                bool
                f_10318_84425_84447_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 84425, 84447);
                    return return_v;
                }


                bool
                f_10318_84451_84470_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 84451, 84470);
                    return return_v;
                }


                int
                f_10318_84797_84896(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 84797, 84896);
                    return 0;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_85006_85025()
                {
                    var return_v = new Microsoft.CodeAnalysis.DiagnosticBag();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 85006, 85025);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_85064_85189(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                isCast, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(syntax, source, conversion, isCast: isCast, conversionGroupOpt: conversionGroupOpt, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 85064, 85189);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 82733, 85201);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 82733, 85201);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal void GenerateAnonymousFunctionConversionError(DiagnosticBag diagnostics, SyntaxNode syntax,
                    UnboundLambda anonymousFunction, TypeSymbol targetType)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 85213, 95372);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85407, 85448);

                f_10318_85407_85447((object)targetType != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85462, 85502);

                f_10318_85462_85501(anonymousFunction != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85717, 85801) || true) && (f_10318_85721_85745(targetType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 85717, 85801);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85779, 85786);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 85717, 85801);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 85997, 86091);

                var
                reason = f_10318_86010_86090(anonymousFunction, targetType)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86597, 86697) || true) && (reason == LambdaConversionResult.Success)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 86597, 86697);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86675, 86682);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 86597, 86697);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86713, 86761);

                var
                id = f_10318_86722_86760(f_10318_86722_86749(anonymousFunction))
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86777, 87231) || true) && (reason == LambdaConversionResult.BadTargetType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 86777, 87231);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86861, 87009) || true) && (f_10318_86865_86941(diagnostics, targetType, node: syntax))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 86861, 87009);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 86983, 86990);

                        return;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 86861, 87009);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87116, 87191);

                    f_10318_87116_87190(diagnostics, ErrorCode.ERR_AnonMethToNonDel, syntax, id, targetType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87209, 87216);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 86777, 87231);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87247, 87623) || true) && (reason == LambdaConversionResult.ExpressionTreeMustHaveDelegateTypeArgument)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 87247, 87623);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87360, 87404);

                    f_10318_87360_87403(f_10318_87373_87402(targetType));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87422, 87583);

                    f_10318_87422_87582(diagnostics, ErrorCode.ERR_ExpressionTreeMustHaveDelegate, syntax, f_10318_87495_87573(((NamedTypeSymbol)targetType))[0].Type);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87601, 87608);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 87247, 87623);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87639, 87919) || true) && (reason == LambdaConversionResult.ExpressionTreeFromAnonymousMethod)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 87639, 87919);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87743, 87787);

                    f_10318_87743_87786(f_10318_87756_87785(targetType));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87805, 87879);

                    f_10318_87805_87878(diagnostics, ErrorCode.ERR_AnonymousMethodToExpressionTree, syntax);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 87897, 87904);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 87639, 87919);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 88049, 88097);

                var
                delegateType = f_10318_88068_88096(targetType)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 88321, 89240) || true) && (reason == LambdaConversionResult.MissingSignatureWithOutParameter)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 88321, 89240);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89121, 89200);

                    f_10318_89121_89199(diagnostics, ErrorCode.ERR_CantConvAnonMethNoParams, syntax, targetType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89218, 89225);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 88321, 89240);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89344, 89640) || true) && (reason == LambdaConversionResult.BadParameterCount)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 89344, 89640);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89495, 89600);

                    f_10318_89495_89599(diagnostics, ErrorCode.ERR_BadDelArgCount, syntax, delegateType, f_10318_89566_89598(anonymousFunction));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89618, 89625);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 89344, 89640);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 89929, 90281) || true) && (f_10318_89933_89982(anonymousFunction))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 89929, 90281);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90025, 90030);
                        for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90016, 90266) || true) && (i < f_10318_90036_90068(anonymousFunction))
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90070, 90073)
        , ++i, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 90016, 90266))

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 90016, 90266);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90115, 90247) || true) && (f_10318_90119_90167(f_10318_90119_90153(anonymousFunction, i)))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 90115, 90247);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90217, 90224);

                                return;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 90115, 90247);
                            }
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 251);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 251);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 89929, 90281);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90583, 90642);

                var
                delegateParameters = f_10318_90608_90641(delegateType)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90656, 91341) || true) && (reason == LambdaConversionResult.RefInImplicitlyTypedLambda)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 90656, 91341);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90762, 90767);
                        for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90753, 91301) || true) && (i < f_10318_90773_90805(anonymousFunction))
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90807, 90810)
        , ++i, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 90753, 91301))

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 90753, 91301);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90852, 90904);

                            var
                            delegateRefKind = f_10318_90874_90903(delegateParameters[i])
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 90926, 91282) || true) && (delegateRefKind != RefKind.None)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 90926, 91282);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91093, 91259);

                                f_10318_91093_91258(diagnostics, ErrorCode.ERR_BadParamRef, f_10318_91139_91177(anonymousFunction, i), i + 1, f_10318_91215_91257(delegateRefKind));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 90926, 91282);
                            }
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 549);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 549);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91319, 91326);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 90656, 91341);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91467, 92076) || true) && (reason == LambdaConversionResult.StaticTypeInImplicitlyTypedLambda)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 91467, 92076);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91580, 91585);
                        for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91571, 92036) || true) && (i < f_10318_91591_91623(anonymousFunction))
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91625, 91628)
        , ++i, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 91571, 92036))

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 91571, 92036);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91670, 92017) || true) && (delegateParameters[i].TypeWithAnnotations.IsStatic)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 91670, 92017);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 91848, 91994);

                                f_10318_91848_91993(diagnostics, f_10318_91867_91924(useWarning: false), f_10318_91926_91964(anonymousFunction, i), f_10318_91966_91992(delegateParameters[i]));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 91670, 92017);
                            }
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 466);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 466);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92054, 92061);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 91467, 92076);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92198, 94730) || true) && (reason == LambdaConversionResult.MismatchedParameterType)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 92198, 94730);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92415, 92496);

                    f_10318_92415_92495(diagnostics, ErrorCode.ERR_CantConvAnonMethParams, syntax, id, targetType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92514, 92590);

                    f_10318_92514_92589(f_10318_92527_92559(anonymousFunction) == delegateParameters.Length);
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92617, 92622);
                        for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92608, 94690) || true) && (i < f_10318_92628_92660(anonymousFunction))
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92662, 92665)
        , ++i, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 92608, 94690))

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 92608, 94690);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92707, 92768);

                            var
                            lambdaParameterType = f_10318_92733_92767(anonymousFunction, i)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92790, 92909) || true) && (f_10318_92794_92827(lambdaParameterType))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 92790, 92909);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92877, 92886);

                                continue;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 92790, 92909);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 92933, 93002);

                            var
                            lambdaParameterLocation = f_10318_92963_93001(anonymousFunction, i)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93024, 93073);

                            var
                            lambdaRefKind = f_10318_93044_93072(anonymousFunction, i)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93095, 93150);

                            var
                            delegateParameterType = f_10318_93123_93149(delegateParameters[i])
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93172, 93224);

                            var
                            delegateRefKind = f_10318_93194_93223(delegateParameters[i])
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93248, 94671) || true) && (!f_10318_93253_93336(lambdaParameterType, delegateParameterType, TypeCompareKind.AllIgnoreOptions))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 93248, 94671);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93386, 93508);

                                SymbolDistinguisher
                                distinguisher = f_10318_93422_93507(f_10318_93446_93462(this), lambdaParameterType, delegateParameterType)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93630, 93853);

                                f_10318_93630_93852(diagnostics, ErrorCode.ERR_BadParamType, lambdaParameterLocation, i + 1, f_10318_93738_93771(lambdaRefKind), f_10318_93773_93792(distinguisher), f_10318_93794_93829(delegateRefKind), f_10318_93831_93851(distinguisher));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 93248, 94671);
                            }

                            else
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 93248, 94671);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93903, 94671) || true) && (lambdaRefKind != delegateRefKind)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 93903, 94671);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 93989, 94648) || true) && (delegateRefKind == RefKind.None)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 93989, 94648);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94174, 94299);

                                        f_10318_94174_94298(diagnostics, ErrorCode.ERR_BadParamExtraRef, lambdaParameterLocation, i + 1, f_10318_94257_94297(lambdaRefKind));
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 93989, 94648);
                                    }

                                    else

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 93989, 94648);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94499, 94621);

                                        f_10318_94499_94620(diagnostics, ErrorCode.ERR_BadParamRef, lambdaParameterLocation, i + 1, f_10318_94577_94619(delegateRefKind));
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 93989, 94648);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 93903, 94671);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 93248, 94671);
                            }
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 2083);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 2083);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94708, 94715);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 92198, 94730);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94746, 95100) || true) && (reason == LambdaConversionResult.BindingFailed)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 94746, 95100);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94830, 94887);

                    var
                    bindingResult = f_10318_94850_94886(anonymousFunction, delegateType)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 94905, 94994);

                    f_10318_94905_94993(f_10318_94918_94992(f_10318_94966_94991(bindingResult)));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 95012, 95060);

                    f_10318_95012_95059(diagnostics, f_10318_95033_95058(bindingResult));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 95078, 95085);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 94746, 95100);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 95212, 95285);

                f_10318_95212_95284(false, "Missing case in lambda conversion error reporting");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 95299, 95361);

                f_10318_95299_95360(diagnostics, ErrorCode.ERR_InternalError, f_10318_95344_95359(syntax));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 85213, 95372);

                int
                f_10318_85407_85447(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 85407, 85447);
                    return 0;
                }


                int
                f_10318_85462_85501(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 85462, 85501);
                    return 0;
                }


                bool
                f_10318_85721_85745(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 85721, 85745);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LambdaConversionResult
                f_10318_86010_86090(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                anonymousFunction, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = Conversions.IsAnonymousFunctionCompatibleWithType(anonymousFunction, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 86010, 86090);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.MessageID
                f_10318_86722_86749(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.MessageID;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 86722, 86749);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LocalizableErrorArgument
                f_10318_86722_86760(Microsoft.CodeAnalysis.CSharp.MessageID
                id)
                {
                    var return_v = id.Localize();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 86722, 86760);
                    return return_v;
                }


                bool
                f_10318_86865_86941(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                possibleDelegateType, Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = ReportDelegateInvokeUseSiteDiagnostic(diagnostics, possibleDelegateType, node: node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 86865, 86941);
                    return return_v;
                }


                int
                f_10318_87116_87190(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87116, 87190);
                    return 0;
                }


                bool
                f_10318_87373_87402(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                _type)
                {
                    var return_v = _type.IsExpressionTree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87373, 87402);
                    return return_v;
                }


                int
                f_10318_87360_87403(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87360, 87403);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                f_10318_87495_87573(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                this_param)
                {
                    var return_v = this_param.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 87495, 87573);
                    return return_v;
                }


                int
                f_10318_87422_87582(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87422, 87582);
                    return 0;
                }


                bool
                f_10318_87756_87785(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                _type)
                {
                    var return_v = _type.IsExpressionTree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87756, 87785);
                    return return_v;
                }


                int
                f_10318_87743_87786(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87743, 87786);
                    return 0;
                }


                int
                f_10318_87805_87878(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 87805, 87878);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10318_88068_88096(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.GetDelegateType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 88068, 88096);
                    return return_v;
                }


                int
                f_10318_89121_89199(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 89121, 89199);
                    return 0;
                }


                int
                f_10318_89566_89598(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 89566, 89598);
                    return return_v;
                }


                int
                f_10318_89495_89599(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 89495, 89599);
                    return 0;
                }


                bool
                f_10318_89933_89982(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.HasExplicitlyTypedParameterList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 89933, 89982);
                    return return_v;
                }


                int
                f_10318_90036_90068(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 90036, 90068);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_90119_90153(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.ParameterType(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 90119, 90153);
                    return return_v;
                }


                bool
                f_10318_90119_90167(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 90119, 90167);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>
                f_10318_90608_90641(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                type)
                {
                    var return_v = type.DelegateParameters();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 90608, 90641);
                    return return_v;
                }


                int
                f_10318_90773_90805(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 90773, 90805);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_90874_90903(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 90874, 90903);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_91139_91177(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.ParameterLocation(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91139, 91177);
                    return return_v;
                }


                string
                f_10318_91215_91257(Microsoft.CodeAnalysis.RefKind
                kind)
                {
                    var return_v = kind.ToParameterDisplayString();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91215, 91257);
                    return return_v;
                }


                int
                f_10318_91093_91258(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91093, 91258);
                    return 0;
                }


                int
                f_10318_91591_91623(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 91591, 91623);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.ErrorCode
                f_10318_91867_91924(bool
                useWarning)
                {
                    var return_v = ErrorFacts.GetStaticClassParameterCode(useWarning: useWarning);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91867, 91924);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_91926_91964(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.ParameterLocation(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91926, 91964);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_91966_91992(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 91966, 91992);
                    return return_v;
                }


                int
                f_10318_91848_91993(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 91848, 91993);
                    return 0;
                }


                int
                f_10318_92415_92495(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 92415, 92495);
                    return 0;
                }


                int
                f_10318_92527_92559(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 92527, 92559);
                    return return_v;
                }


                int
                f_10318_92514_92589(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 92514, 92589);
                    return 0;
                }


                int
                f_10318_92628_92660(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param)
                {
                    var return_v = this_param.ParameterCount;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 92628, 92660);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_92733_92767(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.ParameterType(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 92733, 92767);
                    return return_v;
                }


                bool
                f_10318_92794_92827(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 92794, 92827);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_92963_93001(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.ParameterLocation(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 92963, 93001);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_93044_93072(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, int
                index)
                {
                    var return_v = this_param.RefKind(index);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93044, 93072);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_93123_93149(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 93123, 93149);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_93194_93223(Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 93194, 93223);
                    return return_v;
                }


                bool
                f_10318_93253_93336(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                t2, Microsoft.CodeAnalysis.TypeCompareKind
                compareKind)
                {
                    var return_v = this_param.Equals(t2, compareKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93253, 93336);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_93446_93462(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 93446, 93462);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                f_10318_93422_93507(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol0, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol1)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher(compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol0, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol1);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93422, 93507);
                    return return_v;
                }


                string
                f_10318_93738_93771(Microsoft.CodeAnalysis.RefKind
                kind)
                {
                    var return_v = kind.ToParameterPrefix();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93738, 93771);
                    return return_v;
                }


                System.IFormattable
                f_10318_93773_93792(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.First;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 93773, 93792);
                    return return_v;
                }


                string
                f_10318_93794_93829(Microsoft.CodeAnalysis.RefKind
                kind)
                {
                    var return_v = kind.ToParameterPrefix();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93794, 93829);
                    return return_v;
                }


                System.IFormattable
                f_10318_93831_93851(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.Second;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 93831, 93851);
                    return return_v;
                }


                int
                f_10318_93630_93852(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 93630, 93852);
                    return 0;
                }


                string
                f_10318_94257_94297(Microsoft.CodeAnalysis.RefKind
                kind)
                {
                    var return_v = kind.ToParameterDisplayString();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94257, 94297);
                    return return_v;
                }


                int
                f_10318_94174_94298(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94174, 94298);
                    return 0;
                }


                string
                f_10318_94577_94619(Microsoft.CodeAnalysis.RefKind
                kind)
                {
                    var return_v = kind.ToParameterDisplayString();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94577, 94619);
                    return return_v;
                }


                int
                f_10318_94499_94620(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94499, 94620);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLambda
                f_10318_94850_94886(Microsoft.CodeAnalysis.CSharp.UnboundLambda
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                delegateType)
                {
                    var return_v = this_param.Bind(delegateType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94850, 94886);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                f_10318_94966_94991(Microsoft.CodeAnalysis.CSharp.BoundLambda
                this_param)
                {
                    var return_v = this_param.Diagnostics;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 94966, 94991);
                    return return_v;
                }


                bool
                f_10318_94918_94992(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                diagnostics)
                {
                    var return_v = ErrorFacts.PreventsSuccessfulDelegateConversion(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94918, 94992);
                    return return_v;
                }


                int
                f_10318_94905_94993(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 94905, 94993);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                f_10318_95033_95058(Microsoft.CodeAnalysis.CSharp.BoundLambda
                this_param)
                {
                    var return_v = this_param.Diagnostics;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 95033, 95058);
                    return return_v;
                }


                int
                f_10318_95012_95059(Microsoft.CodeAnalysis.DiagnosticBag
                this_param, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>
                diagnostics)
                {
                    this_param.AddRange<Microsoft.CodeAnalysis.Diagnostic>(diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 95012, 95059);
                    return 0;
                }


                int
                f_10318_95212_95284(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 95212, 95284);
                    return 0;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_95344_95359(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 95344, 95359);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_95299_95360(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 95299, 95360);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 85213, 95372);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 85213, 95372);
            }
        }

        protected static void GenerateImplicitConversionError(DiagnosticBag diagnostics, CSharpCompilation compilation, SyntaxNode syntax,
                    Conversion conversion, TypeSymbol sourceType, TypeSymbol targetType, ConstantValue sourceConstantValueOpt = null)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 95384, 100188);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 95666, 95726);

                f_10318_95666_95725(f_10318_95679_95701_M(!conversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 95679, 95724) || f_10318_95705_95724_M(!conversion.IsValid)));

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 96118, 100177) || true) && (!f_10318_96123_96147(sourceType) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96122, 96176) && !f_10318_96152_96176(targetType)))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96118, 100177);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 96210, 100162) || true) && (conversion.IsExplicit)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96210, 100162);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 96277, 98059) || true) && (f_10318_96281_96303(sourceType) == SpecialType.System_Double && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96281, 96388) && f_10318_96336_96349(syntax) == SyntaxKind.NumericLiteralExpression) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96281, 96526) && (f_10318_96418_96440(targetType) == SpecialType.System_Single || (DynAbs.Tracing.TraceSender.Expression_False(10318, 96418, 96525) || f_10318_96473_96495(targetType) == SpecialType.System_Decimal))))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96277, 98059);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 96576, 96715);

                            f_10318_96576_96714(diagnostics, ErrorCode.ERR_LiteralDoubleCast, syntax, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 96636, 96689) || (((f_10318_96637_96659(targetType) == SpecialType.System_Single) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 96692, 96695)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 96698, 96701))) ? "F" : "M", targetType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96277, 98059);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96277, 98059);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 96765, 98059) || true) && (conversion.Kind == ConversionKind.ExplicitNumeric && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96769, 96852) && sourceConstantValueOpt != null) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96769, 96899) && sourceConstantValueOpt != f_10318_96882_96899()) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 96769, 97052) && f_10318_96928_97052(f_10318_96984_97039(syntax, f_10318_97009_97026(), sourceType), targetType)))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96765, 98059);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 97611, 97711);

                                f_10318_97611_97710(diagnostics, ErrorCode.ERR_ConstOutOfRange, syntax, f_10318_97669_97697(sourceConstantValueOpt), targetType);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96765, 98059);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96765, 98059);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 97809, 97906);

                                SymbolDistinguisher
                                distinguisher = f_10318_97845_97905(compilation, sourceType, targetType)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 97932, 98036);

                                f_10318_97932_98035(diagnostics, ErrorCode.ERR_NoImplicitConvCast, syntax, f_10318_97993_98012(distinguisher), f_10318_98014_98034(distinguisher));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96765, 98059);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96277, 98059);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96210, 100162);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 96210, 100162);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98101, 100162) || true) && (conversion.ResultKind == LookupResultKind.OverloadResolutionFailure)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 98101, 100162);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98214, 98253);

                            f_10318_98214_98252(conversion.IsUserDefined);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98277, 98381);

                            ImmutableArray<MethodSymbol>
                            originalUserDefinedConversions = conversion.OriginalUserDefinedConversions
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98403, 99202) || true) && (originalUserDefinedConversions.Length > 1)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 98403, 99202);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98498, 98646);

                                f_10318_98498_98645(diagnostics, ErrorCode.ERR_AmbigUDConv, syntax, originalUserDefinedConversions[0], originalUserDefinedConversions[1], sourceType, targetType);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 98403, 99202);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 98403, 99202);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98744, 98930);

                                f_10318_98744_98929(originalUserDefinedConversions.Length == 0, "How can there be exactly one applicable user-defined conversion if the conversion doesn't exist?");
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 98956, 99053);

                                SymbolDistinguisher
                                distinguisher = f_10318_98992_99052(compilation, sourceType, targetType)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 99079, 99179);

                                f_10318_99079_99178(diagnostics, ErrorCode.ERR_NoImplicitConv, syntax, f_10318_99136_99155(distinguisher), f_10318_99157_99177(distinguisher));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 98403, 99202);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 98101, 100162);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 98101, 100162);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 99244, 100162) || true) && (f_10318_99248_99326(sourceType, targetType, TypeCompareKind.ConsiderEverything2))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 99244, 100162);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 99761, 99842);

                                f_10318_99761_99841(diagnostics, ErrorCode.ERR_NoImplicitConv, syntax, sourceType, targetType);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 99244, 100162);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 99244, 100162);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 99924, 100021);

                                SymbolDistinguisher
                                distinguisher = f_10318_99960_100020(compilation, sourceType, targetType)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100043, 100143);

                                f_10318_100043_100142(diagnostics, ErrorCode.ERR_NoImplicitConv, syntax, f_10318_100100_100119(distinguisher), f_10318_100121_100141(distinguisher));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 99244, 100162);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 98101, 100162);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96210, 100162);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 96118, 100177);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 95384, 100188);

                bool
                f_10318_95679_95701_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 95679, 95701);
                    return return_v;
                }


                bool
                f_10318_95705_95724_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 95705, 95724);
                    return return_v;
                }


                int
                f_10318_95666_95725(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 95666, 95725);
                    return 0;
                }


                bool
                f_10318_96123_96147(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96123, 96147);
                    return return_v;
                }


                bool
                f_10318_96152_96176(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96152, 96176);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10318_96281_96303(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 96281, 96303);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_96336_96349(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96336, 96349);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10318_96418_96440(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 96418, 96440);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10318_96473_96495(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 96473, 96495);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType
                f_10318_96637_96659(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.SpecialType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 96637, 96659);
                    return return_v;
                }


                int
                f_10318_96576_96714(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96576, 96714);
                    return 0;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10318_96882_96899()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 96882, 96899);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10318_97009_97026()
                {
                    var return_v = ConstantValue.Bad;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 97009, 97026);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLiteral
                f_10318_96984_97039(Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLiteral(syntax, constantValueOpt, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96984, 97039);
                    return return_v;
                }


                bool
                f_10318_96928_97052(Microsoft.CodeAnalysis.CSharp.BoundLiteral
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination)
                {
                    var return_v = ConversionsBase.HasImplicitConstantExpressionConversion((Microsoft.CodeAnalysis.CSharp.BoundExpression)source, destination);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 96928, 97052);
                    return return_v;
                }


                object?
                f_10318_97669_97697(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 97669, 97697);
                    return return_v;
                }


                int
                f_10318_97611_97710(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 97611, 97710);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                f_10318_97845_97905(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol0, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol1)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher(compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol0, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol1);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 97845, 97905);
                    return return_v;
                }


                System.IFormattable
                f_10318_97993_98012(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.First;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 97993, 98012);
                    return return_v;
                }


                System.IFormattable
                f_10318_98014_98034(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.Second;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 98014, 98034);
                    return return_v;
                }


                int
                f_10318_97932_98035(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 97932, 98035);
                    return 0;
                }


                int
                f_10318_98214_98252(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 98214, 98252);
                    return 0;
                }


                int
                f_10318_98498_98645(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 98498, 98645);
                    return 0;
                }


                int
                f_10318_98744_98929(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 98744, 98929);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                f_10318_98992_99052(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol0, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol1)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher(compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol0, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol1);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 98992, 99052);
                    return return_v;
                }


                System.IFormattable
                f_10318_99136_99155(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.First;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 99136, 99155);
                    return return_v;
                }


                System.IFormattable
                f_10318_99157_99177(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.Second;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 99157, 99177);
                    return return_v;
                }


                int
                f_10318_99079_99178(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 99079, 99178);
                    return 0;
                }


                bool
                f_10318_99248_99326(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 99248, 99326);
                    return return_v;
                }


                int
                f_10318_99761_99841(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 99761, 99841);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                f_10318_99960_100020(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol0, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol1)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher(compilation, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol0, (Microsoft.CodeAnalysis.CSharp.Symbol)symbol1);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 99960, 100020);
                    return return_v;
                }


                System.IFormattable
                f_10318_100100_100119(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.First;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 100100, 100119);
                    return return_v;
                }


                System.IFormattable
                f_10318_100121_100141(Microsoft.CodeAnalysis.CSharp.SymbolDistinguisher
                this_param)
                {
                    var return_v = this_param.Second;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 100121, 100141);
                    return return_v;
                }


                int
                f_10318_100043_100142(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 100043, 100142);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 95384, 100188);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 95384, 100188);
            }
        }

        protected void GenerateImplicitConversionError(
                    DiagnosticBag diagnostics,
                    SyntaxNode syntax,
                    Conversion conversion,
                    BoundExpression operand,
                    TypeSymbol targetType)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 100200, 109289);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100454, 100484);

                f_10318_100454_100483(operand != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100498, 100539);

                f_10318_100498_100538((object)targetType != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100555, 100652) || true) && (f_10318_100559_100578(targetType) == TypeKind.Error)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100555, 100652);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100630, 100637);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100555, 100652);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100668, 100855) || true) && (f_10318_100672_100695(targetType))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100668, 100855);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100729, 100815);

                    f_10318_100729_100814(diagnostics, ErrorCode.ERR_NoImplicitConv, syntax, f_10318_100786_100801(operand), targetType);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100833, 100840);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100668, 100855);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 100871, 106557);

                switch (f_10318_100879_100891(operand))
                {

                    case BoundKind.BadExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101003, 101010);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.UnboundLambda:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101129, 101227);

                            f_10318_101129_101226(this, diagnostics, syntax, operand, targetType);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101253, 101260);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.TupleLiteral:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101378, 101417);

                            var
                            tuple = (BoundTupleLiteral)operand
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101443, 101513);

                            var
                            targetElementTypes = default(ImmutableArray<TypeWithAnnotations>)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101757, 102153) || true) && (targetType.TryGetElementTypesWithAnnotationsIfTupleType(out targetElementTypes) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 101761, 101924) && targetElementTypes.Length == tuple.Arguments.Length))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 101757, 102153);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 101982, 102089);

                                f_10318_101982_102088(this, diagnostics, f_10318_102052_102067(tuple), targetElementTypes);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102119, 102126);

                                return;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 101757, 102153);
                            }

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102278, 102537) || true) && ((object)f_10318_102290_102300(tuple) == null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 102278, 102537);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102366, 102473);

                                f_10318_102366_102472(diagnostics, ErrorCode.ERR_ConversionNotTupleCompatible, syntax, tuple.Arguments.Length, targetType);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102503, 102510);

                                return;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 102278, 102537);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10318, 102658, 102664);

                            break;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.MethodGroup:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102781, 102854);

                            f_10318_102781_102853(operand, fromAddressOf: false);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 102880, 102887);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.UnconvertedAddressOfOperator:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103021, 103120);

                            f_10318_103021_103119(f_10318_103045_103097(((BoundUnconvertedAddressOfOperator)operand)), fromAddressOf: true);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103146, 103153);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.Literal:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103266, 103901) || true) && (f_10318_103270_103293(operand))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 103266, 103901);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103351, 103610) || true) && (f_10318_103355_103374(targetType) == TypeKind.TypeParameter)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 103351, 103610);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103466, 103538);

                                    f_10318_103466_103537(diagnostics, ErrorCode.ERR_TypeVarCantBeNull, syntax, targetType);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103572, 103579);

                                    return;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 103351, 103610);
                                }

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103640, 103874) || true) && (f_10318_103644_103666(targetType))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 103640, 103874);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103732, 103802);

                                    f_10318_103732_103801(diagnostics, ErrorCode.ERR_ValueCantBeNull, syntax, targetType);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 103836, 103843);

                                    return;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 103640, 103874);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 103266, 103901);
                            }
                            DynAbs.Tracing.TraceSender.TraceBreak(10318, 103927, 103933);

                            break;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.StackAllocArrayCreation:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104062, 104127);

                            var
                            stackAllocExpression = (BoundStackAllocArrayCreation)operand
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104153, 104273);

                            f_10318_104153_104272(diagnostics, ErrorCode.ERR_StackAllocConversionNotPossible, syntax, f_10318_104227_104259(stackAllocExpression), targetType);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104299, 104306);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.UnconvertedSwitchExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104439, 104504);

                            var
                            switchExpression = (BoundUnconvertedSwitchExpression)operand
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104530, 104580);

                            HashSet<DiagnosticInfo>
                            useSiteDiagnostics = null
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104606, 104633);

                            bool
                            reportedError = false
                            ;
                            try
                            {
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104659, 104859);
                                foreach (var arm in f_10318_104679_104706_I(f_10318_104679_104706(switchExpression)))
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 104659, 104859);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104764, 104832);

                                    f_10318_104764_104831(f_10318_104778_104787(arm), ref reportedError, ref useSiteDiagnostics);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 104659, 104859);
                                }
                            }
                            catch (System.Exception)
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 201);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 201);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104887, 104915);

                            f_10318_104887_104914(reportedError);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 104941, 104948);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.AddressOfOperator when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105024, 105059) || true) && (f_10318_105029_105059(targetType)) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 105024, 105059) || true)
                    :
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105109, 105207);

                            f_10318_105109_105206(diagnostics, ErrorCode.ERR_InvalidAddrOp, f_10318_105157_105198(((BoundAddressOfOperator)operand)).Syntax);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105233, 105240);

                            return;
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);

                    case BoundKind.UnconvertedConditionalOperator:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 100871, 106557);
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105376, 105447);

                            var
                            conditionalOperator = (BoundUnconvertedConditionalOperator)operand
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105473, 105523);

                            HashSet<DiagnosticInfo>
                            useSiteDiagnostics = null
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105549, 105576);

                            bool
                            reportedError = false
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105602, 105692);

                            f_10318_105602_105691(f_10318_105616_105647(conditionalOperator), ref reportedError, ref useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105718, 105808);

                            f_10318_105718_105807(f_10318_105732_105763(conditionalOperator), ref reportedError, ref useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105834, 105862);

                            f_10318_105834_105861(reportedError);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 105888, 105895);

                            return;
                        }


                        int
                        f_10318_105718_105807(Microsoft.CodeAnalysis.CSharp.BoundExpression
                        expr, ref bool
                        reportedError, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                        useSiteDiagnostics)
                        {
                            tryConversion(expr, ref reportedError, ref useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 105718, 105807);
                            return 0;
                        }
                        int
        f_10318_105602_105691(Microsoft.CodeAnalysis.CSharp.BoundExpression
        expr, ref bool
        reportedError, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
        useSiteDiagnostics)
                        {
                            tryConversion(expr, ref reportedError, ref useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 105602, 105691);
                            return 0;
                        }
                        int
                        f_10318_104764_104831(Microsoft.CodeAnalysis.CSharp.BoundExpression
                        expr, ref bool
                        reportedError, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                        useSiteDiagnostics)
                        {
                            tryConversion(expr, ref reportedError, ref useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 104764, 104831);
                            return 0;
                        }


                        void tryConversion(BoundExpression expr, ref bool reportedError, ref HashSet<DiagnosticInfo> useSiteDiagnostics)
                        {
                            try
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 105942, 106542);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106103, 106220);

                                var
                                conversion = f_10318_106120_106219(f_10318_106120_106136(this), expr, targetType, ref useSiteDiagnostics)
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106246, 106519) || true) && (f_10318_106250_106272_M(!conversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 106250, 106295) || f_10318_106276_106295_M(!conversion.IsValid)))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 106246, 106519);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106353, 106441);

                                    f_10318_106353_106440(this, diagnostics, expr.Syntax, conversion, expr, targetType);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106471, 106492);

                                    reportedError = true;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 106246, 106519);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 105942, 106542);

                                Microsoft.CodeAnalysis.CSharp.Conversions
                                f_10318_106120_106136(Microsoft.CodeAnalysis.CSharp.Binder
                                this_param)
                                {
                                    var return_v = this_param.Conversions;
                                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106120, 106136);
                                    return return_v;
                                }


                                Microsoft.CodeAnalysis.CSharp.Conversion
                                f_10318_106120_106219(Microsoft.CodeAnalysis.CSharp.Conversions
                                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                                useSiteDiagnostics)
                                {
                                    var return_v = this_param.ClassifyImplicitConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 106120, 106219);
                                    return return_v;
                                }


                                bool
                                f_10318_106250_106272_M(bool
                                i)
                                {
                                    var return_v = i;
                                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106250, 106272);
                                    return return_v;
                                }


                                bool
                                f_10318_106276_106295_M(bool
                                i)
                                {
                                    var return_v = i;
                                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106276, 106295);
                                    return return_v;
                                }


                                int
                                f_10318_106353_106440(Microsoft.CodeAnalysis.CSharp.Binder
                                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                                targetType)
                                {
                                    this_param.GenerateImplicitConversionError(diagnostics, syntax, conversion, operand, targetType);
                                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 106353, 106440);
                                    return 0;
                                }

                            }
                            catch
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 105942, 106542);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 105942, 106542);
                            }
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 100871, 106557);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106573, 106603);

                var
                sourceType = f_10318_106590_106602(operand)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106617, 106851) || true) && ((object)sourceType != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 106617, 106851);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106681, 106811);

                    f_10318_106681_106810(diagnostics, f_10318_106726_106742(this), syntax, conversion, sourceType, targetType, f_10318_106788_106809(operand));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106829, 106836);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 106617, 106851);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 106867, 107002);

                f_10318_106867_107001(f_10318_106880_106900(operand) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 106880, 106943) && f_10318_106904_106916(operand) != BoundKind.UnboundLambda), "Missing a case in implicit conversion error reporting");

                void reportMethodGroupErrors(BoundMethodGroup methodGroup, bool fromAddressOf)
                {
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 107018, 109278);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107129, 109263) || true) && (!f_10318_107134_107243(this, methodGroup, targetType, diagnostics))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 107129, 109263);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107285, 107311);

                            var
                            nodeForError = syntax
                            ;
                            try
                            {
                                while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107333, 107542) || true) && (f_10318_107340_107359(nodeForError) == SyntaxKind.ParenthesizedExpression)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 107333, 107542);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107447, 107519);

                                    nodeForError = f_10318_107462_107518(((ParenthesizedExpressionSyntax)nodeForError));
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 107333, 107542);
                                }
                            }
                            catch (System.Exception)
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 107333, 107542);
                                throw;
                            }
                            finally
                            {
                                DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 107333, 107542);
                            }
                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107566, 107837) || true) && (f_10318_107570_107589(nodeForError) == SyntaxKind.SimpleMemberAccessExpression || (DynAbs.Tracing.TraceSender.Expression_False(10318, 107570, 107699) || f_10318_107636_107655(nodeForError) == SyntaxKind.PointerMemberAccessExpression))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 107566, 107837);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107749, 107814);

                                nodeForError = f_10318_107764_107813(((MemberAccessExpressionSyntax)nodeForError));
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 107566, 107837);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107861, 107898);

                            var
                            location = f_10318_107876_107897(nodeForError)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 107922, 108078) || true) && (f_10318_107926_107998(diagnostics, targetType, location))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 107922, 108078);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108048, 108055);

                                return;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 107922, 108078);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108102, 108122);

                            ErrorCode
                            errorCode
                            = default(ErrorCode);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108146, 109150);

                            switch (f_10318_108154_108173(targetType))
                            {

                                case TypeKind.FunctionPointer when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108253, 108271) || true) && (fromAddressOf) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 108253, 108271) || true)
                            :
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 108146, 109150);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108302, 108348);

                                    errorCode = ErrorCode.ERR_MethFuncPtrMismatch;
                                    DynAbs.Tracing.TraceSender.TraceBreak(10318, 108378, 108384);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 108146, 109150);

                                case TypeKind.FunctionPointer:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 108146, 109150);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108470, 108531);

                                    f_10318_108470_108530(diagnostics, ErrorCode.ERR_MissingAddressOf, location);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108561, 108568);

                                    return;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 108146, 109150);

                                case TypeKind.Delegate when (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108617, 108635) || true) && (fromAddressOf) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 108617, 108635) || true)
                            :
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 108146, 109150);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108666, 108725);

                                    errorCode = ErrorCode.ERR_CannotConvertAddressOfToDelegate;
                                    DynAbs.Tracing.TraceSender.TraceBreak(10318, 108755, 108761);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 108146, 109150);

                                case TypeKind.Delegate:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 108146, 109150);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108840, 108887);

                                    errorCode = ErrorCode.ERR_MethDelegateMismatch;
                                    DynAbs.Tracing.TraceSender.TraceBreak(10318, 108917, 108923);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 108146, 109150);

                                default:
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 108146, 109150);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 108987, 109091);

                                    errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 108999, 109012) || ((fromAddressOf && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 109015, 109058)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 109061, 109090))) ? ErrorCode.ERR_AddressOfToNonFunctionPointer : ErrorCode.ERR_MethGrpToNonDel;
                                    DynAbs.Tracing.TraceSender.TraceBreak(10318, 109121, 109127);

                                    break;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 108146, 109150);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 109174, 109244);

                            f_10318_109174_109243(diagnostics, errorCode, location, f_10318_109214_109230(methodGroup), targetType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 107129, 109263);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 107018, 109278);

                        bool
                        f_10318_107134_107243(Microsoft.CodeAnalysis.CSharp.Binder
                        binder, Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                        expr, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                        targetType, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics)
                        {
                            var return_v = Conversions.ReportDelegateOrFunctionPointerMethodGroupDiagnostics(binder, expr, targetType, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 107134, 107243);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.SyntaxKind
                        f_10318_107340_107359(Microsoft.CodeAnalysis.SyntaxNode
                        node)
                        {
                            var return_v = node.Kind();
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 107340, 107359);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                        f_10318_107462_107518(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax
                        this_param)
                        {
                            var return_v = this_param.Expression;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 107462, 107518);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.SyntaxKind
                        f_10318_107570_107589(Microsoft.CodeAnalysis.SyntaxNode
                        node)
                        {
                            var return_v = node.Kind();
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 107570, 107589);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.SyntaxKind
                        f_10318_107636_107655(Microsoft.CodeAnalysis.SyntaxNode
                        node)
                        {
                            var return_v = node.Kind();
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 107636, 107655);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax
                        f_10318_107764_107813(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax
                        this_param)
                        {
                            var return_v = this_param.Name;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 107764, 107813);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.Location
                        f_10318_107876_107897(Microsoft.CodeAnalysis.SyntaxNode
                        this_param)
                        {
                            var return_v = this_param.Location;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 107876, 107897);
                            return return_v;
                        }


                        bool
                        f_10318_107926_107998(Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                        possibleDelegateType, Microsoft.CodeAnalysis.Location
                        location)
                        {
                            var return_v = ReportDelegateInvokeUseSiteDiagnostic(diagnostics, possibleDelegateType, location);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 107926, 107998);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.TypeKind
                        f_10318_108154_108173(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                        this_param)
                        {
                            var return_v = this_param.TypeKind;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 108154, 108173);
                            return return_v;
                        }


                        int
                        f_10318_108470_108530(Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                        code, Microsoft.CodeAnalysis.Location
                        location)
                        {
                            Error(diagnostics, code, location);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 108470, 108530);
                            return 0;
                        }


                        string
                        f_10318_109214_109230(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                        this_param)
                        {
                            var return_v = this_param.Name;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 109214, 109230);
                            return return_v;
                        }


                        int
                        f_10318_109174_109243(Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                        code, Microsoft.CodeAnalysis.Location
                        location, params object[]
                        args)
                        {
                            Error(diagnostics, code, location, args);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 109174, 109243);
                            return 0;
                        }

                    }
                    catch
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 107018, 109278);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 107018, 109278);
                    }
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 100200, 109289);

                int
                f_10318_100454_100483(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 100454, 100483);
                    return 0;
                }


                int
                f_10318_100498_100538(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 100498, 100538);
                    return 0;
                }


                Microsoft.CodeAnalysis.TypeKind
                f_10318_100559_100578(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.TypeKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 100559, 100578);
                    return return_v;
                }


                bool
                f_10318_100672_100695(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 100672, 100695);
                    return return_v;
                }


                object
                f_10318_100786_100801(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Display;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 100786, 100801);
                    return return_v;
                }


                int
                f_10318_100729_100814(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 100729, 100814);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_100879_100891(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 100879, 100891);
                    return return_v;
                }


                int
                f_10318_101129_101226(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                anonymousFunction, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateAnonymousFunctionConversionError(diagnostics, syntax, (Microsoft.CodeAnalysis.CSharp.UnboundLambda)anonymousFunction, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 101129, 101226);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                f_10318_102052_102067(Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral
                this_param)
                {
                    var return_v = this_param.Arguments;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 102052, 102067);
                    return return_v;
                }


                int
                f_10318_101982_102088(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundExpression>
                tupleArguments, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                targetElementTypes)
                {
                    this_param.GenerateImplicitConversionErrorsForTupleLiteralArguments(diagnostics, tupleArguments, targetElementTypes);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 101982, 102088);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_102290_102300(Microsoft.CodeAnalysis.CSharp.BoundTupleLiteral
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 102290, 102300);
                    return return_v;
                }


                int
                f_10318_102366_102472(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 102366, 102472);
                    return 0;
                }


                int
                f_10318_102781_102853(Microsoft.CodeAnalysis.CSharp.BoundExpression
                methodGroup, bool
                fromAddressOf)
                {
                    reportMethodGroupErrors((Microsoft.CodeAnalysis.CSharp.BoundMethodGroup)methodGroup, fromAddressOf: fromAddressOf);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 102781, 102853);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                f_10318_103045_103097(Microsoft.CodeAnalysis.CSharp.BoundUnconvertedAddressOfOperator
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 103045, 103097);
                    return return_v;
                }


                int
                f_10318_103021_103119(Microsoft.CodeAnalysis.CSharp.BoundMethodGroup
                methodGroup, bool
                fromAddressOf)
                {
                    reportMethodGroupErrors(methodGroup, fromAddressOf: fromAddressOf);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 103021, 103119);
                    return 0;
                }


                bool
                f_10318_103270_103293(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.IsLiteralNull();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 103270, 103293);
                    return return_v;
                }


                Microsoft.CodeAnalysis.TypeKind
                f_10318_103355_103374(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.TypeKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 103355, 103374);
                    return return_v;
                }


                int
                f_10318_103466_103537(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 103466, 103537);
                    return 0;
                }


                bool
                f_10318_103644_103666(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param)
                {
                    var return_v = this_param.IsValueType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 103644, 103666);
                    return return_v;
                }


                int
                f_10318_103732_103801(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 103732, 103801);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_104227_104259(Microsoft.CodeAnalysis.CSharp.BoundStackAllocArrayCreation
                this_param)
                {
                    var return_v = this_param.ElementType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 104227, 104259);
                    return return_v;
                }


                int
                f_10318_104153_104272(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 104153, 104272);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundSwitchExpressionArm>
                f_10318_104679_104706(Microsoft.CodeAnalysis.CSharp.BoundUnconvertedSwitchExpression
                this_param)
                {
                    var return_v = this_param.SwitchArms;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 104679, 104706);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_104778_104787(Microsoft.CodeAnalysis.CSharp.BoundSwitchExpressionArm
                this_param)
                {
                    var return_v = this_param.Value;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 104778, 104787);
                    return return_v;
                }



                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundSwitchExpressionArm>
                f_10318_104679_104706_I(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundSwitchExpressionArm>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 104679, 104706);
                    return return_v;
                }


                int
                f_10318_104887_104914(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 104887, 104914);
                    return 0;
                }


                bool
                f_10318_105029_105059(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsFunctionPointer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 105029, 105059);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_105157_105198(Microsoft.CodeAnalysis.CSharp.BoundAddressOfOperator
                this_param)
                {
                    var return_v = this_param.Operand;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 105157, 105198);
                    return return_v;
                }


                int
                f_10318_105109_105206(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 105109, 105206);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_105616_105647(Microsoft.CodeAnalysis.CSharp.BoundUnconvertedConditionalOperator
                this_param)
                {
                    var return_v = this_param.Consequence;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 105616, 105647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_105732_105763(Microsoft.CodeAnalysis.CSharp.BoundUnconvertedConditionalOperator
                this_param)
                {
                    var return_v = this_param.Alternative;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 105732, 105763);
                    return return_v;
                }


                int
                f_10318_105834_105861(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 105834, 105861);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_106590_106602(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106590, 106602);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_106726_106742(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106726, 106742);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10318_106788_106809(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106788, 106809);
                    return return_v;
                }


                int
                f_10318_106681_106810(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                sourceType, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType, Microsoft.CodeAnalysis.ConstantValue?
                sourceConstantValueOpt)
                {
                    GenerateImplicitConversionError(diagnostics, compilation, syntax, conversion, sourceType, targetType, sourceConstantValueOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 106681, 106810);
                    return 0;
                }


                bool
                f_10318_106880_106900(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106880, 106900);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_106904_106916(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 106904, 106916);
                    return return_v;
                }


                int
                f_10318_106867_107001(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 106867, 107001);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 100200, 109289);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 100200, 109289);
            }
        }

        private void GenerateImplicitConversionErrorsForTupleLiteralArguments(
                    DiagnosticBag diagnostics,
                    ImmutableArray<BoundExpression> tupleArguments,
                    ImmutableArray<TypeWithAnnotations> targetElementTypes)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 109301, 110891);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 109566, 109604);

                var
                argLength = tupleArguments.Length
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110254, 110299);

                HashSet<DiagnosticInfo>
                usDiagsUnused = null
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110324, 110329);

                    for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110315, 110880) || true) && (i < targetElementTypes.Length)
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110362, 110365)
        , i++, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 110315, 110880))

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 110315, 110880);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110399, 110432);

                        var
                        argument = tupleArguments[i]
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110450, 110501);

                        var
                        targetElementType = targetElementTypes[i].Type
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110521, 110646);

                        var
                        elementConversion = f_10318_110545_110645(f_10318_110545_110556(), argument, targetElementType, ref usDiagsUnused)
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110664, 110865) || true) && (f_10318_110668_110694_M(!elementConversion.IsValid))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 110664, 110865);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 110736, 110846);

                            f_10318_110736_110845(this, diagnostics, argument.Syntax, elementConversion, argument, targetElementType);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 110664, 110865);
                        }
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 566);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 566);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 109301, 110891);

                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_110545_110556()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 110545, 110556);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_110545_110645(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyImplicitConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 110545, 110645);
                    return return_v;
                }


                bool
                f_10318_110668_110694_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 110668, 110694);
                    return return_v;
                }


                int
                f_10318_110736_110845(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 110736, 110845);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 109301, 110891);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 109301, 110891);
            }
        }

        private BoundStatement BindIfStatement(IfStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 110903, 111454);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 111017, 111084);

                var
                condition = f_10318_111033_111083(this, f_10318_111055_111069(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 111098, 111175);

                var
                consequence = f_10318_111116_111174(this, f_10318_111146_111160(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 111189, 111311);

                BoundStatement
                alternative = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 111218, 111237) || (((f_10318_111219_111228(node) == null) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 111240, 111244)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 111247, 111310))) ? null : f_10318_111247_111310(this, f_10318_111277_111296(f_10318_111277_111286(node)), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 111327, 111415);

                BoundStatement
                result = f_10318_111351_111414(node, condition, consequence, alternative)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 111429, 111443);

                return result;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 110903, 111454);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_111055_111069(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
                this_param)
                {
                    var return_v = this_param.Condition;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 111055, 111069);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_111033_111083(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBooleanExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 111033, 111083);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10318_111146_111160(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 111146, 111160);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_111116_111174(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindPossibleEmbeddedStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 111116, 111174);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax?
                f_10318_111219_111228(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
                this_param)
                {
                    var return_v = this_param.Else;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 111219, 111228);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax
                f_10318_111277_111286(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
                this_param)
                {
                    var return_v = this_param.Else;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 111277, 111286);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10318_111277_111296(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 111277, 111296);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_111247_111310(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindPossibleEmbeddedStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 111247, 111310);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundIfStatement
                f_10318_111351_111414(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                condition, Microsoft.CodeAnalysis.CSharp.BoundStatement
                consequence, Microsoft.CodeAnalysis.CSharp.BoundStatement?
                alternativeOpt)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundIfStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, condition, consequence, alternativeOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 111351, 111414);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 110903, 111454);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 110903, 111454);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundExpression BindBooleanExpression(ExpressionSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 111466, 118974);
                Microsoft.CodeAnalysis.CSharp.LookupResultKind resultKind = default(Microsoft.CodeAnalysis.CSharp.LookupResultKind);
                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol> originalUserDefinedOperators = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 113908, 113970);

                var
                expr = f_10318_113919_113969(this, node, diagnostics, BindValueKind.RValue)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 113984, 114060);

                var
                boolean = f_10318_113998_114059(this, SpecialType.System_Boolean, diagnostics, node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 114076, 114562) || true) && (f_10318_114080_114097(expr))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 114076, 114562);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 114333, 114547);

                    return f_10318_114340_114546(node, f_10318_114374_114406(this, expr), Conversion.NoConversion, false, explicitCastInCode: false, conversionGroupOpt: null, ConstantValue.NotAvailable, boolean, hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 114076, 114562);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 114728, 115210) || true) && (f_10318_114732_114753(expr))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 114728, 115210);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 114787, 115195);

                    return new BoundUnaryOperator(
                                        node,
                                        UnaryOperatorKind.DynamicTrue,
                    f_10318_114918_114954(this, expr, diagnostics),
                                        ConstantValue.NotAvailable,
                                        null,
                                        LookupResultKind.Viable,
                                        boolean)
                    {
                        WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 114794, 115194)
                    };
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 114728, 115210);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 115291, 115341);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 115355, 115461);

                var
                conversion = f_10318_115372_115460(f_10318_115372_115388(this), expr, boolean, ref useSiteDiagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 115475, 115524);

                f_10318_115475_115523(diagnostics, expr.Syntax, useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 115540, 116942) || true) && (conversion.IsImplicit)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 115540, 116942);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 115599, 116538) || true) && (conversion.Kind == ConversionKind.Identity)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 115599, 116538);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 116033, 116519) || true) && (f_10318_116037_116046(expr) == BoundKind.AssignmentOperator)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 116033, 116519);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 116128, 116175);

                            var
                            assignment = (BoundAssignmentOperator)expr
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 116201, 116496) || true) && (f_10318_116205_116226(f_10318_116205_116221(assignment)) == BoundKind.Literal && (DynAbs.Tracing.TraceSender.Expression_True(10318, 116205, 116337) && f_10318_116251_116295(f_10318_116251_116281(f_10318_116251_116267(assignment))) == ConstantValueTypeDiscriminator.Boolean))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 116201, 116496);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 116395, 116469);

                                f_10318_116395_116468(diagnostics, ErrorCode.WRN_IncorrectBooleanAssg, assignment.Syntax);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 116201, 116496);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 116033, 116519);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 115599, 116538);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 116558, 116927);

                    return f_10318_116565_116926(this, syntax: expr.Syntax, source: expr, conversion: conversion, isCast: false, conversionGroupOpt: null, wasCompilerGenerated: true, destination: boolean, diagnostics: diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 115540, 116942);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117019, 117063);

                expr = f_10318_117026_117062(this, expr, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117077, 117270);

                var
                best = f_10318_117088_117269(this, UnaryOperatorKind.True, expr, node, diagnostics, out resultKind, out originalUserDefinedOperators)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117284, 117997) || true) && (f_10318_117288_117302_M(!best.HasValue))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 117284, 117997);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117400, 117532);

                    f_10318_117400_117531(resultKind == LookupResultKind.Empty, "How could overload resolution fail if a user-defined true operator was found?");
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117550, 117682);

                    f_10318_117550_117681(originalUserDefinedOperators.IsEmpty, "How could overload resolution fail if a user-defined true operator was found?");
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117700, 117778);

                    f_10318_117700_117777(this, diagnostics, node, conversion, expr, boolean);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 117796, 117982);

                    return f_10318_117803_117981(node, expr, Conversion.NoConversion, false, explicitCastInCode: false, conversionGroupOpt: null, ConstantValue.NotAvailable, boolean, hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 117284, 117997);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 118013, 118063);

                UnaryOperatorSignature
                signature = best.Signature
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 118079, 118385);

                BoundExpression
                resultOperand = f_10318_118111_118384(this, node, expr, best.Conversion, isCast: false, conversionGroupOpt: null, destination: best.Signature.OperandType, diagnostics: diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 118711, 118963);

                return new BoundUnaryOperator(node, signature.Kind, resultOperand, ConstantValue.NotAvailable, signature.Method, resultKind, originalUserDefinedOperators, signature.ReturnType)
                {
                    WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 118718, 118962)
                };
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 111466, 118974);

                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_113919_113969(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 113919, 113969);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_113998_114059(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SpecialType
                typeId, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetSpecialType(typeId, diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 113998, 114059);
                    return return_v;
                }


                bool
                f_10318_114080_114097(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 114080, 114097);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_114374_114406(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 114374, 114406);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundConversion
                f_10318_114340_114546(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                @checked, bool
                explicitCastInCode, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = BoundConversion.Synthesized((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, conversion, @checked, explicitCastInCode: explicitCastInCode, conversionGroupOpt: conversionGroupOpt, constantValueOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 114340, 114546);
                    return return_v;
                }


                bool
                f_10318_114732_114753(Microsoft.CodeAnalysis.CSharp.BoundExpression
                node)
                {
                    var return_v = node.HasDynamicType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 114732, 114753);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_114918_114954(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 114918, 114954);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_115372_115388(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 115372, 115388);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_115372_115460(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 115372, 115460);
                    return return_v;
                }


                bool
                f_10318_115475_115523(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 115475, 115523);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_116037_116046(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116037, 116046);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_116205_116221(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116205, 116221);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_116205_116226(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116205, 116226);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_116251_116267(Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator
                this_param)
                {
                    var return_v = this_param.Right;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116251, 116267);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10318_116251_116281(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116251, 116281);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValueTypeDiscriminator
                f_10318_116251_116295(Microsoft.CodeAnalysis.ConstantValue?
                this_param)
                {
                    var return_v = this_param.Discriminator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 116251, 116295);
                    return return_v;
                }


                int
                f_10318_116395_116468(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 116395, 116468);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_116565_116926(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                isCast, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, bool
                wasCompilerGenerated, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(syntax: syntax, source: source, conversion: conversion, isCast: isCast, conversionGroupOpt: conversionGroupOpt, wasCompilerGenerated: wasCompilerGenerated, destination: (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)destination, diagnostics: diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 116565, 116926);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_117026_117062(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117026, 117062);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.UnaryOperatorAnalysisResult
                f_10318_117088_117269(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.UnaryOperatorKind
                kind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.CSharp.LookupResultKind
                resultKind, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol>
                originalUserDefinedOperators)
                {
                    var return_v = this_param.UnaryOperatorOverloadResolution(kind, operand, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, diagnostics, out resultKind, out originalUserDefinedOperators);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117088, 117269);
                    return return_v;
                }


                bool
                f_10318_117288_117302_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 117288, 117302);
                    return return_v;
                }


                int
                f_10318_117400_117531(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117400, 117531);
                    return 0;
                }


                int
                f_10318_117550_117681(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117550, 117681);
                    return 0;
                }


                int
                f_10318_117700_117777(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, (Microsoft.CodeAnalysis.SyntaxNode)syntax, conversion, operand, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117700, 117777);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundConversion
                f_10318_117803_117981(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                @checked, bool
                explicitCastInCode, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                type, bool
                hasErrors)
                {
                    var return_v = BoundConversion.Synthesized((Microsoft.CodeAnalysis.SyntaxNode)syntax, operand, conversion, @checked, explicitCastInCode: explicitCastInCode, conversionGroupOpt: conversionGroupOpt, constantValueOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)type, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 117803, 117981);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_118111_118384(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                isCast, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion((Microsoft.CodeAnalysis.SyntaxNode)syntax, source, conversion, isCast: isCast, conversionGroupOpt: conversionGroupOpt, destination: destination, diagnostics: diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 118111, 118384);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 111466, 118974);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 111466, 118974);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindSwitchStatement(SwitchStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 118986, 119294);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119108, 119135);

                f_10318_119108_119134(node != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119149, 119192);

                Binder
                switchBinder = f_10318_119171_119191(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119206, 119283);

                return f_10318_119213_119282(switchBinder, node, switchBinder, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 118986, 119294);

                int
                f_10318_119108_119134(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119108, 119134);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_119171_119191(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119171, 119191);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_119213_119282(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
                node, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindSwitchStatementCore(node, originalBinder, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119213, 119282);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 118986, 119294);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 118986, 119294);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundStatement BindSwitchStatementCore(SwitchStatementSyntax node, Binder originalBinder, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 119306, 119551);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119464, 119540);

                return f_10318_119471_119539(f_10318_119471_119480(this), node, originalBinder, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 119306, 119551);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_119471_119480(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 119471, 119480);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_119471_119539(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax
                node, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindSwitchStatementCore(node, originalBinder, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119471, 119539);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 119306, 119551);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 119306, 119551);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual void BindPatternSwitchLabelForInference(CasePatternSwitchLabelSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 119563, 119781);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119706, 119770);

                f_10318_119706_119769(f_10318_119706_119715(this), node, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 119563, 119781);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_119706_119715(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 119706, 119715);
                    return return_v;
                }


                int
                f_10318_119706_119769(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.BindPatternSwitchLabelForInference(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119706, 119769);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 119563, 119781);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 119563, 119781);
            }
        }

        private BoundStatement BindWhile(WhileStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 119793, 120115);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119904, 119931);

                f_10318_119904_119930(node != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119947, 119985);

                var
                loopBinder = f_10318_119964_119984(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 119999, 120032);

                f_10318_119999_120031(loopBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120046, 120104);

                return f_10318_120053_120103(loopBinder, diagnostics, loopBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 119793, 120115);

                int
                f_10318_119904_119930(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119904, 119930);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_119964_119984(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119964, 119984);
                    return return_v;
                }


                int
                f_10318_119999_120031(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 119999, 120031);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundWhileStatement
                f_10318_120053_120103(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindWhileParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120053, 120103);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 119793, 120115);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 119793, 120115);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundWhileStatement BindWhileParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 120127, 120325);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120253, 120314);

                return f_10318_120260_120313(f_10318_120260_120269(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 120127, 120325);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_120260_120269(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 120260, 120269);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundWhileStatement
                f_10318_120260_120313(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindWhileParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120260, 120313);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 120127, 120325);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 120127, 120325);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindDo(DoStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 120337, 120609);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120442, 120480);

                var
                loopBinder = f_10318_120459_120479(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120494, 120527);

                f_10318_120494_120526(loopBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120543, 120598);

                return f_10318_120550_120597(loopBinder, diagnostics, loopBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 120337, 120609);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_120459_120479(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120459, 120479);
                    return return_v;
                }


                int
                f_10318_120494_120526(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120494, 120526);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundDoStatement
                f_10318_120550_120597(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindDoParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120550, 120597);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 120337, 120609);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 120337, 120609);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundDoStatement BindDoParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 120621, 120810);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120741, 120799);

                return f_10318_120748_120798(f_10318_120748_120757(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 120621, 120810);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_120748_120757(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 120748, 120757);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundDoStatement
                f_10318_120748_120798(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindDoParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120748, 120798);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 120621, 120810);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 120621, 120810);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundForStatement BindFor(ForStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 120822, 121099);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120933, 120971);

                var
                loopBinder = f_10318_120950_120970(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 120985, 121018);

                f_10318_120985_121017(loopBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121032, 121088);

                return f_10318_121039_121087(loopBinder, diagnostics, loopBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 120822, 121099);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_120950_120970(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120950, 120970);
                    return return_v;
                }


                int
                f_10318_120985_121017(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 120985, 121017);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundForStatement
                f_10318_121039_121087(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindForParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 121039, 121087);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 120822, 121099);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 120822, 121099);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundForStatement BindForParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 121111, 121303);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121233, 121292);

                return f_10318_121240_121291(f_10318_121240_121249(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 121111, 121303);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_121240_121249(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 121240, 121249);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundForStatement
                f_10318_121240_121291(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindForParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 121240, 121291);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 121111, 121303);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 121111, 121303);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundStatement BindForOrUsingOrFixedDeclarations(VariableDeclarationSyntax nodeOpt, LocalDeclarationKind localKind, DiagnosticBag diagnostics, out ImmutableArray<BoundLocalDeclaration> declarations)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 121315, 123536);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121547, 121704) || true) && (nodeOpt == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 121547, 121704);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121600, 121659);

                    declarations = ImmutableArray<BoundLocalDeclaration>.Empty;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121677, 121689);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 121547, 121704);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121720, 121750);

                var
                typeSyntax = f_10318_121737_121749(nodeOpt)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121864, 122005) || true) && (localKind == LocalDeclarationKind.RegularVariable)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 121864, 122005);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 121951, 121990);

                    typeSyntax = f_10318_121964_121989(typeSyntax, out _);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 121864, 122005);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122021, 122039);

                AliasSymbol
                alias
                = default(AliasSymbol);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122053, 122064);

                bool
                isVar
                = default(bool);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122078, 122177);

                TypeWithAnnotations
                declType = f_10318_122109_122176(this, typeSyntax, diagnostics, out isVar, out alias)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122193, 122233);

                f_10318_122193_122232(declType.HasType || (DynAbs.Tracing.TraceSender.Expression_False(10318, 122206, 122231) || isVar));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122249, 122283);

                var
                variables = f_10318_122265_122282(nodeOpt)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122297, 122325);

                int
                count = variables.Count
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122339, 122363);

                f_10318_122339_122362(count > 0);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122379, 122734) || true) && (isVar && (DynAbs.Tracing.TraceSender.Expression_True(10318, 122383, 122401) && count > 1))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 122379, 122734);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122634, 122719);

                    f_10318_122634_122718(diagnostics, ErrorCode.ERR_ImplicitlyTypedVariableMultipleDeclarator, nodeOpt);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 122379, 122734);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122750, 122806);

                var
                declarationArray = new BoundLocalDeclaration[count]
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122831, 122836);

                    for (int
        i = 0
        ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122822, 123293) || true) && (i < count)
        ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122849, 122852)
        , i++, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 122822, 123293))

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 122822, 123293);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122886, 122924);

                        var
                        variableDeclarator = variables[i]
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 122942, 122973);

                        bool
                        includeBoundType = i == 0
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123084, 123224);

                        var
                        declaration = f_10318_123102_123223(this, localKind, isVar, variableDeclarator, typeSyntax, declType, alias, diagnostics, includeBoundType)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123244, 123278);

                        declarationArray[i] = declaration;
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 472);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 472);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123309, 123361);

                declarations = f_10318_123324_123360(declarationArray);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123377, 123525);

                return (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 123384, 123396) || (((count == 1) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 123416, 123447)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 123467, 123524))) ? (BoundStatement)declarations[0] : f_10318_123467_123524(nodeOpt, declarations);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 121315, 123536);

                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_121737_121749(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 121737, 121749);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_121964_121989(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = syntax.SkipRef(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 121964, 121989);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_122109_122176(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out bool
                isVar, out Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                alias)
                {
                    var return_v = this_param.BindTypeOrVarKeyword(syntax, diagnostics, out isVar, out alias);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 122109, 122176);
                    return return_v;
                }


                int
                f_10318_122193_122232(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 122193, 122232);
                    return 0;
                }


                Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax>
                f_10318_122265_122282(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Variables;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 122265, 122282);
                    return return_v;
                }


                int
                f_10318_122339_122362(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 122339, 122362);
                    return 0;
                }


                int
                f_10318_122634_122718(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 122634, 122718);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration
                f_10318_123102_123223(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind
                kind, bool
                isVar, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax
                declarator, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                typeSyntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                declTypeOpt, Microsoft.CodeAnalysis.CSharp.Symbols.AliasSymbol
                aliasOpt, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, bool
                includeBoundType)
                {
                    var return_v = this_param.BindVariableDeclaration(kind, isVar, declarator, typeSyntax, declTypeOpt, aliasOpt, diagnostics, includeBoundType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 123102, 123223);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                f_10318_123324_123360(Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration[]
                items)
                {
                    var return_v = items.AsImmutableOrNull<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 123324, 123360);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations
                f_10318_123467_123524(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundLocalDeclaration>
                localDeclarations)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundMultipleLocalDeclarations((Microsoft.CodeAnalysis.SyntaxNode)syntax, localDeclarations);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 123467, 123524);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 121315, 123536);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 121315, 123536);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundStatement BindStatementExpressionList(SeparatedSyntaxList<ExpressionSyntax> statements, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 123548, 124556);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123701, 123730);

                int
                count = statements.Count
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123744, 124545) || true) && (count == 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 123744, 124545);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123792, 123804);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 123744, 124545);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 123744, 124545);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123838, 124545) || true) && (count == 1)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 123838, 124545);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123886, 123913);

                        var
                        syntax = statements[0]
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 123931, 123998);

                        return f_10318_123938_123997(this, syntax, syntax, false, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 123838, 124545);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 123838, 124545);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124064, 124130);

                        var
                        statementBuilder = f_10318_124087_124129()
                        ;
                        try
                        {
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124157, 124162);
                            for (int
            i = 0
            ; (DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124148, 124418) || true) && (i < count)
            ; DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124175, 124178)
            , i++, DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 124148, 124418))

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 124148, 124418);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124220, 124247);

                                var
                                syntax = statements[i]
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124269, 124345);

                                var
                                statement = f_10318_124285_124344(this, syntax, syntax, false, diagnostics)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124367, 124399);

                                f_10318_124367_124398(statementBuilder, statement);
                            }
                        }
                        catch (System.Exception)
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 271);
                            throw;
                        }
                        finally
                        {
                            DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 271);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124436, 124530);

                        return f_10318_124443_124529(statements.Node, f_10318_124491_124528(statementBuilder));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 123838, 124545);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 123744, 124545);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 123548, 124556);

                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_123938_123997(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, bool
                allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionStatement((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, syntax, allowsAnyExpression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 123938, 123997);
                    return return_v;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_124087_124129()
                {
                    var return_v = ArrayBuilder<BoundStatement>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124087, 124129);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_124285_124344(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, bool
                allowsAnyExpression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionStatement((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, syntax, allowsAnyExpression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124285, 124344);
                    return return_v;
                }


                int
                f_10318_124367_124398(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                item)
                {
                    this_param.Add((Microsoft.CodeAnalysis.CSharp.BoundStatement)item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124367, 124398);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_124491_124528(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124491, 124528);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatementList
                f_10318_124443_124529(Microsoft.CodeAnalysis.SyntaxNode?
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                statements)
                {
                    var return_v = BoundStatementList.Synthesized(syntax, statements);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124443, 124529);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 123548, 124556);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 123548, 124556);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindForEach(CommonForEachStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 124568, 124888);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124689, 124730);

                Binder
                loopBinder = f_10318_124709_124729(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 124744, 124877);

                return f_10318_124751_124876(f_10318_124751_124782(this, f_10318_124766_124781(node)), f_10318_124806_124821(node), f_10318_124823_124875(loopBinder, diagnostics, loopBinder));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 124568, 124888);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_124709_124729(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124709, 124729);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_124766_124781(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 124766, 124781);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_124751_124782(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124751, 124782);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_124806_124821(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 124806, 124821);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_124823_124875(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindForEachParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124823, 124875);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_124751_124876(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                scopeDesignator, Microsoft.CodeAnalysis.CSharp.BoundStatement
                statement)
                {
                    var return_v = this_param.WrapWithVariablesIfAny((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)scopeDesignator, statement);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 124751, 124876);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 124568, 124888);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 124568, 124888);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundStatement BindForEachParts(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 124900, 125097);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125023, 125086);

                return f_10318_125030_125085(f_10318_125030_125039(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 124900, 125097);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_125030_125039(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 125030, 125039);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_125030_125085(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindForEachParts(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 125030, 125085);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 124900, 125097);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 124900, 125097);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundStatement BindForEachDeconstruction(DiagnosticBag diagnostics, Binder originalBinder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 125305, 125520);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125437, 125509);

                return f_10318_125444_125508(f_10318_125444_125453(this), diagnostics, originalBinder);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 125305, 125520);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_125444_125453(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 125444, 125453);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_125444_125508(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder
                originalBinder)
                {
                    var return_v = this_param.BindForEachDeconstruction(diagnostics, originalBinder);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 125444, 125508);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 125305, 125520);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 125305, 125520);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindBreak(BreakStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 125532, 125988);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125643, 125672);

                var
                target = f_10318_125656_125671(this)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125686, 125918) || true) && ((object)target == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 125686, 125918);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125746, 125800);

                    f_10318_125746_125799(diagnostics, ErrorCode.ERR_NoBreakOrCont, node);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125818, 125903);

                    return f_10318_125825_125902(node, ImmutableArray<BoundNode>.Empty, hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 125686, 125918);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 125932, 125977);

                return f_10318_125939_125976(node, target);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 125532, 125988);

                Microsoft.CodeAnalysis.CSharp.Symbols.GeneratedLabelSymbol?
                f_10318_125656_125671(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.BreakLabel;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 125656, 125671);
                    return return_v;
                }


                int
                f_10318_125746_125799(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 125746, 125799);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadStatement
                f_10318_125825_125902(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                childBoundNodes, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBadStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, childBoundNodes, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 125825, 125902);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBreakStatement
                f_10318_125939_125976(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.GeneratedLabelSymbol
                label)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBreakStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, label);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 125939, 125976);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 125532, 125988);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 125532, 125988);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindContinue(ContinueStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 126000, 126468);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126117, 126149);

                var
                target = f_10318_126130_126148(this)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126163, 126395) || true) && ((object)target == null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 126163, 126395);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126223, 126277);

                    f_10318_126223_126276(diagnostics, ErrorCode.ERR_NoBreakOrCont, node);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126295, 126380);

                    return f_10318_126302_126379(node, ImmutableArray<BoundNode>.Empty, hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 126163, 126395);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126409, 126457);

                return f_10318_126416_126456(node, target);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 126000, 126468);

                Microsoft.CodeAnalysis.CSharp.Symbols.GeneratedLabelSymbol?
                f_10318_126130_126148(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContinueLabel;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 126130, 126148);
                    return return_v;
                }


                int
                f_10318_126223_126276(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 126223, 126276);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBadStatement
                f_10318_126302_126379(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>
                childBoundNodes, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBadStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, childBoundNodes, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 126302, 126379);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundContinueStatement
                f_10318_126416_126456(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.GeneratedLabelSymbol
                label)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundContinueStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, label);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 126416, 126456);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 126000, 126468);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 126000, 126468);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static SwitchBinder GetSwitchBinder(Binder binder)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 126480, 126844);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126563, 126614);

                SwitchBinder
                switchBinder = binder as SwitchBinder
                ;
                try
                {
                    while ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126628, 126799) || true) && (binder != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 126635, 126673) && switchBinder == null))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 126628, 126799);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126707, 126728);

                        binder = f_10318_126716_126727(binder);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126746, 126784);

                        switchBinder = binder as SwitchBinder;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 126628, 126799);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 126628, 126799);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 126628, 126799);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126813, 126833);

                return switchBinder;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 126480, 126844);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_126716_126727(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Next;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 126716, 126727);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 126480, 126844);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 126480, 126844);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected static bool IsInAsyncMethod(MethodSymbol method)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 126856, 126998);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 126939, 126987);

                return (object)method != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 126946, 126986) && f_10318_126972_126986(method));
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 126856, 126998);

                bool
                f_10318_126972_126986(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.IsAsync;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 126972, 126986);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 126856, 126998);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 126856, 126998);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected bool IsInAsyncMethod()
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 127010, 127148);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127067, 127137);

                return f_10318_127074_127136(f_10318_127090_127119(this) as MethodSymbol);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 127010, 127148);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_127090_127119(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127090, 127119);
                    return return_v;
                }


                bool
                f_10318_127074_127136(Microsoft.CodeAnalysis.CSharp.Symbol?
                method)
                {
                    var return_v = IsInAsyncMethod((Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol?)method);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 127074, 127136);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 127010, 127148);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 127010, 127148);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected bool IsTaskReturningAsyncMethod()
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 127160, 127402);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127228, 127271);

                var
                symbol = f_10318_127241_127270(this)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127285, 127391);

                return f_10318_127292_127304_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(symbol, 10318, 127292, 127304)?.Kind) == SymbolKind.Method && (DynAbs.Tracing.TraceSender.Expression_True(10318, 127292, 127390) && f_10318_127329_127390(((MethodSymbol)symbol), f_10318_127373_127389(this)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 127160, 127402);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_127241_127270(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127241, 127270);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind?
                f_10318_127292_127304_M(Microsoft.CodeAnalysis.SymbolKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127292, 127304);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_127373_127389(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127373, 127389);
                    return return_v;
                }


                bool
                f_10318_127329_127390(Microsoft.CodeAnalysis.CSharp.Symbol
                method, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = ((MethodSymbol)method).IsAsyncReturningTask(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 127329, 127390);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 127160, 127402);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 127160, 127402);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected bool IsGenericTaskReturningAsyncMethod()
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 127414, 127670);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127489, 127532);

                var
                symbol = f_10318_127502_127531(this)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127546, 127659);

                return f_10318_127553_127565_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(symbol, 10318, 127553, 127565)?.Kind) == SymbolKind.Method && (DynAbs.Tracing.TraceSender.Expression_True(10318, 127553, 127658) && f_10318_127590_127658(((MethodSymbol)symbol), f_10318_127641_127657(this)));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 127414, 127670);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_127502_127531(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127502, 127531);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind?
                f_10318_127553_127565_M(Microsoft.CodeAnalysis.SymbolKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127553, 127565);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_127641_127657(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127641, 127657);
                    return return_v;
                }


                bool
                f_10318_127590_127658(Microsoft.CodeAnalysis.CSharp.Symbol
                method, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = ((MethodSymbol)method).IsAsyncReturningGenericTask(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 127590, 127658);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 127414, 127670);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 127414, 127670);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected bool IsIAsyncEnumerableOrIAsyncEnumeratorReturningAsyncMethod()
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 127682, 128160);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127780, 127823);

                var
                symbol = f_10318_127793_127822(this)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127837, 128122) || true) && (f_10318_127841_127853_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(symbol, 10318, 127841, 127853)?.Kind) == SymbolKind.Method)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 127837, 128122);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127908, 127942);

                    var
                    method = (MethodSymbol)symbol
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 127960, 128107);

                    return f_10318_127967_128024(method, f_10318_128007_128023(this)) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 127967, 128106) || f_10318_128049_128106(method, f_10318_128089_128105(this)));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 127837, 128122);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128136, 128149);

                return false;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 127682, 128160);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_127793_127822(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127793, 127822);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SymbolKind?
                f_10318_127841_127853_M(Microsoft.CodeAnalysis.SymbolKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 127841, 127853);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_128007_128023(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128007, 128023);
                    return return_v;
                }


                bool
                f_10318_127967_128024(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = method.IsAsyncReturningIAsyncEnumerable(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 127967, 128024);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_128089_128105(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128089, 128105);
                    return return_v;
                }


                bool
                f_10318_128049_128106(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                method, Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                compilation)
                {
                    var return_v = method.IsAsyncReturningIAsyncEnumerator(compilation);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 128049, 128106);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 127682, 128160);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 127682, 128160);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        protected virtual TypeSymbol GetCurrentReturnType(out RefKind refKind)
        {
            try
            {
                // LAFHIS
                refKind = default(RefKind);

                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 128172, 128773);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128267, 128326);

                var
                symbol = f_10318_128280_128309(this) as MethodSymbol
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128340, 128697) || true) && ((object)symbol != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 128340, 128697);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128400, 128425);

                    refKind = f_10318_128410_128424(symbol);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128445, 128487);

                    TypeSymbol
                    returnType = f_10318_128469_128486(symbol)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128507, 128644) || true) && ((object)returnType == LambdaSymbol.ReturnTypeIsBeingInferred)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 128507, 128644);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128613, 128625);

                        return null;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 128507, 128644);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128664, 128682);

                    return returnType;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 128340, 128697);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128713, 128736);

                refKind = RefKind.None;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128750, 128762);

                return null;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 128172, 128773);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_128280_128309(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128280, 128309);
                    return return_v;
                }


                Microsoft.CodeAnalysis.RefKind
                f_10318_128410_128424(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.RefKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128410, 128424);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_128469_128486(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ReturnType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128469, 128486);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 128172, 128773);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 128172, 128773);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundStatement BindReturn(ReturnStatementSyntax syntax, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 128785, 135551);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128900, 128927);

                var
                refKind = RefKind.None
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 128941, 129037);

                var
                expressionSyntax = f_10318_128982_129036(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_128964_128981(syntax), 10318, 128964, 129036), diagnostics, out refKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129051, 129078);

                BoundExpression
                arg = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129092, 129830) || true) && (expressionSyntax != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 129092, 129830);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129154, 129224);

                    BindValueKind
                    requiredValueKind = f_10318_129188_129223(this, refKind)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129242, 129308);

                    arg = f_10318_129248_129307(this, expressionSyntax, diagnostics, requiredValueKind);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 129092, 129830);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 129092, 129830);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129461, 129569);

                    var
                    interactiveInitializerMethod = f_10318_129496_129525(this) as SynthesizedInteractiveInitializerMethod
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129587, 129815) || true) && (interactiveInitializerMethod != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 129587, 129815);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129669, 129796);

                        arg = f_10318_129675_129795(f_10318_129702_129753(interactiveInitializerMethod), f_10318_129755_129794(interactiveInitializerMethod));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 129587, 129815);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 129092, 129830);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129846, 129865);

                RefKind
                sigRefKind
                = default(RefKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129879, 129937);

                TypeSymbol
                retType = f_10318_129900_129936(this, out sigRefKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129953, 129976);

                bool
                hasErrors = false
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 129990, 131284) || true) && (f_10318_129994_130014())
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 129990, 131284);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130048, 130132);

                    f_10318_130048_130131(diagnostics, ErrorCode.ERR_ReturnInIterator, syntax.ReturnKeyword.GetLocation());
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130150, 130167);

                    hasErrors = true;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 129990, 131284);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 129990, 131284);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130201, 131284) || true) && (f_10318_130205_130222(this))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130201, 131284);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130256, 130844) || true) && (refKind != RefKind.None)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130256, 130844);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130429, 130517);

                            f_10318_130429_130516(                    // This can happen if we are binding an async anonymous method to a delegate type.
                                                diagnostics, ErrorCode.ERR_MustNotHaveRefReturn, syntax.ReturnKeyword.GetLocation());
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130539, 130556);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130256, 130844);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130256, 130844);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130598, 130844) || true) && (f_10318_130602_130660(this))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130598, 130844);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130702, 130786);

                                f_10318_130702_130785(diagnostics, ErrorCode.ERR_ReturnInIterator, syntax.ReturnKeyword.GetLocation());
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130808, 130825);

                                hasErrors = true;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130598, 130844);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130256, 130844);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130201, 131284);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130201, 131284);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 130878, 131284) || true) && ((object)retType != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 130882, 130966) && (refKind != RefKind.None) != (sigRefKind != RefKind.None)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 130878, 131284);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131000, 131153);

                            var
                            errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 131016, 131039) || ((refKind != RefKind.None
                            && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 131063, 131097)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 131121, 131152))) ? ErrorCode.ERR_MustNotHaveRefReturn
                            : ErrorCode.ERR_MustHaveRefReturn
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131171, 131234);

                            f_10318_131171_131233(diagnostics, errorCode, syntax.ReturnKeyword.GetLocation());
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131252, 131269);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130878, 131284);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 130201, 131284);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 129990, 131284);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131300, 131447) || true) && (arg != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131300, 131447);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131349, 131432);

                    hasErrors |= f_10318_131362_131375(arg) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 131362, 131431) || ((object)f_10318_131388_131396(arg) != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 131380, 131430) && f_10318_131408_131430(f_10318_131408_131416(arg)))));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131300, 131447);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131463, 131624) || true) && (hasErrors)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131463, 131624);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131510, 131609);

                    return f_10318_131517_131608(syntax, refKind, f_10318_131559_131590(this, arg), hasErrors: true);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131463, 131624);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131905, 135413) || true) && ((object)retType != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131905, 135413);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 131966, 135043) || true) && (f_10318_131970_131990(retType) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 131970, 132022) || f_10318_131994_132022(this)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131966, 135043);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132064, 134101) || true) && (arg != null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 132064, 134101);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132129, 132175);

                            var
                            container = f_10318_132145_132174(this)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132201, 132240);

                            var
                            lambda = container as LambdaSymbol
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132266, 134078) || true) && ((object)lambda != null)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 132266, 134078);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132467, 132658);

                                var
                                errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 132483, 132503) || ((f_10318_132483_132503(retType) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 132539, 132578)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 132614, 132657))) ? ErrorCode.ERR_RetNoObjectRequiredLambda
                                : ErrorCode.ERR_TaskRetNoObjectRequiredLambda
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132802, 132854);

                                f_10318_132802_132853(diagnostics, errorCode, f_10318_132832_132852(syntax));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 132884, 132901);

                                hasErrors = true;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 132266, 134078);
                            }

                            else

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 132266, 134078);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 133730, 133909);

                                var
                                errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 133746, 133766) || ((f_10318_133746_133766(retType) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 133802, 133835)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 133871, 133908))) ? ErrorCode.ERR_RetNoObjectRequired
                                : ErrorCode.ERR_TaskRetNoObjectRequired
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 133941, 134004);

                                f_10318_133941_134003(diagnostics, errorCode, f_10318_133971_133991(syntax), container);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134034, 134051);

                                hasErrors = true;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 132266, 134078);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 132064, 134101);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131966, 135043);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131966, 135043);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134183, 135024) || true) && (arg == null)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 134183, 135024);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134369, 134556);

                            var
                            requiredType = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 134388, 134423) || ((f_10318_134388_134423(this) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 134455, 134516)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 134548, 134555))) ? f_10318_134455_134507(retType).Single() : retType
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134584, 134672);

                            f_10318_134584_134671(diagnostics, ErrorCode.ERR_RetObjectRequired, f_10318_134636_134656(syntax), requiredType);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134698, 134715);

                            hasErrors = true;
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 134183, 135024);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 134183, 135024);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134813, 134889);

                            arg = f_10318_134819_134888(this, syntax, diagnostics, arg, sigRefKind, retType);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 134915, 135001);

                            arg = f_10318_134921_135000(this, arg, Binder.ExternalScope, refKind != RefKind.None, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 134183, 135024);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131966, 135043);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131905, 135413);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 131905, 135413);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135177, 135398) || true) && ((object)f_10318_135189_135198_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(arg, 10318, 135189, 135198)?.Type) != null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 135181, 135231) && f_10318_135210_135231(f_10318_135210_135218(arg))))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 135177, 135398);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135273, 135340);

                        f_10318_135273_135339(diagnostics, ErrorCode.ERR_CantReturnVoid, expressionSyntax);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135362, 135379);

                        hasErrors = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 135177, 135398);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 131905, 135413);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135429, 135540);

                return f_10318_135436_135539(syntax, refKind, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 135478, 135487) || ((hasErrors && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 135490, 135521)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 135524, 135527))) ? f_10318_135490_135521(this, arg) : arg, hasErrors);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 128785, 135551);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_128964_128981(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                this_param)
                {
                    var return_v = this_param.Expression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 128964, 128981);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_128982_129036(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    // LAFHIS
                    var return_v = syntax.CheckAndUnwrapRefExpression(diagnostics, out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 128982, 129036);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10318_129188_129223(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetRequiredReturnValueKind(refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 129188, 129223);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_129248_129307(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 129248, 129307);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_129496_129525(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 129496, 129525);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                f_10318_129702_129753(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedInteractiveInitializerMethod
                symbol)
                {
                    var return_v = symbol.GetNonNullSyntaxNode();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 129702, 129753);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_129755_129794(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedInteractiveInitializerMethod
                this_param)
                {
                    var return_v = this_param.ResultType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 129755, 129794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundDefaultExpression
                f_10318_129675_129795(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundDefaultExpression((Microsoft.CodeAnalysis.SyntaxNode)syntax, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 129675, 129795);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_129900_129936(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetCurrentReturnType(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 129900, 129936);
                    return return_v;
                }


                bool
                f_10318_129994_130014()
                {
                    var return_v = IsDirectlyInIterator;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 129994, 130014);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_130048_130131(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 130048, 130131);
                    return return_v;
                }


                bool
                f_10318_130205_130222(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsInAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 130205, 130222);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_130429_130516(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 130429, 130516);
                    return return_v;
                }


                bool
                f_10318_130602_130660(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsIAsyncEnumerableOrIAsyncEnumeratorReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 130602, 130660);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_130702_130785(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 130702, 130785);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_131171_131233(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131171, 131233);
                    return return_v;
                }


                bool
                f_10318_131362_131375(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 131362, 131375);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_131388_131396(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 131388, 131396);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_131408_131416(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 131408, 131416);
                    return return_v;
                }


                bool
                f_10318_131408_131430(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131408, 131430);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_131559_131590(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131559, 131590);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundReturnStatement
                f_10318_131517_131608(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                syntax, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expressionOpt, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundReturnStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, refKind, expressionOpt, hasErrors: hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131517, 131608);
                    return return_v;
                }


                bool
                f_10318_131970_131990(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131970, 131990);
                    return return_v;
                }


                bool
                f_10318_131994_132022(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsTaskReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 131994, 132022);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_132145_132174(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 132145, 132174);
                    return return_v;
                }


                bool
                f_10318_132483_132503(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 132483, 132503);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_132832_132852(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                this_param)
                {
                    var return_v = this_param.ReturnKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 132832, 132852);
                    return return_v;
                }


                int
                f_10318_132802_132853(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 132802, 132853);
                    return 0;
                }


                bool
                f_10318_133746_133766(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 133746, 133766);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_133971_133991(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                this_param)
                {
                    var return_v = this_param.ReturnKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 133971, 133991);
                    return return_v;
                }


                int
                f_10318_133941_134003(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token, params object[]
                args)
                {
                    Error(diagnostics, code, token, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 133941, 134003);
                    return 0;
                }


                bool
                f_10318_134388_134423(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsGenericTaskReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 134388, 134423);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol>
                f_10318_134455_134507(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol)
                {
                    var return_v = symbol.GetMemberTypeArgumentsNoUseSiteDiagnostics();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 134455, 134507);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_134636_134656(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                this_param)
                {
                    var return_v = this_param.ReturnKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 134636, 134656);
                    return return_v;
                }


                int
                f_10318_134584_134671(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token, params object[]
                args)
                {
                    Error(diagnostics, code, token, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 134584, 134671);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_134819_134888(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.BoundExpression
                argument, Microsoft.CodeAnalysis.RefKind
                returnRefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType)
                {
                    var return_v = this_param.CreateReturnConversion((Microsoft.CodeAnalysis.SyntaxNode)syntax, diagnostics, argument, returnRefKind, returnType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 134819, 134888);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_134921_135000(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                escapeTo, bool
                isByRef, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateEscape(expr, escapeTo, isByRef, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 134921, 135000);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_135189_135198_M(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 135189, 135198);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_135210_135218(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 135210, 135218);
                    return return_v;
                }


                bool
                f_10318_135210_135231(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 135210, 135231);
                    return return_v;
                }


                int
                f_10318_135273_135339(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 135273, 135339);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_135490_135521(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 135490, 135521);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundReturnStatement
                f_10318_135436_135539(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax
                syntax, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                expressionOpt, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundReturnStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, refKind, expressionOpt, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 135436, 135539);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 128785, 135551);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 128785, 135551);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundExpression CreateReturnConversion(
                    SyntaxNode syntax,
                    DiagnosticBag diagnostics,
                    BoundExpression argument,
                    RefKind returnRefKind,
                    TypeSymbol returnType)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 135563, 138897);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135920, 135942);

                Conversion
                conversion
                = default(Conversion);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 135956, 135999);

                bool
                badAsyncReturnAlreadyReported = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136013, 136063);

                HashSet<DiagnosticInfo>
                useSiteDiagnostics = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136077, 136874) || true) && (f_10318_136081_136098(this))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 136077, 136874);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136132, 136176);

                    f_10318_136132_136175(returnRefKind == RefKind.None);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136196, 136684) || true) && (!f_10318_136201_136236(this))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 136196, 136684);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136278, 136315);

                        conversion = Conversion.NoConversion;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136337, 136374);

                        badAsyncReturnAlreadyReported = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 136196, 136684);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 136196, 136684);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136456, 136534);

                        returnType = f_10318_136469_136524(returnType).Single();
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136556, 136665);

                        conversion = f_10318_136569_136664(f_10318_136569_136585(this), argument, returnType, ref useSiteDiagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 136196, 136684);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 136077, 136874);
                }

                else

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 136077, 136874);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136750, 136859);

                    conversion = f_10318_136763_136858(f_10318_136763_136779(this), argument, returnType, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 136077, 136874);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136890, 136934);

                f_10318_136890_136933(
                            diagnostics, syntax, useSiteDiagnostics);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 136950, 138741) || true) && (f_10318_136954_136976_M(!argument.HasAnyErrors))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 136950, 138741);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137010, 138726) || true) && (returnRefKind != RefKind.None)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137010, 138726);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137085, 137511) || true) && (conversion.Kind != ConversionKind.Identity)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137085, 137511);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137181, 137280);

                            f_10318_137181_137279(diagnostics, ErrorCode.ERR_RefReturnMustHaveIdentityConversion, argument.Syntax, returnType);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137306, 137342);

                            argument = f_10318_137317_137341(argument);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137085, 137511);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137085, 137511);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137440, 137488);

                            return f_10318_137447_137487(this, argument, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137085, 137511);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137010, 138726);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137010, 138726);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137553, 138726) || true) && (f_10318_137557_137579_M(!conversion.IsImplicit) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 137557, 137602) || f_10318_137583_137602_M(!conversion.IsValid)))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137553, 138726);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137644, 138707) || true) && (!badAsyncReturnAlreadyReported)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137644, 138707);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137728, 137750);

                                RefKind
                                unusedRefKind
                                = default(RefKind);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 137776, 138684) || true) && (f_10318_137780_137815(this) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 137780, 137934) && f_10318_137819_137934(f_10318_137837_137850(argument), f_10318_137852_137896(this, out unusedRefKind), TypeCompareKind.ConsiderEverything2)))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137776, 138684);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 138123, 138211);

                                    f_10318_138123_138210(diagnostics, ErrorCode.ERR_BadAsyncReturnExpression, argument.Syntax, returnType);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137776, 138684);
                                }

                                else

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 137776, 138684);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 138325, 138421);

                                    f_10318_138325_138420(this, diagnostics, argument.Syntax, conversion, argument, returnType);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 138451, 138657) || true) && (f_10318_138455_138484(this) is LambdaSymbol)
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 138451, 138657);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 138566, 138626);

                                        f_10318_138566_138625(this, argument.Syntax, diagnostics);
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 138451, 138657);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137776, 138684);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137644, 138707);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137553, 138726);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 137010, 138726);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 136950, 138741);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 138757, 138886);

                return f_10318_138764_138885(this, argument.Syntax, argument, conversion, isCast: false, conversionGroupOpt: null, returnType, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 135563, 138897);

                bool
                f_10318_136081_136098(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsInAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136081, 136098);
                    return return_v;
                }


                int
                f_10318_136132_136175(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136132, 136175);
                    return 0;
                }


                bool
                f_10318_136201_136236(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsGenericTaskReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136201, 136236);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol>
                f_10318_136469_136524(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                symbol)
                {
                    var return_v = symbol.GetMemberTypeArgumentsNoUseSiteDiagnostics();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136469, 136524);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_136569_136585(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 136569, 136585);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_136569_136664(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136569, 136664);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_136763_136779(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 136763, 136779);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversion
                f_10318_136763_136858(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                sourceExpression, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.ClassifyConversionFromExpression(sourceExpression, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136763, 136858);
                    return return_v;
                }


                bool
                f_10318_136890_136933(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add(node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 136890, 136933);
                    return return_v;
                }


                bool
                f_10318_136954_136976_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 136954, 136976);
                    return return_v;
                }


                int
                f_10318_137181_137279(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137181, 137279);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_137317_137341(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.WithHasErrors();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137317, 137341);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_137447_137487(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137447, 137487);
                    return return_v;
                }


                bool
                f_10318_137557_137579_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 137557, 137579);
                    return return_v;
                }


                bool
                f_10318_137583_137602_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 137583, 137602);
                    return return_v;
                }


                bool
                f_10318_137780_137815(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsGenericTaskReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137780, 137815);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_137837_137850(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 137837, 137850);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_137852_137896(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetCurrentReturnType(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137852, 137896);
                    return return_v;
                }


                bool
                f_10318_137819_137934(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 137819, 137934);
                    return return_v;
                }


                int
                f_10318_138123_138210(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 138123, 138210);
                    return 0;
                }


                int
                f_10318_138325_138420(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, Microsoft.CodeAnalysis.CSharp.BoundExpression
                operand, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                targetType)
                {
                    this_param.GenerateImplicitConversionError(diagnostics, syntax, conversion, operand, targetType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 138325, 138420);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_138455_138484(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 138455, 138484);
                    return return_v;
                }


                int
                f_10318_138566_138625(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.ReportCantConvertLambdaReturn(syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 138566, 138625);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_138764_138885(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                source, Microsoft.CodeAnalysis.CSharp.Conversion
                conversion, bool
                isCast, Microsoft.CodeAnalysis.CSharp.ConversionGroup?
                conversionGroupOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateConversion(syntax, source, conversion, isCast: isCast, conversionGroupOpt: conversionGroupOpt, destination, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 138764, 138885);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 135563, 138897);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 135563, 138897);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundTryStatement BindTryStatement(TryStatementSyntax node, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 138909, 139423);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139028, 139055);

                f_10318_139028_139054(node != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139071, 139129);

                var
                tryBlock = f_10318_139086_139128(this, f_10318_139104_139114(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139143, 139204);

                var
                catchBlocks = f_10318_139161_139203(this, f_10318_139177_139189(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139218, 139323);

                var
                finallyBlockOpt = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 139240, 139262) || (((f_10318_139241_139253(node) != null) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 139265, 139315)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 139318, 139322))) ? f_10318_139265_139315(this, f_10318_139283_139301(f_10318_139283_139295(node)), diagnostics) : null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139337, 139412);

                return f_10318_139344_139411(node, tryBlock, catchBlocks, finallyBlockOpt);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 138909, 139423);

                int
                f_10318_139028_139054(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139028, 139054);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_139104_139114(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                this_param)
                {
                    var return_v = this_param.Block;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 139104, 139114);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_139086_139128(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139086, 139128);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>
                f_10318_139177_139189(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                this_param)
                {
                    var return_v = this_param.Catches;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 139177, 139189);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                f_10318_139161_139203(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>
                catchClauses, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindCatchBlocks(catchClauses, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139161, 139203);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax?
                f_10318_139241_139253(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                this_param)
                {
                    var return_v = this_param.Finally;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 139241, 139253);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax
                f_10318_139283_139295(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                this_param)
                {
                    var return_v = this_param.Finally;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 139283, 139295);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_139283_139301(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax
                this_param)
                {
                    var return_v = this_param.Block;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 139283, 139301);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_139265_139315(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139265, 139315);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundTryStatement
                f_10318_139344_139411(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundBlock
                tryBlock, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                catchBlocks, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                finallyBlockOpt)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundTryStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, tryBlock, catchBlocks, finallyBlockOpt);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139344, 139411);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 138909, 139423);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 138909, 139423);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private ImmutableArray<BoundCatchBlock> BindCatchBlocks(SyntaxList<CatchClauseSyntax> catchClauses, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 139435, 140490);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139586, 139613);

                int
                n = catchClauses.Count
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139627, 139731) || true) && (n == 0)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 139627, 139731);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139671, 139716);

                    return ImmutableArray<BoundCatchBlock>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 139627, 139731);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139747, 139810);

                var
                catchBlocks = f_10318_139765_139809(n)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139824, 139848);

                var
                hasCatchAll = false
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139864, 140425);
                    foreach (var catchSyntax in f_10318_139892_139904_I(catchClauses))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 139864, 140425);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139938, 140100) || true) && (hasCatchAll)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 139938, 140100);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 139995, 140081);

                            f_10318_139995_140080(diagnostics, ErrorCode.ERR_TooManyCatches, catchSyntax.CatchKeyword.GetLocation());
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 139938, 140100);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140120, 140166);

                        var
                        catchBinder = f_10318_140138_140165(this, catchSyntax)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140184, 140267);

                        var
                        catchBlock = f_10318_140201_140266(catchBinder, catchSyntax, catchBlocks, diagnostics)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140285, 140313);

                        f_10318_140285_140312(catchBlocks, catchBlock);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140333, 140410);

                        hasCatchAll |= f_10318_140348_140371(catchSyntax) == null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 140348, 140409) && f_10318_140383_140401(catchSyntax) == null);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 139864, 140425);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 562);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 562);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140439, 140479);

                return f_10318_140446_140478(catchBlocks);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 139435, 140490);

                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                f_10318_139765_139809(int
                capacity)
                {
                    var return_v = ArrayBuilder<BoundCatchBlock>.GetInstance(capacity);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139765, 139809);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSDiagnosticInfo
                f_10318_139995_140080(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location)
                {
                    var return_v = diagnostics.Add(code, location);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139995, 140080);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_140138_140165(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 140138, 140165);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCatchBlock
                f_10318_140201_140266(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                node, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                previousBlocks, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindCatchBlock(node, previousBlocks, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 140201, 140266);
                    return return_v;
                }


                int
                f_10318_140285_140312(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                this_param, Microsoft.CodeAnalysis.CSharp.BoundCatchBlock
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 140285, 140312);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax?
                f_10318_140348_140371(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 140348, 140371);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax?
                f_10318_140383_140401(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.Filter;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 140383, 140401);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>
                f_10318_139892_139904_I(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 139892, 139904);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                f_10318_140446_140478(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 140446, 140478);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 139435, 140490);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 139435, 140490);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundCatchBlock BindCatchBlock(CatchClauseSyntax node, ArrayBuilder<BoundCatchBlock> previousBlocks, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 140502, 146544);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140662, 140684);

                bool
                hasError = false
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140698, 140721);

                TypeSymbol
                type = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140735, 140770);

                BoundExpression
                boundFilter = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140784, 140819);

                var
                declaration = f_10318_140802_140818(node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 140833, 142200) || true) && (declaration != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 140833, 142200);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141281, 141338);

                    type = f_10318_141288_141332(this, f_10318_141302_141318(declaration), diagnostics).Type;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141356, 141391);

                    f_10318_141356_141390((object)type != null);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141411, 142185) || true) && (f_10318_141415_141433(type))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 141411, 142185);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141475, 141491);

                        hasError = true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 141411, 142185);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 141411, 142185);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141573, 141623);

                        HashSet<DiagnosticInfo>
                        useSiteDiagnostics = null
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141645, 141715);

                        TypeSymbol
                        effectiveType = f_10318_141672_141714(type, ref useSiteDiagnostics)
                        ;

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141737, 142166) || true) && (!f_10318_141742_141808(f_10318_141742_141753(), effectiveType, ref useSiteDiagnostics))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 141737, 142166);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 141952, 142021);

                            f_10318_141952_142020(diagnostics, ErrorCode.ERR_BadExceptionType, f_10318_142003_142019(declaration));
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142047, 142063);

                            hasError = true;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142089, 142143);

                            f_10318_142089_142142(diagnostics, f_10318_142105_142121(declaration), useSiteDiagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 141737, 142166);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 141411, 142185);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 140833, 142200);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142216, 142241);

                var
                filter = f_10318_142229_142240(node)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142255, 142501) || true) && (filter != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 142255, 142501);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142307, 142349);

                    var
                    filterBinder = f_10318_142326_142348(this, filter)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142367, 142431);

                    boundFilter = f_10318_142381_142430(filterBinder, filter, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142449, 142486);

                    hasError |= f_10318_142461_142485(boundFilter);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 142255, 142501);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142517, 145373) || true) && (!hasError)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 142517, 145373);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142752, 142812);

                    f_10318_142752_142811(((object)type == null) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 142765, 142810) || !f_10318_142792_142810(type)));
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142830, 145358);
                        foreach (var previousBlock in f_10318_142860_142874_I(previousBlocks))
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 142830, 145358);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 142916, 142966);

                            var
                            previousType = f_10318_142935_142965(previousBlock)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 143468, 145339) || true) && (f_10318_143472_143504(previousBlock) == null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 143472, 143544) && (object)previousType != null) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 143472, 143575) && !f_10318_143549_143575(previousType)))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 143468, 145339);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 143625, 145316) || true) && ((object)type != null)
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 143625, 145316);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 143707, 143757);

                                    HashSet<DiagnosticInfo>
                                    useSiteDiagnostics = null
                                    ;

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 143789, 144375) || true) && (f_10318_143793_143889(f_10318_143793_143804(), type, previousType, ref useSiteDiagnostics))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 143789, 144375);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 144083, 144166);

                                        f_10318_144083_144165(diagnostics, ErrorCode.ERR_UnreachableCatch, f_10318_144134_144150(declaration), previousType);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 144200, 144254);

                                        f_10318_144200_144253(diagnostics, f_10318_144216_144232(declaration), useSiteDiagnostics);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 144288, 144304);

                                        hasError = true;
                                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 144338, 144344);

                                        break;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 143789, 144375);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 144407, 144461);

                                    f_10318_144407_144460(
                                                                diagnostics, f_10318_144423_144439(declaration), useSiteDiagnostics);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 143625, 145316);
                                }

                                else
                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 143625, 145316);

                                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 144519, 145316) || true) && (f_10318_144523_144653(previousType, f_10318_144555_144615(f_10318_144555_144566(), WellKnownType.System_Exception), TypeCompareKind.ConsiderEverything2) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 144523, 144760) && f_10318_144691_144760(f_10318_144691_144717(f_10318_144691_144702()))))
                                    )

                                    {
                                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 144519, 145316);
                                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145176, 145253);

                                        f_10318_145176_145252(diagnostics, ErrorCode.WRN_UnreachableGeneralCatch, f_10318_145234_145251(node));
                                        DynAbs.Tracing.TraceSender.TraceBreak(10318, 145283, 145289);

                                        break;
                                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 144519, 145316);
                                    }
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 143625, 145316);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 143468, 145339);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 142830, 145358);
                        }
                    }
                    catch (System.Exception)
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 2529);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 2529);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 142517, 145373);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145389, 145418);

                var
                binder = f_10318_145402_145417(this, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145432, 145461);

                f_10318_145432_145460(binder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145477, 145553);

                ImmutableArray<LocalSymbol>
                locals = f_10318_145514_145552(binder, node)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145567, 145606);

                BoundExpression
                exceptionSource = null
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145620, 145664);

                LocalSymbol
                local = locals.FirstOrDefault()
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145680, 146320) || true) && (f_10318_145684_145706_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(local, 10318, 145684, 145706)?.DeclarationKind) == LocalDeclarationKind.CatchVariable)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 145680, 146320);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 145778, 145895);

                    f_10318_145778_145894(f_10318_145791_145815(f_10318_145791_145801(local)) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 145791, 145893) || (f_10318_145820_145892(f_10318_145838_145848(local), type, TypeCompareKind.ConsiderEverything2))));
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146115, 146192);

                    hasError |= f_10318_146127_146191(this, local, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146212, 146305);

                    exceptionSource = f_10318_146230_146304(declaration, local, ConstantValue.NotAvailable, f_10318_146293_146303(local));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 145680, 146320);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146336, 146391);

                var
                block = f_10318_146348_146390(this, f_10318_146366_146376(node), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146405, 146533);

                return f_10318_146412_146532(node, locals, exceptionSource, type, exceptionFilterPrologueOpt: null, boundFilter, block, hasError);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 140502, 146544);

                Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax?
                f_10318_140802_140818(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.Declaration;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 140802, 140818);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_141302_141318(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 141302, 141318);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations
                f_10318_141288_141332(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindType((Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)syntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141288, 141332);
                    return return_v;
                }


                int
                f_10318_141356_141390(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141356, 141390);
                    return 0;
                }


                bool
                f_10318_141415_141433(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141415, 141433);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_141672_141714(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                this_param, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.EffectiveType(ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141672, 141714);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_141742_141753()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 141742, 141753);
                    return return_v;
                }


                bool
                f_10318_141742_141808(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = this_param.IsExceptionType(type, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141742, 141808);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_142003_142019(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 142003, 142019);
                    return return_v;
                }


                int
                f_10318_141952_142020(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 141952, 142020);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_142105_142121(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 142105, 142121);
                    return return_v;
                }


                bool
                f_10318_142089_142142(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142089, 142142);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax?
                f_10318_142229_142240(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.Filter;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 142229, 142240);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_142326_142348(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142326, 142348);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_142381_142430(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
                filter, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindCatchFilter(filter, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142381, 142430);
                    return return_v;
                }


                bool
                f_10318_142461_142485(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 142461, 142485);
                    return return_v;
                }


                bool
                f_10318_142792_142810(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142792, 142810);
                    return return_v;
                }


                int
                f_10318_142752_142811(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142752, 142811);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_142935_142965(Microsoft.CodeAnalysis.CSharp.BoundCatchBlock
                this_param)
                {
                    var return_v = this_param.ExceptionTypeOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 142935, 142965);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression?
                f_10318_143472_143504(Microsoft.CodeAnalysis.CSharp.BoundCatchBlock
                this_param)
                {
                    var return_v = this_param.ExceptionFilterOpt;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 143472, 143504);
                    return return_v;
                }


                bool
                f_10318_143549_143575(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 143549, 143575);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Conversions
                f_10318_143793_143804()
                {
                    var return_v = Conversions;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 143793, 143804);
                    return return_v;
                }


                bool
                f_10318_143793_143889(Microsoft.CodeAnalysis.CSharp.Conversions
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                source, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                destination, ref System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>?
                useSiteDiagnostics)
                {
                    var return_v = this_param.HasIdentityOrImplicitReferenceConversion(source, destination, ref useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 143793, 143889);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_144134_144150(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax?
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144134, 144150);
                    return return_v;
                }


                int
                f_10318_144083_144165(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                syntax, params object[]
                args)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 144083, 144165);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_144216_144232(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144216, 144232);
                    return return_v;
                }


                bool
                f_10318_144200_144253(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 144200, 144253);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                f_10318_144423_144439(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax?
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144423, 144439);
                    return return_v;
                }


                bool
                f_10318_144407_144460(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax
                node, System.Collections.Generic.HashSet<Microsoft.CodeAnalysis.DiagnosticInfo>
                useSiteDiagnostics)
                {
                    var return_v = diagnostics.Add((Microsoft.CodeAnalysis.SyntaxNode)node, useSiteDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 144407, 144460);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_144555_144566()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144555, 144566);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                f_10318_144555_144615(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param, Microsoft.CodeAnalysis.WellKnownType
                type)
                {
                    var return_v = this_param.GetWellKnownType(type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 144555, 144615);
                    return return_v;
                }


                bool
                f_10318_144523_144653(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, (Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol)right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 144523, 144653);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                f_10318_144691_144702()
                {
                    var return_v = Compilation;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144691, 144702);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol
                f_10318_144691_144717(Microsoft.CodeAnalysis.CSharp.CSharpCompilation
                this_param)
                {
                    var return_v = this_param.SourceAssembly;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144691, 144717);
                    return return_v;
                }


                bool
                f_10318_144691_144760(Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol
                this_param)
                {
                    var return_v = this_param.RuntimeCompatibilityWrapNonExceptionThrows;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 144691, 144760);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_145234_145251(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.CatchKeyword;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 145234, 145251);
                    return return_v;
                }


                int
                f_10318_145176_145252(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145176, 145252);
                    return 0;
                }


                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                f_10318_142860_142874_I(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundCatchBlock>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 142860, 142874);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_145402_145417(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145402, 145417);
                    return return_v;
                }


                int
                f_10318_145432_145460(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145432, 145460);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_145514_145552(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145514, 145552);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind?
                f_10318_145684_145706_M(Microsoft.CodeAnalysis.CSharp.Symbols.LocalDeclarationKind?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 145684, 145706);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_145791_145801(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 145791, 145801);
                    return return_v;
                }


                bool
                f_10318_145791_145815(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145791, 145815);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_145838_145848(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 145838, 145848);
                    return return_v;
                }


                bool
                f_10318_145820_145892(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                left, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                right, Microsoft.CodeAnalysis.TypeCompareKind
                comparison)
                {
                    var return_v = TypeSymbol.Equals(left, right, comparison);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145820, 145892);
                    return return_v;
                }


                int
                f_10318_145778_145894(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 145778, 145894);
                    return 0;
                }


                bool
                f_10318_146127_146191(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                symbol, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateDeclarationNameConflictsInScope((Microsoft.CodeAnalysis.CSharp.Symbol)symbol, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 146127, 146191);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_146293_146303(Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 146293, 146303);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundLocal
                f_10318_146230_146304(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax?
                syntax, Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol
                localSymbol, Microsoft.CodeAnalysis.ConstantValue
                constantValueOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundLocal((Microsoft.CodeAnalysis.SyntaxNode?)syntax, localSymbol, constantValueOpt, type);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 146230, 146304);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_146366_146376(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                this_param)
                {
                    var return_v = this_param.Block;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 146366, 146376);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_146348_146390(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindEmbeddedBlock(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 146348, 146390);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundCatchBlock
                f_10318_146412_146532(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                exceptionSourceOpt, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                exceptionTypeOpt, Microsoft.CodeAnalysis.CSharp.BoundStatementList?
                exceptionFilterPrologueOpt, Microsoft.CodeAnalysis.CSharp.BoundExpression?
                exceptionFilterOpt, Microsoft.CodeAnalysis.CSharp.BoundBlock
                body, bool
                isSynthesizedAsyncCatchAll)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundCatchBlock((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, exceptionSourceOpt, exceptionTypeOpt, exceptionFilterPrologueOpt: exceptionFilterPrologueOpt, exceptionFilterOpt, body, isSynthesizedAsyncCatchAll);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 146412, 146532);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 140502, 146544);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 140502, 146544);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundExpression BindCatchFilter(CatchFilterClauseSyntax filter, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 146556, 147662);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146679, 146774);

                BoundExpression
                boundFilter = f_10318_146709_146773(this, f_10318_146736_146759(filter), diagnostics)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 146788, 147616) || true) && (f_10318_146792_146817(boundFilter) != ConstantValue.NotAvailable)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 146788, 147616);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 147052, 147423);

                    var
                    errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 147068, 147106) || ((f_10318_147068_147106(f_10318_147068_147093(boundFilter)) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 147130, 147164)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 147188, 147422))) ? ErrorCode.WRN_FilterIsConstantTrue
                    : (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 147188, 147279) || (((f_10318_147189_147209(f_10318_147189_147202(filter)) is TryStatementSyntax s && (DynAbs.Tracing.TraceSender.Expression_True(10318, 147189, 147257) && s.Catches.Count == 1) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 147189, 147278) && f_10318_147261_147270(s) == null))
                    && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 147307, 147359)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 147387, 147422))) ? ErrorCode.WRN_FilterIsConstantFalseRedundantTryCatch
                    : ErrorCode.WRN_FilterIsConstantFalse
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 147546, 147601);

                    f_10318_147546_147600(diagnostics, errorCode, f_10318_147576_147599(filter));
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 146788, 147616);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 147632, 147651);

                return boundFilter;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 146556, 147662);

                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_146736_146759(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
                this_param)
                {
                    var return_v = this_param.FilterExpression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 146736, 146759);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_146709_146773(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindBooleanExpression(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 146709, 146773);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue?
                f_10318_146792_146817(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 146792, 146817);
                    return return_v;
                }


                Microsoft.CodeAnalysis.ConstantValue
                f_10318_147068_147093(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.ConstantValue;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147068, 147093);
                    return return_v;
                }


                bool
                f_10318_147068_147106(Microsoft.CodeAnalysis.ConstantValue
                this_param)
                {
                    var return_v = this_param.BooleanValue
                    ;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147068, 147106);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10318_147189_147202(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147189, 147202);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                f_10318_147189_147209(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147189, 147209);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax?
                f_10318_147261_147270(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax
                this_param)
                {
                    var return_v = this_param.Finally;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147261, 147270);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                f_10318_147576_147599(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax
                this_param)
                {
                    var return_v = this_param.FilterExpression;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147576, 147599);
                    return return_v;
                }


                int
                f_10318_147546_147600(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 147546, 147600);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 146556, 147662);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 146556, 147662);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private void ReportCantConvertLambdaReturn(SyntaxNode syntax, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 147756, 149127);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 147951, 148061) || true) && (f_10318_147955_147968(syntax) is QueryClauseSyntax || (DynAbs.Tracing.TraceSender.Expression_False(10318, 147955, 148035) || f_10318_147993_148006(syntax) is SelectOrGroupClauseSyntax))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 147951, 148061);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148054, 148061);

                    return;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 147951, 148061);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148077, 148136);

                var
                lambda = f_10318_148090_148119(this) as LambdaSymbol
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148150, 149116) || true) && ((object)lambda != null)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 148150, 149116);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148210, 148264);

                    Location
                    location = f_10318_148230_148263(syntax)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148282, 149101) || true) && (f_10318_148286_148303(this))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 148282, 149101);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148508, 148679);

                        f_10318_148508_148678(diagnostics, ErrorCode.ERR_CantConvAsyncAnonFuncReturns, location, f_10318_148631_148658(f_10318_148631_148647(lambda)), f_10318_148660_148677(lambda));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 148282, 149101);
                    }

                    else

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 148282, 149101);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 148935, 149082);

                        f_10318_148935_149081(diagnostics, ErrorCode.ERR_CantConvAnonMethReturns, location, f_10318_149053_149080(f_10318_149053_149069(lambda)));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 148282, 149101);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 148150, 149116);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 147756, 149127);

                Microsoft.CodeAnalysis.SyntaxNode?
                f_10318_147955_147968(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147955, 147968);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxNode?
                f_10318_147993_148006(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Parent;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 147993, 148006);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_148090_148119(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 148090, 148119);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_148230_148263(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = GetLocationForDiagnostics(node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 148230, 148263);
                    return return_v;
                }


                bool
                f_10318_148286_148303(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsInAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 148286, 148303);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.MessageID
                f_10318_148631_148647(Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                this_param)
                {
                    var return_v = this_param.MessageID;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 148631, 148647);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LocalizableErrorArgument
                f_10318_148631_148658(Microsoft.CodeAnalysis.CSharp.MessageID
                id)
                {
                    var return_v = id.Localize();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 148631, 148658);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_148660_148677(Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                this_param)
                {
                    var return_v = this_param.ReturnType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 148660, 148677);
                    return return_v;
                }


                int
                f_10318_148508_148678(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 148508, 148678);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.MessageID
                f_10318_149053_149069(Microsoft.CodeAnalysis.CSharp.Symbols.LambdaSymbol
                this_param)
                {
                    var return_v = this_param.MessageID;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149053, 149069);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LocalizableErrorArgument
                f_10318_149053_149080(Microsoft.CodeAnalysis.CSharp.MessageID
                id)
                {
                    var return_v = id.Localize();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 149053, 149080);
                    return return_v;
                }


                int
                f_10318_148935_149081(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.Location
                location, params object[]
                args)
                {
                    Error(diagnostics, code, location, args);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 148935, 149081);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 147756, 149127);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 147756, 149127);
            }
        }

        private static Location GetLocationForDiagnostics(SyntaxNode node)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 149139, 149927);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 149230, 149879);

                switch (node)
                {

                    case LambdaExpressionSyntax lambdaSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 149230, 149879);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 149339, 149496);

                        return f_10318_149346_149495(f_10318_149362_149385(lambdaSyntax), Text.TextSpan.FromBounds(f_10318_149437_149459(lambdaSyntax), lambdaSyntax.ArrowToken.Span.End));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 149230, 149879);

                    case AnonymousMethodExpressionSyntax anonymousMethodSyntax:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 149230, 149879);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 149597, 149864);

                        return f_10318_149604_149863(f_10318_149620_149652(anonymousMethodSyntax), Text.TextSpan.FromBounds(f_10318_149704_149735(anonymousMethodSyntax), f_10318_149766_149811_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_149766_149801(anonymousMethodSyntax), 10318, 149766, 149811)?.Span.End) ?? (DynAbs.Tracing.TraceSender.Expression_Null<int?>(10318, 149766, 149861) ?? anonymousMethodSyntax.DelegateKeyword.Span.End)));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 149230, 149879);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 149895, 149916);

                return f_10318_149902_149915(node);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 149139, 149927);

                Microsoft.CodeAnalysis.SyntaxTree
                f_10318_149362_149385(Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149362, 149385);
                    return return_v;
                }


                int
                f_10318_149437_149459(Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax
                this_param)
                {
                    var return_v = this_param.SpanStart;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149437, 149459);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_149346_149495(Microsoft.CodeAnalysis.SyntaxTree
                syntaxTree, Microsoft.CodeAnalysis.Text.TextSpan
                textSpan)
                {
                    var return_v = Location.Create(syntaxTree, textSpan);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 149346, 149495);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxTree
                f_10318_149620_149652(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
                this_param)
                {
                    var return_v = this_param.SyntaxTree;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149620, 149652);
                    return return_v;
                }


                int
                f_10318_149704_149735(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
                this_param)
                {
                    var return_v = this_param.SpanStart;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149704, 149735);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax?
                f_10318_149766_149801(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax
                this_param)
                {
                    var return_v = this_param.ParameterList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149766, 149801);
                    return return_v;
                }


                int?
                f_10318_149766_149811_M(int?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149766, 149811);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_149604_149863(Microsoft.CodeAnalysis.SyntaxTree
                syntaxTree, Microsoft.CodeAnalysis.Text.TextSpan
                textSpan)
                {
                    var return_v = Location.Create(syntaxTree, textSpan);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 149604, 149863);
                    return return_v;
                }


                Microsoft.CodeAnalysis.Location
                f_10318_149902_149915(Microsoft.CodeAnalysis.SyntaxNode
                this_param)
                {
                    var return_v = this_param.Location;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 149902, 149915);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 149139, 149927);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 149139, 149927);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsValidStatementExpression(SyntaxNode syntax, BoundExpression expression)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 149939, 150926);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150057, 150125);

                bool
                syntacticallyValid = f_10318_150083_150124(syntax)
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150139, 150224) || true) && (!syntacticallyValid)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 150139, 150224);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150196, 150209);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 150139, 150224);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150240, 150329) || true) && (f_10318_150244_150267(expression))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 150240, 150329);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150301, 150314);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 150240, 150329);
                }

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150719, 150887) || true) && (f_10318_150723_150738(expression) == BoundKind.DelegateCreationExpression || (DynAbs.Tracing.TraceSender.Expression_False(10318, 150723, 150825) || f_10318_150782_150797(expression) == BoundKind.NameOfOperator))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 150719, 150887);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150859, 150872);

                    return false;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 150719, 150887);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 150903, 150915);

                return true;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 149939, 150926);

                bool
                f_10318_150083_150124(Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    var return_v = SyntaxFacts.IsStatementExpression(syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 150083, 150124);
                    return return_v;
                }


                bool
                f_10318_150244_150267(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.IsSuppressed;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 150244, 150267);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_150723_150738(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 150723, 150738);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_150782_150797(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 150782, 150797);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 149939, 150926);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 149939, 150926);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal BoundBlock CreateBlockFromExpression(CSharpSyntaxNode node, ImmutableArray<LocalSymbol> locals, RefKind refKind, BoundExpression expression, ExpressionSyntax expressionSyntax, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 151144, 156045);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151380, 151402);

                RefKind
                returnRefKind
                = default(RefKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151416, 151473);

                var
                returnType = f_10318_151433_151472(this, out returnRefKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151487, 151538);

                var
                syntax = expressionSyntax ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax>(10318, 151500, 151537) ?? expression.Syntax)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151554, 151579);

                BoundStatement
                statement
                = default(BoundStatement);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151593, 155795) || true) && (f_10318_151597_151614(this) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 151597, 151641) && refKind != RefKind.None))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 151593, 155795);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151775, 151838);

                    f_10318_151775_151837(diagnostics, ErrorCode.ERR_MustNotHaveRefReturn, syntax);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151856, 151908);

                    expression = f_10318_151869_151907(this, expression);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 151926, 152024);

                    statement = new BoundReturnStatement(syntax, refKind, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 151938, 152023) };
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 151593, 155795);
                }

                else
                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 151593, 155795);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152058, 155795) || true) && ((object)returnType != null)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152058, 155795);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152122, 154812) || true) && ((refKind != RefKind.None) != (returnRefKind != RefKind.None) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 152126, 152234) && f_10318_152190_152205(expression) != BoundKind.ThrowExpression))
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152122, 154812);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152276, 152437);

                            var
                            errorCode = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 152292, 152315) || ((refKind != RefKind.None
                            && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 152343, 152377)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 152405, 152436))) ? ErrorCode.ERR_MustNotHaveRefReturn
                            : ErrorCode.ERR_MustHaveRefReturn
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152459, 152497);

                            f_10318_152459_152496(diagnostics, errorCode, syntax);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152519, 152571);

                            expression = f_10318_152532_152570(this, expression);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152593, 152696);

                            statement = new BoundReturnStatement(syntax, RefKind.None, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 152605, 152695) };
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152122, 154812);
                        }

                        else
                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152122, 154812);

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152738, 154812) || true) && (f_10318_152742_152765(returnType) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 152742, 152797) || f_10318_152769_152797(this)))
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152738, 154812);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 152984, 153079);

                                f_10318_152984_153078(expressionSyntax != null || (DynAbs.Tracing.TraceSender.Expression_False(10318, 152997, 153077) || !f_10318_153026_153077(expressionSyntax, expression)));
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153103, 153123);

                                bool
                                errors = false
                                ;

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153145, 153633) || true) && (expressionSyntax == null || (DynAbs.Tracing.TraceSender.Expression_False(10318, 153149, 153229) || !f_10318_153178_153229(expressionSyntax, expression)))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 153145, 153633);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153279, 153331);

                                    expression = f_10318_153292_153330(this, expression);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153357, 153416);

                                    f_10318_153357_153415(diagnostics, ErrorCode.ERR_IllegalStatement, syntax);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153442, 153456);

                                    errors = true;
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 153145, 153633);
                                }

                                else

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 153145, 153633);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153554, 153610);

                                    expression = f_10318_153567_153609(this, expression, diagnostics);
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 153145, 153633);
                                }
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153758, 153841);

                                var
                                expressionStatement = f_10318_153784_153840(syntax, expression, errors)
                                ;
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153865, 153918);

                                f_10318_153865_153917(this, expression, diagnostics);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 153940, 153972);

                                statement = expressionStatement;
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152738, 154812);
                            }

                            else
                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152738, 154812);

                                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154014, 154812) || true) && (f_10318_154018_154076(this))
                                )

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 154014, 154812);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154118, 154177);

                                    f_10318_154118_154176(diagnostics, ErrorCode.ERR_ReturnInIterator, syntax);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154199, 154251);

                                    expression = f_10318_154212_154250(this, expression);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154273, 154377);

                                    statement = new BoundReturnStatement(syntax, returnRefKind, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 154285, 154376) };
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 154014, 154812);
                                }

                                else

                                {
                                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 154014, 154812);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154459, 154667);

                                    expression = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 154472, 154496) || ((f_10318_154472_154496(returnType) && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 154524, 154562)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 154590, 154666))) ? f_10318_154524_154562(this, expression) : f_10318_154590_154666(this, syntax, diagnostics, expression, refKind, returnType);
                                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154689, 154793);

                                    statement = new BoundReturnStatement(syntax, returnRefKind, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 154701, 154792) };
                                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 154014, 154812);
                                }
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152738, 154812);
                            }
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152122, 154812);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152058, 155795);
                    }

                    else
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 152058, 155795);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154846, 155795) || true) && (f_10318_154850_154878_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_154850_154865(expression), 10318, 154850, 154878)?.SpecialType) == SpecialType.System_Void)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 154846, 155795);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 154939, 154995);

                            expression = f_10318_154952_154994(this, expression, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155013, 155106);

                            statement = new BoundExpressionStatement(syntax, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 155025, 155105) };
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 154846, 155795);
                        }

                        else

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 154846, 155795);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155363, 155509);

                            var
                            inferringLambda = f_10318_155385_155414(this) is MethodSymbol method && (DynAbs.Tracing.TraceSender.Expression_True(10318, 155385, 155508) && (object)f_10318_155449_155466(method) == LambdaSymbol.ReturnTypeIsBeingInferred)
                            ;

                            if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155527, 155664) || true) && (!inferringLambda)
                            )

                            {
                                DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 155527, 155664);
                                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155589, 155645);

                                expression = f_10318_155602_155644(this, expression, diagnostics);
                                DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 155527, 155664);
                            }
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155682, 155780);

                            statement = new BoundReturnStatement(syntax, refKind, expression) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => true, 10318, 155694, 155779) };
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 154846, 155795);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 152058, 155795);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 151593, 155795);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 155889, 156034);

                return new BoundBlock(node, locals, f_10318_155925_155957(statement)) { WasCompilerGenerated = DynAbs.Tracing.TraceSender.TraceInitializationWrapper(() => f_10318_155984_155995(node) != SyntaxKind.ArrowExpressionClause, 10318, 155896, 156033) };
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 151144, 156045);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_151433_151472(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetCurrentReturnType(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 151433, 151472);
                    return return_v;
                }


                bool
                f_10318_151597_151614(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsInAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 151597, 151614);
                    return return_v;
                }


                int
                f_10318_151775_151837(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 151775, 151837);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_151869_151907(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 151869, 151907);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_152190_152205(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 152190, 152205);
                    return return_v;
                }


                int
                f_10318_152459_152496(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 152459, 152496);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_152532_152570(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 152532, 152570);
                    return return_v;
                }


                bool
                f_10318_152742_152765(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsVoidType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 152742, 152765);
                    return return_v;
                }


                bool
                f_10318_152769_152797(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsTaskReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 152769, 152797);
                    return return_v;
                }


                bool
                f_10318_153026_153077(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                expressionSyntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = IsValidExpressionBody((Microsoft.CodeAnalysis.SyntaxNode?)expressionSyntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153026, 153077);
                    return return_v;
                }


                int
                f_10318_152984_153078(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 152984, 153078);
                    return 0;
                }


                bool
                f_10318_153178_153229(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expressionSyntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = IsValidExpressionBody((Microsoft.CodeAnalysis.SyntaxNode)expressionSyntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153178, 153229);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_153292_153330(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153292, 153330);
                    return return_v;
                }


                int
                f_10318_153357_153415(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153357, 153415);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_153567_153609(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153567, 153609);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_153784_153840(Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, bool
                hasErrors)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement(syntax, expression, hasErrors);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153784, 153840);
                    return return_v;
                }


                int
                f_10318_153865_153917(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    this_param.CheckForUnobservedAwaitable(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 153865, 153917);
                    return 0;
                }


                bool
                f_10318_154018_154076(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.IsIAsyncEnumerableOrIAsyncEnumeratorReturningAsyncMethod();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154018, 154076);
                    return return_v;
                }


                int
                f_10318_154118_154176(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxNode
                syntax)
                {
                    Error(diagnostics, code, (Microsoft.CodeAnalysis.SyntaxNodeOrToken)syntax);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154118, 154176);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_154212_154250(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154212, 154250);
                    return return_v;
                }


                bool
                f_10318_154472_154496(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                type)
                {
                    var return_v = type.IsErrorType();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154472, 154496);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_154524_154562(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = this_param.BindToTypeForErrorRecovery(expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154524, 154562);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_154590_154666(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.BoundExpression
                argument, Microsoft.CodeAnalysis.RefKind
                returnRefKind, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                returnType)
                {
                    var return_v = this_param.CreateReturnConversion(syntax, diagnostics, argument, returnRefKind, returnType);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154590, 154666);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol?
                f_10318_154850_154865(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Type;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 154850, 154865);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SpecialType?
                f_10318_154850_154878_M(Microsoft.CodeAnalysis.SpecialType?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 154850, 154878);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_154952_154994(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 154952, 154994);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_155385_155414(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 155385, 155414);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_155449_155466(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                this_param)
                {
                    var return_v = this_param.ReturnType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 155449, 155466);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_155602_155644(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindToNaturalType(expression, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 155602, 155644);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_155925_155957(Microsoft.CodeAnalysis.CSharp.BoundStatement
                item)
                {
                    var return_v = ImmutableArray.Create(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 155925, 155957);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_155984_155995(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 155984, 155995);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 151144, 156045);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 151144, 156045);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private static bool IsValidExpressionBody(SyntaxNode expressionSyntax, BoundExpression expression)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 156057, 156312);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 156180, 156301);

                return f_10318_156187_156243(expressionSyntax, expression) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 156187, 156300) || f_10318_156247_156270(expressionSyntax) == SyntaxKind.ThrowExpression);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 156057, 156312);

                bool
                f_10318_156187_156243(Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = IsValidStatementExpression(syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 156187, 156243);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_156247_156270(Microsoft.CodeAnalysis.SyntaxNode
                node)
                {
                    var return_v = node.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 156247, 156270);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 156057, 156312);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 156057, 156312);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundBlock BindExpressionBodyAsBlock(ArrowExpressionClauseSyntax expressionBody,
                                                              DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 156471, 157894);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 156675, 156726);

                Binder
                bodyBinder = f_10318_156695_156725(this, expressionBody)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 156740, 156773);

                f_10318_156740_156772(bodyBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 156789, 156871);

                return f_10318_156796_156870(expressionBody, bodyBinder, diagnostics);

                static BoundBlock bindExpressionBodyAsBlockInternal(ArrowExpressionClauseSyntax expressionBody, Binder bodyBinder, DiagnosticBag diagnostics)
                {
                    try
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(10318, 157012, 157883);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157186, 157202);

                        RefKind
                        refKind
                        = default(RefKind);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157220, 157336);

                        ExpressionSyntax
                        expressionSyntax = f_10318_157256_157335(f_10318_157256_157281(expressionBody), diagnostics, out refKind)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157354, 157435);

                        BindValueKind
                        requiredValueKind = f_10318_157388_157434(bodyBinder, refKind)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157453, 157553);

                        BoundExpression
                        expression = f_10318_157482_157552(bodyBinder, expressionSyntax, diagnostics, requiredValueKind)
                        ;
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157571, 157682);

                        expression = f_10318_157584_157681(bodyBinder, expression, Binder.ExternalScope, refKind != RefKind.None, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 157702, 157868);

                        return f_10318_157709_157867(bodyBinder, expressionBody, f_10318_157762_157814(bodyBinder, expressionBody), refKind, expression, expressionSyntax, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitStaticMethod(10318, 157012, 157883);

                        Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                        f_10318_157256_157281(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                        this_param)
                        {
                            var return_v = this_param.Expression;
                            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 157256, 157281);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                        f_10318_157256_157335(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                        syntax, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, out Microsoft.CodeAnalysis.RefKind
                        refKind)
                        {
                            var return_v = syntax.CheckAndUnwrapRefExpression(diagnostics, out refKind);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157256, 157335);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                        f_10318_157388_157434(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.RefKind
                        refKind)
                        {
                            var return_v = this_param.GetRequiredReturnValueKind(refKind);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157388, 157434);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.BoundExpression
                        f_10318_157482_157552(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                        node, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                        valueKind)
                        {
                            var return_v = this_param.BindValue(node, diagnostics, valueKind);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157482, 157552);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.BoundExpression
                        f_10318_157584_157681(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                        expr, uint
                        escapeTo, bool
                        isByRef, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics)
                        {
                            var return_v = this_param.ValidateEscape(expr, escapeTo, isByRef, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157584, 157681);
                            return return_v;
                        }


                        System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                        f_10318_157762_157814(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                        scopeDesignator)
                        {
                            var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157762, 157814);
                            return return_v;
                        }


                        Microsoft.CodeAnalysis.CSharp.BoundBlock
                        f_10318_157709_157867(Microsoft.CodeAnalysis.CSharp.Binder
                        this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                        node, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                        locals, Microsoft.CodeAnalysis.RefKind
                        refKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                        expression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                        expressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag
                        diagnostics)
                        {
                            var return_v = this_param.CreateBlockFromExpression((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, locals, refKind, expression, expressionSyntax, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 157709, 157867);
                            return return_v;
                        }

                    }
                    catch
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 157012, 157883);
                        throw;
                    }
                    finally
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 157012, 157883);
                    }
                    throw new System.Exception("Slicer error: unreachable code");
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 156471, 157894);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_156695_156725(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 156695, 156725);
                    return return_v;
                }


                int
                f_10318_156740_156772(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 156740, 156772);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_156796_156870(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.CSharp.Binder
                bodyBinder, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = bindExpressionBodyAsBlockInternal(expressionBody, bodyBinder, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 156796, 156870);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 156471, 157894);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 156471, 157894);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public BoundBlock BindLambdaExpressionAsBlock(ExpressionSyntax body, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 158034, 158855);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158154, 158195);

                Binder
                bodyBinder = f_10318_158174_158194(this, body)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158209, 158242);

                f_10318_158209_158241(bodyBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158258, 158274);

                RefKind
                refKind
                = default(RefKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158288, 158370);

                var
                expressionSyntax = f_10318_158311_158369(body, diagnostics, out refKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158384, 158454);

                BindValueKind
                requiredValueKind = f_10318_158418_158453(this, refKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158468, 158568);

                BoundExpression
                expression = f_10318_158497_158567(bodyBinder, expressionSyntax, diagnostics, requiredValueKind)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158582, 158682);

                expression = f_10318_158595_158681(this, expression, Binder.ExternalScope, refKind != RefKind.None, diagnostics);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 158698, 158844);

                return f_10318_158705_158843(bodyBinder, body, f_10318_158748_158790(bodyBinder, body), refKind, expression, expressionSyntax, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 158034, 158855);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_158174_158194(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158174, 158194);
                    return return_v;
                }


                int
                f_10318_158209_158241(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158209, 158241);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                f_10318_158311_158369(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                syntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = syntax.CheckAndUnwrapRefExpression(diagnostics, out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158311, 158369);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                f_10318_158418_158453(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetRequiredReturnValueKind(refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158418, 158453);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_158497_158567(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.Binder.BindValueKind
                valueKind)
                {
                    var return_v = this_param.BindValue(node, diagnostics, valueKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158497, 158567);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_158595_158681(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expr, uint
                escapeTo, bool
                isByRef, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.ValidateEscape(expr, escapeTo, isByRef, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158595, 158681);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_158748_158790(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158748, 158790);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_158705_158843(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?
                expressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateBlockFromExpression((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, locals, refKind, expression, expressionSyntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 158705, 158843);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 158034, 158855);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 158034, 158855);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public BoundBlock CreateBlockFromExpression(ExpressionSyntax body, BoundExpression expression, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 158867, 159335);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159013, 159054);

                Binder
                bodyBinder = f_10318_159033_159053(this, body)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159068, 159101);

                f_10318_159068_159100(bodyBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159117, 159171);

                f_10318_159117_159170(f_10318_159130_159141(body) != SyntaxKind.RefExpression);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159185, 159324);

                return f_10318_159192_159323(bodyBinder, body, f_10318_159235_159277(bodyBinder, body), RefKind.None, expression, body, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 158867, 159335);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_159033_159053(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159033, 159053);
                    return return_v;
                }


                int
                f_10318_159068_159100(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159068, 159100);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_159130_159141(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159130, 159141);
                    return return_v;
                }


                int
                f_10318_159117_159170(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159117, 159170);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_159235_159277(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159235, 159277);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_159192_159323(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                node, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.RefKind
                refKind, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax
                expressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.CreateBlockFromExpression((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, locals, refKind, expression, expressionSyntax, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159192, 159323);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 158867, 159335);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 158867, 159335);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BindValueKind GetRequiredReturnValueKind(RefKind refKind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 159347, 159875);
                Microsoft.CodeAnalysis.RefKind sigRefKind = default(Microsoft.CodeAnalysis.RefKind);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159437, 159492);

                BindValueKind
                requiredValueKind = BindValueKind.RValue
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159506, 159823) || true) && (refKind != RefKind.None)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 159506, 159823);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159567, 159608);

                    f_10318_159567_159607(this, out sigRefKind);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159626, 159808);

                    requiredValueKind = (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 159646, 159671) || ((sigRefKind == RefKind.Ref && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 159715, 159738)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 159782, 159807))) ? BindValueKind.RefReturn : BindValueKind.ReadonlyRef;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 159506, 159823);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 159839, 159864);

                return requiredValueKind;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 159347, 159875);

                Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol
                f_10318_159567_159607(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, out Microsoft.CodeAnalysis.RefKind
                refKind)
                {
                    var return_v = this_param.GetCurrentReturnType(out refKind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 159567, 159607);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 159347, 159875);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 159347, 159875);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        public virtual BoundNode BindMethodBody(CSharpSyntaxNode syntax, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 159887, 161154);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160003, 161143);

                switch (syntax)
                {

                    case RecordDeclarationSyntax recordDecl:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160113, 160171);

                        return f_10318_160120_160170(this, recordDecl, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);

                    case BaseMethodDeclarationSyntax method:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160253, 160458) || true) && (f_10318_160257_160270(method) == SyntaxKind.ConstructorDeclaration)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160253, 160458);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160357, 160435);

                            return f_10318_160364_160434(this, method, diagnostics);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160253, 160458);
                        }
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160482, 160561);

                        return f_10318_160489_160560(this, method, f_10318_160512_160523(method), f_10318_160525_160546(method), diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);

                    case AccessorDeclarationSyntax accessor:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160643, 160728);

                        return f_10318_160650_160727(this, accessor, f_10318_160675_160688(accessor), f_10318_160690_160713(accessor), diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);

                    case ArrowExpressionClauseSyntax arrowExpression:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160819, 160882);

                        return f_10318_160826_160881(this, arrowExpression, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);

                    case CompilationUnitSyntax compilationUnit:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 160967, 161022);

                        return f_10318_160974_161021(this, compilationUnit, diagnostics);
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 160003, 161143);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161072, 161128);

                        throw f_10318_161078_161127(f_10318_161113_161126(syntax));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 160003, 161143);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 159887, 161154);

                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_160120_160170(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                recordDecl, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindRecordConstructorBody(recordDecl, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160120, 160170);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_160257_160270(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160257, 160270);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_160364_160434(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                constructor, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorBody((Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)constructor, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160364, 160434);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_160512_160523(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 160512, 160523);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_160525_160546(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 160525, 160546);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_160489_160560(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax
                declaration, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                blockBody, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindMethodBody((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)declaration, blockBody, expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160489, 160560);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_160675_160688(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 160675, 160688);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_160690_160713(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 160690, 160713);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_160650_160727(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax
                declaration, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                blockBody, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindMethodBody((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)declaration, blockBody, expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160650, 160727);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_160826_160881(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionBodyAsBlock(expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160826, 160881);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_160974_161021(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                compilationUnit, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindSimpleProgram(compilationUnit, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 160974, 161021);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.SyntaxKind
                f_10318_161113_161126(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                this_param)
                {
                    var return_v = this_param.Kind();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161113, 161126);
                    return return_v;
                }


                System.Exception
                f_10318_161078_161127(Microsoft.CodeAnalysis.CSharp.SyntaxKind
                o)
                {
                    var return_v = ExceptionUtilities.UnexpectedValue((object)o);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161078, 161127);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 159887, 161154);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 159887, 161154);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundNode BindSimpleProgram(CompilationUnitSyntax compilationUnit, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 161166, 161518);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161292, 161379);

                var
                simpleProgram = (SynthesizedSimpleProgramEntryPointSymbol)f_10318_161354_161378()
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161395, 161507);

                return f_10318_161402_161506(f_10318_161402_161428(this, compilationUnit), compilationUnit, simpleProgram, diagnostics);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 161166, 161518);

                Microsoft.CodeAnalysis.CSharp.Symbol?
                f_10318_161354_161378()
                {
                    var return_v = ContainingMemberOrLambda;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 161354, 161378);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_161402_161428(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161402, 161428);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNode
                f_10318_161402_161506(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                compilationUnit, Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedSimpleProgramEntryPointSymbol?
                simpleProgram, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindSimpleProgramCompilationUnit(compilationUnit, simpleProgram, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161402, 161506);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 161166, 161518);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 161166, 161518);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundNode BindSimpleProgramCompilationUnit(CompilationUnitSyntax compilationUnit, SynthesizedSimpleProgramEntryPointSymbol simpleProgram, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 161530, 162510);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161727, 161817);

                ArrayBuilder<BoundStatement>
                boundStatements = f_10318_161774_161816()
                ;
                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161831, 162181);
                    foreach (var statement in f_10318_161857_161880_I(f_10318_161857_161880(compilationUnit)))
                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 161831, 162181);

                        if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 161914, 162166) || true) && (statement is GlobalStatementSyntax topLevelStatement)
                        )

                        {
                            DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 161914, 162166);
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162012, 162089);

                            var
                            boundStatement = f_10318_162033_162088(this, f_10318_162047_162074(topLevelStatement), diagnostics)
                            ;
                            DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162111, 162147);

                            f_10318_162111_162146(boundStatements, boundStatement);
                            DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 161914, 162166);
                        }
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 161831, 162181);
                    }
                }
                catch (System.Exception)
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoopByException(10318, 1, 351);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceExitLoop(10318, 1, 351);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162197, 162499);

                return f_10318_162204_162498(compilationUnit, f_10318_162309_162421(f_10318_162309_162397(this, compilationUnit, f_10318_162347_162383(boundStatements), diagnostics)), expressionBody: null);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 161530, 162510);

                Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_161774_161816()
                {
                    var return_v = ArrayBuilder<BoundStatement>.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161774, 161816);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>
                f_10318_161857_161880(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                this_param)
                {
                    var return_v = this_param.Members;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 161857, 161880);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                f_10318_162047_162074(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax
                this_param)
                {
                    var return_v = this_param.Statement;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 162047, 162074);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_162033_162088(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement(node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162033, 162088);
                    return return_v;
                }


                int
                f_10318_162111_162146(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param, Microsoft.CodeAnalysis.CSharp.BoundStatement
                item)
                {
                    this_param.Add(item);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162111, 162146);
                    return 0;
                }


                Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>
                f_10318_161857_161880_I(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax>
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 161857, 161880);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                f_10318_162347_162383(Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                this_param)
                {
                    var return_v = this_param.ToImmutableAndFree();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162347, 162383);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_162309_162397(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                node, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                boundStatements, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.FinishBindBlockParts((Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)node, boundStatements, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162309, 162397);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_162309_162421(Microsoft.CodeAnalysis.CSharp.BoundBlock
                node)
                {
                    var return_v = node.MakeCompilerGenerated<Microsoft.CodeAnalysis.CSharp.BoundBlock>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162309, 162421);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody
                f_10318_162204_162498(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundBlock
                blockBody, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                expressionBody)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody((Microsoft.CodeAnalysis.SyntaxNode)syntax, blockBody, expressionBody: expressionBody);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162204, 162498);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 161530, 162510);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 161530, 162510);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundNode BindRecordConstructorBody(RecordDeclarationSyntax recordDecl, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 162522, 163616);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162653, 162702);

                f_10318_162653_162701(f_10318_162666_162690(recordDecl) is object);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162718, 162765);

                Binder
                bodyBinder = f_10318_162738_162764(this, recordDecl)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162779, 162812);

                f_10318_162779_162811(bodyBinder != null);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162828, 162872);

                BoundExpressionStatement
                initializer = null
                ;

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 162886, 163114) || true) && (f_10318_162890_162927(recordDecl) is PrimaryConstructorBaseTypeSyntax baseWithArguments)
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 162886, 163114);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 163015, 163099);

                    initializer = f_10318_163029_163098(bodyBinder, baseWithArguments, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 162886, 163114);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 163130, 163605);

                return f_10318_163137_163604(recordDecl, f_10318_163231_163279(bodyBinder, recordDecl), initializer, blockBody: f_10318_163407_163530(f_10318_163407_163506(recordDecl, ImmutableArray<LocalSymbol>.Empty, ImmutableArray<BoundStatement>.Empty)), expressionBody: null);
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 162522, 163616);

                Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax?
                f_10318_162666_162690(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ParameterList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 162666, 162690);
                    return return_v;
                }


                int
                f_10318_162653_162701(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162653, 162701);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_162738_162764(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162738, 162764);
                    return return_v;
                }


                int
                f_10318_162779_162811(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 162779, 162811);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax?
                f_10318_162890_162927(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.PrimaryConstructorBaseType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 162890, 162927);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_163029_163098(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                initializer, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializer, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163029, 163098);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_163231_163279(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163231, 163279);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_163407_163506(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundStatement>
                statements)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundBlock((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, statements);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163407, 163506);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_163407_163530(Microsoft.CodeAnalysis.CSharp.BoundBlock
                node)
                {
                    var return_v = node.MakeCompilerGenerated<Microsoft.CodeAnalysis.CSharp.BoundBlock>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163407, 163530);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundConstructorMethodBody
                f_10318_163137_163604(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement?
                initializer, Microsoft.CodeAnalysis.CSharp.BoundBlock
                blockBody, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                expressionBody)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundConstructorMethodBody((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, initializer, blockBody: blockBody, expressionBody: expressionBody);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163137, 163604);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 162522, 163616);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 162522, 163616);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundExpressionStatement BindConstructorInitializer(PrimaryConstructorBaseTypeSyntax initializer, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 163628, 164331);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 163794, 163962);

                BoundExpression
                initializerInvocation = f_10318_163834_163961(f_10318_163834_163856(this, initializer), f_10318_163884_163908(initializer), f_10318_163924_163947(this), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 163976, 164070);

                var
                constructorInitializer = f_10318_164005_164069(initializer, initializerInvocation)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164084, 164276);

                f_10318_164084_164275(f_10318_164097_164131(initializerInvocation) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 164097, 164184) || f_10318_164135_164184(constructorInitializer)), "Please keep this bound node in sync with BoundNodeExtensions.IsConstructorInitializer.");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164290, 164320);

                return constructorInitializer;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 163628, 164331);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_163834_163856(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163834, 163856);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                f_10318_163884_163908(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 163884, 163908);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_163924_163947(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMember();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163924, 163947);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_163834_163961(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                initializerArgumentListOpt, Microsoft.CodeAnalysis.CSharp.Symbol
                constructor, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializerArgumentListOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)constructor, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 163834, 163961);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_164005_164069(Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164005, 164069);
                    return return_v;
                }


                bool
                f_10318_164097_164131(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164097, 164131);
                    return return_v;
                }


                bool
                f_10318_164135_164184(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                statement)
                {
                    var return_v = statement.IsConstructorInitializer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164135, 164184);
                    return return_v;
                }


                int
                f_10318_164084_164275(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164084, 164275);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 163628, 164331);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 163628, 164331);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundNode BindConstructorBody(ConstructorDeclarationSyntax constructor, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 164343, 166558);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164474, 164636) || true) && (f_10318_164478_164501(constructor) == null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 164478, 164537) && f_10318_164513_164529(constructor) == null) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 164478, 164575) && f_10318_164541_164567(constructor) == null))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 164474, 164636);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164609, 164621);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 164474, 164636);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164652, 164700);

                Binder
                bodyBinder = f_10318_164672_164699(this, constructor)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164714, 164747);

                f_10318_164714_164746(bodyBinder != null);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164763, 165508) || true) && (f_10318_164791_164837(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_164767_164790(constructor), 10318, 164767, 164837), SyntaxKind.ThisConstructorInitializer) != true && (DynAbs.Tracing.TraceSender.Expression_True(10318, 164767, 164947) && f_10318_164866_164947(f_10318_164866_164902(f_10318_164866_164880()).OfType<SynthesizedRecordConstructor>())))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 164763, 165508);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 164981, 165043);

                    var
                    constructorSymbol = (MethodSymbol)f_10318_165019_165042(this)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 165061, 165493) || true) && (f_10318_165065_165092_M(!constructorSymbol.IsStatic) && (DynAbs.Tracing.TraceSender.Expression_True(10318, 165065, 165180) && !f_10318_165118_165180(constructorSymbol)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 165061, 165493);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 165320, 165474);

                        f_10318_165320_165473(diagnostics, ErrorCode.ERR_UnexpectedOrMissingConstructorInitializerInRecord, f_10318_165404_165446_M(DynAbs.Tracing.TraceSender.TraceConditionalAccessExpression(f_10318_165404_165427(constructor), 10318, 165404, 165446)?.ThisOrBaseKeyword) ?? (DynAbs.Tracing.TraceSender.Expression_Null<Microsoft.CodeAnalysis.SyntaxToken?>(10318, 165404, 165472) ?? f_10318_165450_165472(constructor)));
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 165061, 165493);
                    }
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 164763, 165508);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 165646, 166547);

                return f_10318_165653_166546(constructor, f_10318_165748_165797(bodyBinder, constructor), (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 165850, 165881) || ((f_10318_165850_165873(constructor) == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 165884, 165888)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 165891, 165966))) ? null : f_10318_165891_165966(bodyBinder, f_10318_165929_165952(constructor), diagnostics), (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 166019, 166043) || ((f_10318_166019_166035(constructor) == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 166046, 166050)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 166053, 166120))) ? null : (BoundBlock)f_10318_166065_166120(bodyBinder, f_10318_166090_166106(constructor), diagnostics), (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 166173, 166207) || ((f_10318_166173_166199(constructor) == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 166265, 166269)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 166327, 166545))) ? null : f_10318_166327_166545(bodyBinder, f_10318_166364_166390(constructor), (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 166484, 166508) || ((f_10318_166484_166500(constructor) == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 166511, 166522)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 166525, 166544))) ? diagnostics : f_10318_166525_166544()));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 164343, 166558);

                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax?
                f_10318_164478_164501(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164478, 164501);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_164513_164529(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164513, 164529);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_164541_164567(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164541, 164567);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_164672_164699(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164672, 164699);
                    return return_v;
                }


                int
                f_10318_164714_164746(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164714, 164746);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax?
                f_10318_164767_164790(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164767, 164790);
                    return return_v;
                }


                bool?
                f_10318_164791_164837(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node, Microsoft.CodeAnalysis.CSharp.SyntaxKind
                kind)
                {
                    var return_v = node?.IsKind(kind);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164791, 164837);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                f_10318_164866_164880()
                {
                    var return_v = ContainingType;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 164866, 164880);
                    return return_v;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbol>
                f_10318_164866_164902(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol?
                this_param)
                {
                    var return_v = this_param.GetMembersUnordered();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164866, 164902);
                    return return_v;
                }


                bool
                f_10318_164866_164947(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedRecordConstructor>
                source)
                {
                    var return_v = source.Any<Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedRecordConstructor>();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 164866, 164947);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_165019_165042(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMember();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165019, 165042);
                    return return_v;
                }


                bool
                f_10318_165065_165092_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165065, 165092);
                    return return_v;
                }


                bool
                f_10318_165118_165180(Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                member)
                {
                    var return_v = SynthesizedRecordCopyCtor.IsCopyConstructor((Microsoft.CodeAnalysis.CSharp.Symbol)member);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165118, 165180);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax?
                f_10318_165404_165427(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165404, 165427);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken?
                f_10318_165404_165446_M(Microsoft.CodeAnalysis.SyntaxToken?
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165404, 165446);
                    return return_v;
                }


                Microsoft.CodeAnalysis.SyntaxToken
                f_10318_165450_165472(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Identifier;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165450, 165472);
                    return return_v;
                }


                int
                f_10318_165320_165473(Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.ErrorCode
                code, Microsoft.CodeAnalysis.SyntaxToken
                token)
                {
                    Error(diagnostics, code, token);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165320, 165473);
                    return 0;
                }


                System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                f_10318_165748_165797(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                scopeDesignator)
                {
                    var return_v = this_param.GetDeclaredLocalsForScope((Microsoft.CodeAnalysis.SyntaxNode)scopeDesignator);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165748, 165797);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax?
                f_10318_165850_165873(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165850, 165873);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                f_10318_165929_165952(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Initializer;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 165929, 165952);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_165891_165966(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                initializer, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializer, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165891, 165966);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_166019_166035(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166019, 166035);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                f_10318_166090_166106(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166090, 166106);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_166065_166120(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement((Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166065, 166120);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax?
                f_10318_166173_166199(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166173, 166199);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                f_10318_166364_166390(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.ExpressionBody;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166364, 166390);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?
                f_10318_166484_166500(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                this_param)
                {
                    var return_v = this_param.Body;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166484, 166500);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_166525_166544()
                {
                    var return_v = new Microsoft.CodeAnalysis.DiagnosticBag();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166525, 166544);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_166327_166545(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionBodyAsBlock(expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166327, 166545);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundConstructorMethodBody
                f_10318_165653_166546(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax
                syntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>
                locals, Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement?
                initializer, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                blockBody, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                expressionBody)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundConstructorMethodBody((Microsoft.CodeAnalysis.SyntaxNode)syntax, locals, initializer, blockBody, expressionBody);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 165653, 166546);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 164343, 166558);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 164343, 166558);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual BoundExpressionStatement BindConstructorInitializer(ConstructorInitializerSyntax initializer, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 166570, 167484);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 166732, 166900);

                BoundExpression
                initializerInvocation = f_10318_166772_166899(f_10318_166772_166794(this, initializer), f_10318_166822_166846(initializer), f_10318_166862_166885(this), diagnostics)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167055, 167115);

                f_10318_167055_167114(f_10318_167068_167113_M(!f_10318_167069_167092(this).IsImplicitlyDeclared));
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167129, 167223);

                var
                constructorInitializer = f_10318_167158_167222(initializer, initializerInvocation)
                ;
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167237, 167429);

                f_10318_167237_167428(f_10318_167250_167284(initializerInvocation) || (DynAbs.Tracing.TraceSender.Expression_False(10318, 167250, 167337) || f_10318_167288_167337(constructorInitializer)), "Please keep this bound node in sync with BoundNodeExtensions.IsConstructorInitializer.");
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167443, 167473);

                return constructorInitializer;
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 166570, 167484);

                Microsoft.CodeAnalysis.CSharp.Binder?
                f_10318_166772_166794(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                node)
                {
                    var return_v = this_param.GetBinder((Microsoft.CodeAnalysis.SyntaxNode)node);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166772, 166794);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                f_10318_166822_166846(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                this_param)
                {
                    var return_v = this_param.ArgumentList;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 166822, 166846);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_166862_166885(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMember();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166862, 166885);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_166772_166899(Microsoft.CodeAnalysis.CSharp.Binder?
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax
                initializerArgumentListOpt, Microsoft.CodeAnalysis.CSharp.Symbol
                constructor, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindConstructorInitializer(initializerArgumentListOpt, (Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)constructor, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 166772, 166899);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.Symbol
                f_10318_167069_167092(Microsoft.CodeAnalysis.CSharp.Binder
                this_param)
                {
                    var return_v = this_param.ContainingMember();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167069, 167092);
                    return return_v;
                }


                bool
                f_10318_167068_167113_M(bool
                i)
                {
                    var return_v = i;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 167068, 167113);
                    return return_v;
                }


                int
                f_10318_167055_167114(bool
                condition)
                {
                    Debug.Assert(condition);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167055, 167114);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                f_10318_167158_167222(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax
                syntax, Microsoft.CodeAnalysis.CSharp.BoundExpression
                expression)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement((Microsoft.CodeAnalysis.SyntaxNode)syntax, expression);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167158, 167222);
                    return return_v;
                }


                bool
                f_10318_167250_167284(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 167250, 167284);
                    return return_v;
                }


                bool
                f_10318_167288_167337(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement
                statement)
                {
                    var return_v = statement.IsConstructorInitializer();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167288, 167337);
                    return return_v;
                }


                int
                f_10318_167237_167428(bool
                condition, string
                message)
                {
                    Debug.Assert(condition, message);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167237, 167428);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 166570, 167484);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 166570, 167484);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        private BoundNode BindMethodBody(CSharpSyntaxNode declaration, BlockSyntax blockBody, ArrowExpressionClauseSyntax expressionBody, DiagnosticBag diagnostics)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 167496, 168504);

                if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167677, 167785) || true) && (blockBody == null && (DynAbs.Tracing.TraceSender.Expression_True(10318, 167681, 167724) && expressionBody == null))
                )

                {
                    DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 167677, 167785);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167758, 167770);

                    return null;
                    DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 167677, 167785);
                }
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 167923, 168493);

                return f_10318_167930_168492(declaration, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 168031, 168048) || ((blockBody == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 168051, 168055)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 168058, 168107))) ? null : (BoundBlock)f_10318_168070_168107(this, blockBody, diagnostics), (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 168163, 168185) || ((expressionBody == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 168246, 168250)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 168311, 168491))) ? null : f_10318_168311_168491(this, expressionBody, (DynAbs.Tracing.TraceSender.Conditional_F1(10318, 168437, 168454) || ((blockBody == null && DynAbs.Tracing.TraceSender.Conditional_F2(10318, 168457, 168468)) || DynAbs.Tracing.TraceSender.Conditional_F3(10318, 168471, 168490))) ? diagnostics : f_10318_168471_168490()));
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 167496, 168504);

                Microsoft.CodeAnalysis.CSharp.BoundStatement
                f_10318_168070_168107(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax
                node, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindStatement((Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)node, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 168070, 168107);
                    return return_v;
                }


                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_168471_168490()
                {
                    var return_v = new Microsoft.CodeAnalysis.DiagnosticBag();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 168471, 168490);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundBlock
                f_10318_168311_168491(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax
                expressionBody, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindExpressionBodyAsBlock(expressionBody, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 168311, 168491);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody
                f_10318_167930_168492(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                syntax, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                blockBody, Microsoft.CodeAnalysis.CSharp.BoundBlock?
                expressionBody)
                {
                    var return_v = new Microsoft.CodeAnalysis.CSharp.BoundNonConstructorMethodBody((Microsoft.CodeAnalysis.SyntaxNode)syntax, blockBody, expressionBody);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 167930, 168492);
                    return return_v;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 167496, 168504);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 167496, 168504);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal virtual ImmutableArray<LocalSymbol> Locals
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 168592, 168684);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 168628, 168669);

                    return ImmutableArray<LocalSymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 168592, 168684);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 168516, 168695);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 168516, 168695);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        internal virtual ImmutableArray<LocalFunctionSymbol> LocalFunctions
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 168799, 168899);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 168835, 168884);

                    return ImmutableArray<LocalFunctionSymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 168799, 168899);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 168707, 168910);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 168707, 168910);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        internal virtual ImmutableArray<LabelSymbol> Labels
        {
            get
            {
                try
                {
                    DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 168998, 169090);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 169034, 169075);

                    return ImmutableArray<LabelSymbol>.Empty;
                    DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 168998, 169090);
                }
                catch
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 168922, 169101);
                    throw;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 168922, 169101);
                }
                throw new System.Exception("Slicer error: unreachable code");
            }
        }

        internal PatternLookupResult PerformPatternMethodLookup(BoundExpression receiver, string methodName,
                                                                        SyntaxNode syntaxNode, DiagnosticBag diagnostics, out MethodSymbol result)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterMethod(10318, 169799, 172994);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 170064, 170117);

                var
                bindingDiagnostics = f_10318_170089_170116()
                ;

                try
                {
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 170169, 170183);

                    result = null;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 170203, 170668);

                    var
                    boundAccess = f_10318_170221_170667(this, syntaxNode, syntaxNode, receiver, methodName, rightArity: 0, typeArgumentsSyntax: default, typeArgumentsWithAnnotations: default, invoked: true, indexed: false, bindingDiagnostics)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 170688, 170882) || true) && (f_10318_170692_170708(boundAccess) != BoundKind.MethodGroup)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 170688, 170882);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 170825, 170863);

                        return PatternLookupResult.NotAMethod;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 170688, 170882);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 171313, 171369);

                    var
                    analyzedArguments = f_10318_171337_171368()
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 171387, 171812);

                    var
                    patternMethodCall = f_10318_171411_171811(this, syntaxNode, syntaxNode, methodName, boundAccess, analyzedArguments, bindingDiagnostics, queryClause: null, allowUnexpandedForm: false, anyApplicableCandidates: out _)
                    ;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 171832, 171857);

                    f_10318_171832_171856(
                                    analyzedArguments);

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 171877, 172021) || true) && (f_10318_171881_171903(patternMethodCall) != BoundKind.Call)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 171877, 172021);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 171963, 172002);

                        return PatternLookupResult.NotCallable;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 171877, 172021);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172041, 172081);

                    var
                    call = (BoundCall)patternMethodCall
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172099, 172242) || true) && (f_10318_172103_172118(call) == LookupResultKind.Empty)
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 172099, 172242);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172186, 172223);

                        return PatternLookupResult.NoResults;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 172099, 172242);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172422, 172463);

                    f_10318_172422_172462(
                                    // we have succeeded or almost succeeded to bind the method
                                    // report additional binding diagnostics that we have seen so far
                                    diagnostics, bindingDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172483, 172521);

                    var
                    patternMethodSymbol = f_10318_172509_172520(call)
                    ;

                    if ((DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172539, 172742) || true) && (patternMethodSymbol is ErrorMethodSymbol || (DynAbs.Tracing.TraceSender.Expression_False(10318, 172543, 172638) || f_10318_172608_172638(patternMethodCall)))
                    )

                    {
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(10318, 172539, 172742);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172680, 172723);

                        return PatternLookupResult.ResultHasErrors;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(10318, 172539, 172742);
                    }
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172791, 172820);

                    result = patternMethodSymbol;
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172838, 172873);

                    return PatternLookupResult.Success;
                }
                finally
                {
                    DynAbs.Tracing.TraceSender.TraceEnterFinally(10318, 172902, 172983);
                    DynAbs.Tracing.TraceSender.TraceSimpleStatement(10318, 172942, 172968);

                    f_10318_172942_172967(bindingDiagnostics);
                    DynAbs.Tracing.TraceSender.TraceExitFinally(10318, 172902, 172983);
                }
                DynAbs.Tracing.TraceSender.TraceExitMethod(10318, 169799, 172994);

                Microsoft.CodeAnalysis.DiagnosticBag
                f_10318_170089_170116()
                {
                    var return_v = DiagnosticBag.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 170089, 170116);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_170221_170667(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                node, Microsoft.CodeAnalysis.SyntaxNode
                right, Microsoft.CodeAnalysis.CSharp.BoundExpression
                boundLeft, string
                rightName, int
                rightArity, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax>
                typeArgumentsSyntax, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.Symbols.TypeWithAnnotations>
                typeArgumentsWithAnnotations, bool
                invoked, bool
                indexed, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics)
                {
                    var return_v = this_param.BindInstanceMemberAccess(node, right, boundLeft, rightName, rightArity: rightArity, typeArgumentsSyntax: typeArgumentsSyntax, typeArgumentsWithAnnotations: typeArgumentsWithAnnotations, invoked: invoked, indexed: indexed, diagnostics);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 170221, 170667);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_170692_170708(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 170692, 170708);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                f_10318_171337_171368()
                {
                    var return_v = AnalyzedArguments.GetInstance();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 171337, 171368);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.BoundExpression
                f_10318_171411_171811(Microsoft.CodeAnalysis.CSharp.Binder
                this_param, Microsoft.CodeAnalysis.SyntaxNode
                syntax, Microsoft.CodeAnalysis.SyntaxNode
                expression, string
                methodName, Microsoft.CodeAnalysis.CSharp.BoundExpression
                methodGroup, Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                analyzedArguments, Microsoft.CodeAnalysis.DiagnosticBag
                diagnostics, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode
                queryClause, bool
                allowUnexpandedForm, out bool
                anyApplicableCandidates)
                {
                    var return_v = this_param.BindMethodGroupInvocation(syntax, expression, methodName, (Microsoft.CodeAnalysis.CSharp.BoundMethodGroup)methodGroup, analyzedArguments, diagnostics, queryClause: queryClause, allowUnexpandedForm: allowUnexpandedForm, out anyApplicableCandidates);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 171411, 171811);
                    return return_v;
                }


                int
                f_10318_171832_171856(Microsoft.CodeAnalysis.CSharp.AnalyzedArguments
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 171832, 171856);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.BoundKind
                f_10318_171881_171903(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.Kind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 171881, 171903);
                    return return_v;
                }


                Microsoft.CodeAnalysis.CSharp.LookupResultKind
                f_10318_172103_172118(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.ResultKind;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 172103, 172118);
                    return return_v;
                }


                int
                f_10318_172422_172462(Microsoft.CodeAnalysis.DiagnosticBag
                this_param, Microsoft.CodeAnalysis.DiagnosticBag
                bag)
                {
                    this_param.AddRange(bag);
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 172422, 172462);
                    return 0;
                }


                Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol
                f_10318_172509_172520(Microsoft.CodeAnalysis.CSharp.BoundCall
                this_param)
                {
                    var return_v = this_param.Method;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 172509, 172520);
                    return return_v;
                }


                bool
                f_10318_172608_172638(Microsoft.CodeAnalysis.CSharp.BoundExpression
                this_param)
                {
                    var return_v = this_param.HasAnyErrors;
                    DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 172608, 172638);
                    return return_v;
                }


                int
                f_10318_172942_172967(Microsoft.CodeAnalysis.DiagnosticBag
                this_param)
                {
                    this_param.Free();
                    DynAbs.Tracing.TraceSender.TraceEndInvocation(10318, 172942, 172967);
                    return 0;
                }

            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(10318, 169799, 172994);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(10318, 169799, 172994);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        Microsoft.CodeAnalysis.CSharp.Binder?
        f_10318_80546_80550()
        {
            var return_v = Next;
            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 80546, 80550);
            return return_v;
        }


        uint
        f_10318_80546_80566(Microsoft.CodeAnalysis.CSharp.Binder?
        this_param)
        {
            var return_v = this_param.LocalScopeDepth;
            DynAbs.Tracing.TraceSender.TraceEndMemberAccess(10318, 80546, 80566);
            return return_v;
        }

    }
}
