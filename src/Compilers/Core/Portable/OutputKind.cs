// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.CodeAnalysis.Text;
using System;
using Roslyn.Utilities;

namespace Microsoft.CodeAnalysis
{
    /// <summary>
    /// Specifies output assembly kinds generated by compiler.
    /// </summary>
    public enum OutputKind
    {
        /// <summary>
        /// An .exe with an entry point and a console.
        /// </summary>
        ConsoleApplication = 0,

        /// <summary>
        /// An .exe with an entry point but no console.
        /// </summary>
        WindowsApplication = 1,

        /// <summary>
        /// A .dll file.
        /// </summary>
        DynamicallyLinkedLibrary = 2,

        /// <summary>
        /// A .netmodule file.
        /// </summary>
        NetModule = 3,

        /// <summary>
        /// A .winmdobj file.
        /// </summary>
        WindowsRuntimeMetadata = 4,

        /// <summary>
        /// An .exe that can run in an app container.
        /// </summary>
        /// <remarks>
        /// Equivalent to a WindowsApplication, but with an extra bit set in the Portable Executable file
        /// so that the application can only be run in an app container.
        /// Also known as a "Windows Store app".
        /// </remarks>
        WindowsRuntimeApplication = 5,
    }
    internal static partial class EnumBounds
    {
        internal static bool IsValid(this OutputKind value)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(25, 1564, 1746);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 1640, 1735);

                return value >= OutputKind.ConsoleApplication && (DynAbs.Tracing.TraceSender.Expression_True(25, 1647, 1734) && value <= OutputKind.WindowsRuntimeApplication);
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(25, 1564, 1746);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(25, 1564, 1746);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 1564, 1746);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static string GetDefaultExtension(this OutputKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(25, 1758, 2452);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 1847, 2441);

                switch (kind)
                {

                    case OutputKind.ConsoleApplication:
                    case OutputKind.WindowsApplication:
                    case OutputKind.WindowsRuntimeApplication:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 1847, 2441);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2063, 2077);

                        return ".exe";
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 1847, 2441);

                    case OutputKind.DynamicallyLinkedLibrary:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 1847, 2441);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2160, 2174);

                        return ".dll";
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 1847, 2441);

                    case OutputKind.NetModule:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 1847, 2441);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2242, 2262);

                        return ".netmodule";
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 1847, 2441);

                    case OutputKind.WindowsRuntimeMetadata:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 1847, 2441);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2343, 2362);

                        return ".winmdobj";
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 1847, 2441);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 1847, 2441);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2412, 2426);

                        return ".dll";
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 1847, 2441);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(25, 1758, 2452);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(25, 1758, 2452);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 1758, 2452);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static bool IsApplication(this OutputKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(25, 2464, 3059);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2545, 3048);

                switch (kind)
                {

                    case OutputKind.ConsoleApplication:
                    case OutputKind.WindowsApplication:
                    case OutputKind.WindowsRuntimeApplication:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 2545, 3048);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2761, 2773);

                        return true;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 2545, 3048);

                    case OutputKind.DynamicallyLinkedLibrary:
                    case OutputKind.NetModule:
                    case OutputKind.WindowsRuntimeMetadata:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 2545, 3048);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 2957, 2970);

                        return false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 2545, 3048);

                    default:
                        DynAbs.Tracing.TraceSender.TraceEnterCondition(25, 2545, 3048);
                        DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 3020, 3033);

                        return false;
                        DynAbs.Tracing.TraceSender.TraceExitCondition(25, 2545, 3048);
                }
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(25, 2464, 3059);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(25, 2464, 3059);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 2464, 3059);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static bool IsNetModule(this OutputKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(25, 3071, 3197);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 3150, 3186);

                return kind == OutputKind.NetModule;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(25, 3071, 3197);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(25, 3071, 3197);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 3071, 3197);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        internal static bool IsWindowsRuntime(this OutputKind kind)
        {
            try
            {
                DynAbs.Tracing.TraceSender.TraceEnterStaticMethod(25, 3209, 3353);
                DynAbs.Tracing.TraceSender.TraceSimpleStatement(25, 3293, 3342);

                return kind == OutputKind.WindowsRuntimeMetadata;
                DynAbs.Tracing.TraceSender.TraceExitStaticMethod(25, 3209, 3353);
            }
            catch
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalCatch(25, 3209, 3353);
                throw;
            }
            finally
            {
                DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 3209, 3353);
            }
            throw new System.Exception("Slicer error: unreachable code");
        }

        static EnumBounds()
        {
            DynAbs.Tracing.TraceSender.TraceEnterStaticConstructor(25, 1507, 3360);
            DynAbs.Tracing.TraceSender.TraceExitStaticConstructor(25, 1507, 3360);

            DynAbs.Tracing.TraceSender.TraceEnterFinalFinally(25, 1507, 3360);
        }

    }
}
